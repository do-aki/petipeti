Terminals which are not used

   "(scalar) (T_SCALAR_CAST)"
   T_CHARACTER
   T_BAD_CHARACTER
   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"


State 757 conflicts: 2 shift/reduce


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 @1: /* empty */

    3 top_statement_list: top_statement_list @1 top_statement
    4                   | /* empty */

    5 namespace_name: "identifier (T_STRING)"
    6               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

    7 top_statement: statement
    8              | function_declaration_statement
    9              | class_declaration_statement
   10              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   11              | "namespace (T_NAMESPACE)" namespace_name ';'

   12 @2: /* empty */

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list '}'

   14 @3: /* empty */

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list '}'
   16              | "use (T_USE)" use_declarations ';'
   17              | constant_declaration ';'

   18 use_declarations: use_declarations ',' use_declaration
   19                 | use_declaration

   20 use_declaration: namespace_name
   21                | namespace_name "as (T_AS)" "identifier (T_STRING)"
   22                | "\\ (T_NS_SEPARATOR)" namespace_name
   23                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
   25                     | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

   26 @4: /* empty */

   27 inner_statement_list: inner_statement_list @4 inner_statement
   28                     | /* empty */

   29 inner_statement: statement
   30                | function_declaration_statement
   31                | class_declaration_statement
   32                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

   33 statement: unticked_statement
   34          | "identifier (T_STRING)" ':'

   35 unticked_statement: '{' inner_statement_list '}'

   36 @5: /* empty */

   37 @6: /* empty */

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list else_single

   39 @7: /* empty */

   40 @8: /* empty */

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

   42 @9: /* empty */

   43 @10: /* empty */

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 while_statement

   45 @11: /* empty */

   46 @12: /* empty */

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' ';'

   48 @13: /* empty */

   49 @14: /* empty */

   50 @15: /* empty */

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

   52 @16: /* empty */

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 switch_case_list
   54                   | "break (T_BREAK)" ';'
   55                   | "break (T_BREAK)" expr ';'
   56                   | "continue (T_CONTINUE)" ';'
   57                   | "continue (T_CONTINUE)" expr ';'
   58                   | "return (T_RETURN)" ';'
   59                   | "return (T_RETURN)" expr_without_variable ';'
   60                   | "return (T_RETURN)" variable ';'
   61                   | "global (T_GLOBAL)" global_var_list ';'
   62                   | "static (T_STATIC)" static_var_list ';'
   63                   | "echo (T_ECHO)" echo_expr_list ';'
   64                   | T_INLINE_HTML
   65                   | expr ';'
   66                   | "unset (T_UNSET)" '(' unset_variables ')' ';'

   67 @17: /* empty */

   68 @18: /* empty */

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement

   70 @19: /* empty */

   71 @20: /* empty */

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

   73 @21: /* empty */

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' declare_statement
   75                   | ';'

   76 @22: /* empty */

   77 @23: /* empty */

   78 @24: /* empty */

   79 @25: /* empty */

   80 @26: /* empty */

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches
   82                   | "throw (T_THROW)" expr ';'
   83                   | "goto (T_GOTO)" "identifier (T_STRING)" ';'

   84 additional_catches: non_empty_additional_catches
   85                   | /* empty */

   86 non_empty_additional_catches: additional_catch
   87                             | non_empty_additional_catches additional_catch

   88 @27: /* empty */

   89 @28: /* empty */

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

   91 unset_variables: unset_variable
   92                | unset_variables ',' unset_variable

   93 unset_variable: variable

   94 function_declaration_statement: unticked_function_declaration_statement

   95 class_declaration_statement: unticked_class_declaration_statement

   96 is_reference: /* empty */
   97             | '&'

   98 @29: /* empty */

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'

  100 @30: /* empty */

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}'

  102 @31: /* empty */

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}'

  104 class_entry_type: "class (T_CLASS)"
  105                 | "abstract (T_ABSTRACT)" "class (T_CLASS)"
  106                 | "trait (T_TRAIT)"
  107                 | "final (T_FINAL)" "class (T_CLASS)"

  108 extends_from: /* empty */
  109             | "extends (T_EXTENDS)" fully_qualified_class_name

  110 interface_entry: "interface (T_INTERFACE)"

  111 interface_extends_list: /* empty */
  112                       | "extends (T_EXTENDS)" interface_list

  113 implements_list: /* empty */
  114                | "implements (T_IMPLEMENTS)" interface_list

  115 interface_list: fully_qualified_class_name
  116               | interface_list ',' fully_qualified_class_name

  117 foreach_optional_arg: /* empty */
  118                     | "=> (T_DOUBLE_ARROW)" foreach_variable

  119 foreach_variable: variable
  120                 | '&' variable

  121 for_statement: statement
  122              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  123 foreach_statement: statement
  124                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  125 declare_statement: statement
  126                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  127 declare_list: "identifier (T_STRING)" '=' static_scalar
  128             | declare_list ',' "identifier (T_STRING)" '=' static_scalar

  129 switch_case_list: '{' case_list '}'
  130                 | '{' ';' case_list '}'
  131                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  132                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  133 case_list: /* empty */

  134 @32: /* empty */

  135 case_list: case_list "case (T_CASE)" expr case_separator @32 inner_statement_list

  136 @33: /* empty */

  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 inner_statement_list

  138 case_separator: ':'
  139               | ';'

  140 while_statement: statement
  141                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  142 elseif_list: /* empty */

  143 @34: /* empty */

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 statement

  145 new_elseif_list: /* empty */

  146 @35: /* empty */

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list

  148 else_single: /* empty */
  149            | "else (T_ELSE)" statement

  150 new_else_single: /* empty */
  151                | "else (T_ELSE)" ':' inner_statement_list

  152 parameter_list: non_empty_parameter_list
  153               | /* empty */

  154 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)"
  155                         | optional_class_type '&' "variable (T_VARIABLE)"
  156                         | optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  157                         | optional_class_type "variable (T_VARIABLE)" '=' static_scalar
  158                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

  162 optional_class_type: /* empty */
  163                    | "array (T_ARRAY)"
  164                    | fully_qualified_class_name

  165 function_call_parameter_list: non_empty_function_call_parameter_list
  166                             | /* empty */

  167 non_empty_function_call_parameter_list: expr_without_variable
  168                                       | variable
  169                                       | '&' w_variable
  170                                       | non_empty_function_call_parameter_list ',' expr_without_variable
  171                                       | non_empty_function_call_parameter_list ',' variable
  172                                       | non_empty_function_call_parameter_list ',' '&' w_variable

  173 global_var_list: global_var_list ',' global_var
  174                | global_var

  175 global_var: "variable (T_VARIABLE)"
  176           | '$' r_variable
  177           | '$' '{' expr '}'

  178 static_var_list: static_var_list ',' "variable (T_VARIABLE)"
  179                | static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar
  180                | "variable (T_VARIABLE)"
  181                | "variable (T_VARIABLE)" '=' static_scalar

  182 class_statement_list: class_statement_list class_statement
  183                     | /* empty */

  184 @36: /* empty */

  185 class_statement: variable_modifiers @36 class_variable_declaration ';'
  186                | class_constant_declaration ';'
  187                | trait_use_statement

  188 @37: /* empty */

  189 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

  190 trait_use_statement: "use (T_USE)" trait_list trait_adaptations

  191 trait_list: fully_qualified_class_name
  192           | trait_list ',' fully_qualified_class_name

  193 trait_adaptations: ';'
  194                  | '{' trait_adaptation_list '}'

  195 trait_adaptation_list: /* empty */
  196                      | non_empty_trait_adaptation_list

  197 non_empty_trait_adaptation_list: trait_adaptation_statement
  198                                | non_empty_trait_adaptation_list trait_adaptation_statement

  199 trait_adaptation_statement: trait_precedence ';'
  200                           | trait_alias ';'

  201 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list

  202 trait_reference_list: fully_qualified_class_name
  203                     | trait_reference_list ',' fully_qualified_class_name

  204 trait_method_reference: "identifier (T_STRING)"
  205                       | trait_method_reference_fully_qualified

  206 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  207 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  208            | trait_method_reference "as (T_AS)" member_modifier

  209 trait_modifiers: /* empty */
  210                | member_modifier

  211 method_body: ';'
  212            | '{' inner_statement_list '}'

  213 variable_modifiers: non_empty_member_modifiers
  214                   | "var (T_VAR)"

  215 method_modifiers: /* empty */
  216                 | non_empty_member_modifiers

  217 non_empty_member_modifiers: member_modifier
  218                           | non_empty_member_modifiers member_modifier

  219 member_modifier: "public (T_PUBLIC)"
  220                | "protected (T_PROTECTED)"
  221                | "private (T_PRIVATE)"
  222                | "static (T_STATIC)"
  223                | "abstract (T_ABSTRACT)"
  224                | "final (T_FINAL)"

  225 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)"
  226                           | class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar
  227                           | "variable (T_VARIABLE)"
  228                           | "variable (T_VARIABLE)" '=' static_scalar

  229 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
  230                           | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

  231 echo_expr_list: echo_expr_list ',' expr
  232               | expr

  233 for_expr: /* empty */
  234         | non_empty_for_expr

  235 @38: /* empty */

  236 non_empty_for_expr: non_empty_for_expr ',' @38 expr
  237                   | expr

  238 @39: /* empty */

  239 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' '=' expr
  240                      | variable '=' expr
  241                      | variable '=' '&' variable

  242 @40: /* empty */

  243 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments

  244 @41: /* empty */

  245 expr_without_variable: "new (T_NEW)" class_name_reference @41 ctor_arguments
  246                      | "clone (T_CLONE)" expr
  247                      | variable "+= (T_PLUS_EQUAL)" expr
  248                      | variable "-= (T_MINUS_EQUAL)" expr
  249                      | variable "*= (T_MUL_EQUAL)" expr
  250                      | variable "/= (T_DIV_EQUAL)" expr
  251                      | variable ".= (T_CONCAT_EQUAL)" expr
  252                      | variable "%= (T_MOD_EQUAL)" expr
  253                      | variable "&= (T_AND_EQUAL)" expr
  254                      | variable "|= (T_OR_EQUAL)" expr
  255                      | variable "^= (T_XOR_EQUAL)" expr
  256                      | variable "<<= (T_SL_EQUAL)" expr
  257                      | variable ">>= (T_SR_EQUAL)" expr
  258                      | rw_variable "++ (T_INC)"
  259                      | "++ (T_INC)" rw_variable
  260                      | rw_variable "-- (T_DEC)"
  261                      | "-- (T_DEC)" rw_variable

  262 @42: /* empty */

  263 expr_without_variable: expr "|| (T_BOOLEAN_OR)" @42 expr

  264 @43: /* empty */

  265 expr_without_variable: expr "&& (T_BOOLEAN_AND)" @43 expr

  266 @44: /* empty */

  267 expr_without_variable: expr "or (T_LOGICAL_OR)" @44 expr

  268 @45: /* empty */

  269 expr_without_variable: expr "and (T_LOGICAL_AND)" @45 expr
  270                      | expr "xor (T_LOGICAL_XOR)" expr
  271                      | expr '|' expr
  272                      | expr '&' expr
  273                      | expr '^' expr
  274                      | expr '.' expr
  275                      | expr '+' expr
  276                      | expr '-' expr
  277                      | expr '*' expr
  278                      | expr '/' expr
  279                      | expr '%' expr
  280                      | expr "<< (T_SL)" expr
  281                      | expr ">> (T_SR)" expr
  282                      | '+' expr
  283                      | '-' expr
  284                      | '!' expr
  285                      | '~' expr
  286                      | expr "=== (T_IS_IDENTICAL)" expr
  287                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr "== (T_IS_EQUAL)" expr
  289                      | expr "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr '<' expr
  291                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr '>' expr
  293                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  295                      | '(' expr ')'

  296 @46: /* empty */

  297 @47: /* empty */

  298 expr_without_variable: expr '?' @46 expr ':' @47 expr

  299 @48: /* empty */

  300 expr_without_variable: expr '?' ':' @48 expr
  301                      | internal_functions_in_yacc
  302                      | "(int) (T_INT_CAST)" expr
  303                      | "(double) (T_DOUBLE_CAST)" expr
  304                      | "(string) (T_STRING_CAST)" expr
  305                      | "(array) (T_ARRAY_CAST)" expr
  306                      | "(object) (T_OBJECT_CAST)" expr
  307                      | "(bool) (T_BOOL_CAST)" expr
  308                      | "(unset) (T_UNSET_CAST)" expr
  309                      | "exit (T_EXIT)" exit_expr

  310 @49: /* empty */

  311 expr_without_variable: '@' @49 expr
  312                      | scalar
  313                      | "array (T_ARRAY)" '(' array_pair_list ')'
  314                      | '[' array_pair_list ']'
  315                      | '`' backticks_expr '`'
  316                      | "print (T_PRINT)" expr

  317 @50: /* empty */

  318 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

  319 @51: /* empty */

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

  321 function: "function (T_FUNCTION)"

  322 lexical_vars: /* empty */
  323             | "use (T_USE)" '(' lexical_var_list ')'

  324 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)"
  325                 | lexical_var_list ',' '&' "variable (T_VARIABLE)"
  326                 | "variable (T_VARIABLE)"
  327                 | '&' "variable (T_VARIABLE)"

  328 @52: /* empty */

  329 function_call: namespace_name '(' @52 function_call_parameter_list ')'

  330 @53: /* empty */

  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'

  332 @54: /* empty */

  333 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 function_call_parameter_list ')'

  334 @55: /* empty */

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')'

  336 @56: /* empty */

  337 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')'

  338 @57: /* empty */

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')'

  340 @58: /* empty */

  341 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')'

  342 @59: /* empty */

  343 function_call: variable_without_objects '(' @59 function_call_parameter_list ')'

  344 class_name: "static (T_STATIC)"
  345           | namespace_name
  346           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  347           | "\\ (T_NS_SEPARATOR)" namespace_name

  348 fully_qualified_class_name: namespace_name
  349                           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  350                           | "\\ (T_NS_SEPARATOR)" namespace_name

  351 class_name_reference: class_name
  352                     | dynamic_class_name_reference

  353 @60: /* empty */

  354 @61: /* empty */

  355 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property @61 dynamic_class_name_variable_properties
  356                             | base_variable

  357 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property
  358                                       | /* empty */

  359 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property

  360 exit_expr: /* empty */
  361          | '(' ')'
  362          | '(' expr ')'

  363 backticks_expr: /* empty */
  364               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  365               | encaps_list

  366 ctor_arguments: /* empty */
  367               | '(' function_call_parameter_list ')'

  368 common_scalar: "integer number (T_LNUMBER)"
  369              | "floating-point number (T_DNUMBER)"
  370              | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  371              | "__LINE__ (T_LINE)"
  372              | "__FILE__ (T_FILE)"
  373              | "__DIR__ (T_DIR)"
  374              | "__CLASS__ (T_CLASS_C)"
  375              | "__TRAIT__ (T_TRAIT_C)"
  376              | "__METHOD__ (T_METHOD_C)"
  377              | "__FUNCTION__ (T_FUNC_C)"
  378              | "__NAMESPACE__ (T_NS_C)"
  379              | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  380              | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"

  381 static_scalar: common_scalar
  382              | namespace_name
  383              | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  384              | "\\ (T_NS_SEPARATOR)" namespace_name
  385              | '+' static_scalar
  386              | '-' static_scalar
  387              | "array (T_ARRAY)" '(' static_array_pair_list ')'
  388              | '[' static_array_pair_list ']'
  389              | static_class_constant

  390 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  391 scalar: "variable name (T_STRING_VARNAME)"
  392       | class_constant
  393       | namespace_name
  394       | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  395       | "\\ (T_NS_SEPARATOR)" namespace_name
  396       | common_scalar
  397       | '"' encaps_list '"'
  398       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"

  399 static_array_pair_list: /* empty */
  400                       | non_empty_static_array_pair_list possible_comma

  401 possible_comma: /* empty */
  402               | ','

  403 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  404                                 | non_empty_static_array_pair_list ',' static_scalar
  405                                 | static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  406                                 | static_scalar

  407 expr: r_variable
  408     | expr_without_variable

  409 r_variable: variable

  410 w_variable: variable

  411 rw_variable: variable

  412 @62: /* empty */

  413 @63: /* empty */

  414 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not variable_properties
  415         | base_variable_with_function_calls

  416 variable_properties: variable_properties variable_property
  417                    | /* empty */

  418 @64: /* empty */

  419 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @64 method_or_not

  420 array_method_dereference: array_method_dereference '[' dim_offset ']'
  421                         | method '[' dim_offset ']'

  422 @65: /* empty */

  423 method: '(' @65 function_call_parameter_list ')'

  424 method_or_not: method
  425              | array_method_dereference
  426              | /* empty */

  427 variable_without_objects: reference_variable
  428                         | simple_indirect_reference reference_variable

  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  430              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

  431 variable_class_name: reference_variable

  432 array_function_dereference: array_function_dereference '[' dim_offset ']'

  433 @66: /* empty */

  434 array_function_dereference: function_call @66 '[' dim_offset ']'

  435 base_variable_with_function_calls: base_variable
  436                                  | array_function_dereference
  437                                  | function_call

  438 base_variable: reference_variable
  439              | simple_indirect_reference reference_variable
  440              | static_member

  441 reference_variable: reference_variable '[' dim_offset ']'
  442                   | reference_variable '{' expr '}'
  443                   | compound_variable

  444 compound_variable: "variable (T_VARIABLE)"
  445                  | '$' '{' expr '}'

  446 dim_offset: /* empty */
  447           | expr

  448 object_property: object_dim_list

  449 @67: /* empty */

  450 object_property: variable_without_objects @67

  451 object_dim_list: object_dim_list '[' dim_offset ']'
  452                | object_dim_list '{' expr '}'
  453                | variable_name

  454 variable_name: "identifier (T_STRING)"
  455              | '{' expr '}'

  456 simple_indirect_reference: '$'
  457                          | simple_indirect_reference '$'

  458 assignment_list: assignment_list ',' assignment_list_element
  459                | assignment_list_element

  460 assignment_list_element: variable

  461 @68: /* empty */

  462 assignment_list_element: "list (T_LIST)" '(' @68 assignment_list ')'
  463                        | /* empty */

  464 array_pair_list: /* empty */
  465                | non_empty_array_pair_list possible_comma

  466 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr
  467                          | non_empty_array_pair_list ',' expr
  468                          | expr "=> (T_DOUBLE_ARROW)" expr
  469                          | expr
  470                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  471                          | non_empty_array_pair_list ',' '&' w_variable
  472                          | expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  473                          | '&' w_variable

  474 encaps_list: encaps_list encaps_var
  475            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  476            | encaps_var
  477            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  478 encaps_var: "variable (T_VARIABLE)"

  479 @69: /* empty */

  480 encaps_var: "variable (T_VARIABLE)" '[' @69 encaps_var_offset ']'
  481           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  482           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  483           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  484           | "{$ (T_CURLY_OPEN)" variable '}'

  485 encaps_var_offset: "identifier (T_STRING)"
  486                  | "number (T_NUM_STRING)"
  487                  | "variable (T_VARIABLE)"

  488 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  489                           | "empty (T_EMPTY)" '(' variable ')'
  490                           | "include (T_INCLUDE)" expr
  491                           | "include_once (T_INCLUDE_ONCE)" expr
  492                           | "eval (T_EVAL)" '(' expr ')'
  493                           | "require (T_REQUIRE)" expr
  494                           | "require_once (T_REQUIRE_ONCE)" expr

  495 isset_variables: variable

  496 @70: /* empty */

  497 isset_variables: isset_variables ',' @70 variable

  498 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  499               | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 284
'"' (34) 397
'$' (36) 176 177 445 456 457
'%' (37) 279
'&' (38) 97 120 155 156 159 160 169 172 241 243 272 325 327 470 471
    472 473
'(' (40) 10 32 38 41 44 47 51 53 66 69 72 74 81 90 99 144 147 189 239
    295 313 318 320 323 329 331 333 335 337 339 341 343 361 362 367
    387 423 462 488 489 492
')' (41) 10 32 38 41 44 47 51 53 66 69 72 74 81 90 99 144 147 189 239
    295 313 318 320 323 329 331 333 335 337 339 341 343 361 362 367
    387 423 462 488 489 492
'*' (42) 277
'+' (43) 275 282 385
',' (44) 18 24 92 116 128 158 159 160 161 170 171 172 173 178 179 192
    203 225 226 229 231 236 324 325 402 403 404 458 466 467 470 471
    497
'-' (45) 276 283 386
'.' (46) 274
'/' (47) 278
':' (58) 34 41 122 124 126 131 132 138 141 147 151 298 300
';' (59) 10 11 16 17 32 41 47 51 54 55 56 57 58 59 60 61 62 63 65 66
    75 82 83 122 124 126 130 131 132 139 141 185 186 193 199 200 211
'<' (60) 290
'=' (61) 24 25 127 128 156 157 160 161 179 181 226 228 229 230 239
    240 241 243
'>' (62) 292
'?' (63) 298 300
'@' (64) 311
'[' (91) 314 388 420 421 432 434 441 451 480 483
']' (93) 314 388 420 421 432 434 441 451 480 483
'^' (94) 273
'`' (96) 315
'{' (123) 13 15 35 81 90 99 101 103 129 130 177 194 212 318 320 442
    445 452 455
'|' (124) 271
'}' (125) 13 15 35 81 90 99 101 103 129 130 177 194 212 318 320 442
    445 452 455 482 483 484
'~' (126) 285
error (256)
"require_once (T_REQUIRE_ONCE)" (258) 494
"require (T_REQUIRE)" (259) 493
"eval (T_EVAL)" (260) 492
"include_once (T_INCLUDE_ONCE)" (261) 491
"include (T_INCLUDE)" (262) 490
"or (T_LOGICAL_OR)" (263) 267
"xor (T_LOGICAL_XOR)" (264) 270
"and (T_LOGICAL_AND)" (265) 269
"print (T_PRINT)" (266) 316
">>= (T_SR_EQUAL)" (267) 257
"<<= (T_SL_EQUAL)" (268) 256
"^= (T_XOR_EQUAL)" (269) 255
"|= (T_OR_EQUAL)" (270) 254
"&= (T_AND_EQUAL)" (271) 253
"%= (T_MOD_EQUAL)" (272) 252
".= (T_CONCAT_EQUAL)" (273) 251
"/= (T_DIV_EQUAL)" (274) 250
"*= (T_MUL_EQUAL)" (275) 249
"-= (T_MINUS_EQUAL)" (276) 248
"+= (T_PLUS_EQUAL)" (277) 247
"|| (T_BOOLEAN_OR)" (278) 263
"&& (T_BOOLEAN_AND)" (279) 265
"!== (T_IS_NOT_IDENTICAL)" (280) 287
"=== (T_IS_IDENTICAL)" (281) 286
"!= (T_IS_NOT_EQUAL)" (282) 289
"== (T_IS_EQUAL)" (283) 288
">= (T_IS_GREATER_OR_EQUAL)" (284) 293
"<= (T_IS_SMALLER_OR_EQUAL)" (285) 291
">> (T_SR)" (286) 281
"<< (T_SL)" (287) 280
"instanceof (T_INSTANCEOF)" (288) 294
"(unset) (T_UNSET_CAST)" (289) 308
"(bool) (T_BOOL_CAST)" (290) 307
"(object) (T_OBJECT_CAST)" (291) 306
"(array) (T_ARRAY_CAST)" (292) 305
"(string) (T_STRING_CAST)" (293) 304
"(double) (T_DOUBLE_CAST)" (294) 303
"(int) (T_INT_CAST)" (295) 302
"-- (T_DEC)" (296) 260 261
"++ (T_INC)" (297) 258 259
"(scalar) (T_SCALAR_CAST)" (298)
"clone (T_CLONE)" (299) 246
"new (T_NEW)" (300) 243 245
"exit (T_EXIT)" (301) 309
"if (T_IF)" (302) 38 41
"elseif (T_ELSEIF)" (303) 144 147
"else (T_ELSE)" (304) 149 151
"endif (T_ENDIF)" (305) 41
"integer number (T_LNUMBER)" (306) 368
"floating-point number (T_DNUMBER)" (307) 369
"identifier (T_STRING)" (308) 5 6 21 23 24 25 34 83 99 101 103 127
    128 189 204 206 207 229 230 390 454 481 485 498 499
"variable name (T_STRING_VARNAME)" (309) 391 483
"variable (T_VARIABLE)" (310) 81 90 154 155 156 157 158 159 160 161
    175 178 179 180 181 225 226 227 228 324 325 326 327 444 478 480
    481 487
"number (T_NUM_STRING)" (311) 486
T_INLINE_HTML (312) 64
T_CHARACTER (313)
T_BAD_CHARACTER (314)
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
    (315) 364 379 475 477
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (316) 370
"echo (T_ECHO)" (317) 63
"do (T_DO)" (318) 47
"while (T_WHILE)" (319) 44 47
"endwhile (T_ENDWHILE)" (320) 141
"for (T_FOR)" (321) 51
"endfor (T_ENDFOR)" (322) 122
"foreach (T_FOREACH)" (323) 69 72
"endforeach (T_ENDFOREACH)" (324) 124
"declare (T_DECLARE)" (325) 74
"enddeclare (T_ENDDECLARE)" (326) 126
"as (T_AS)" (327) 21 23 69 72 207 208
"switch (T_SWITCH)" (328) 53
"endswitch (T_ENDSWITCH)" (329) 131 132
"case (T_CASE)" (330) 135
"default (T_DEFAULT)" (331) 137
"break (T_BREAK)" (332) 54 55
"continue (T_CONTINUE)" (333) 56 57
"goto (T_GOTO)" (334) 83
"function (T_FUNCTION)" (335) 321
"const (T_CONST)" (336) 25 230
"return (T_RETURN)" (337) 58 59 60
"try (T_TRY)" (338) 81
"catch (T_CATCH)" (339) 81 90
"throw (T_THROW)" (340) 82
"use (T_USE)" (341) 16 190 323
"insteadof (T_INSTEADOF)" (342) 201
"global (T_GLOBAL)" (343) 61
"public (T_PUBLIC)" (344) 219
"protected (T_PROTECTED)" (345) 220
"private (T_PRIVATE)" (346) 221
"final (T_FINAL)" (347) 107 224
"abstract (T_ABSTRACT)" (348) 105 223
"static (T_STATIC)" (349) 62 222 320 344
"var (T_VAR)" (350) 214
"unset (T_UNSET)" (351) 66
"isset (T_ISSET)" (352) 488
"empty (T_EMPTY)" (353) 489
"__halt_compiler (T_HALT_COMPILER)" (354) 10 32
"class (T_CLASS)" (355) 104 105 107
"trait (T_TRAIT)" (356) 106
"interface (T_INTERFACE)" (357) 110
"extends (T_EXTENDS)" (358) 109 112
"implements (T_IMPLEMENTS)" (359) 114
"-> (T_OBJECT_OPERATOR)" (360) 355 359 414 419 481
"=> (T_DOUBLE_ARROW)" (361) 118 403 405 466 468 470 472
"list (T_LIST)" (362) 239 462
"array (T_ARRAY)" (363) 163 313 387
"__CLASS__ (T_CLASS_C)" (364) 374
"__TRAIT__ (T_TRAIT_C)" (365) 375
"__METHOD__ (T_METHOD_C)" (366) 376
"__FUNCTION__ (T_FUNC_C)" (367) 377
"__LINE__ (T_LINE)" (368) 371
"__FILE__ (T_FILE)" (369) 372
"comment (T_COMMENT)" (370)
"doc comment (T_DOC_COMMENT)" (371)
"open tag (T_OPEN_TAG)" (372)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (373)
"close tag (T_CLOSE_TAG)" (374)
"whitespace (T_WHITESPACE)" (375)
"heredoc start (T_START_HEREDOC)" (376) 379 380 398
"heredoc end (T_END_HEREDOC)" (377) 379 380 398
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (378) 482 483
"{$ (T_CURLY_OPEN)" (379) 484
":: (T_PAAMAYIM_NEKUDOTAYIM)" (380) 206 335 337 339 341 390 429 430
    498 499
"namespace (T_NAMESPACE)" (381) 11 13 15 331 346 349 383 394
"__NAMESPACE__ (T_NS_C)" (382) 378
"__DIR__ (T_DIR)" (383) 373
"\\ (T_NS_SEPARATOR)" (384) 6 22 23 331 333 346 347 349 350 383 384
    394 395


Nonterminals, with rules where they appear

$accept (158)
    on left: 0
start (159)
    on left: 1, on right: 0
top_statement_list (160)
    on left: 3 4, on right: 1 3 13 15
@1 (161)
    on left: 2, on right: 3
namespace_name (162)
    on left: 5 6, on right: 6 11 13 20 21 22 23 329 331 333 345 346
    347 348 349 350 382 383 384 393 394 395
top_statement (163)
    on left: 7 8 9 10 11 13 15 16 17, on right: 3
@2 (164)
    on left: 12, on right: 13
@3 (165)
    on left: 14, on right: 15
use_declarations (166)
    on left: 18 19, on right: 16 18
use_declaration (167)
    on left: 20 21 22 23, on right: 18 19
constant_declaration (168)
    on left: 24 25, on right: 17 24
inner_statement_list (169)
    on left: 27 28, on right: 27 35 41 81 90 99 122 124 126 135 137
    141 147 151 212 318 320
@4 (170)
    on left: 26, on right: 27
inner_statement (171)
    on left: 29 30 31 32, on right: 27
statement (172)
    on left: 33 34, on right: 7 29 38 47 121 123 125 140 144 149
unticked_statement (173)
    on left: 35 38 41 44 47 51 53 54 55 56 57 58 59 60 61 62 63 64
    65 66 69 72 74 75 81 82 83, on right: 33
@5 (174)
    on left: 36, on right: 38
@6 (175)
    on left: 37, on right: 38
@7 (176)
    on left: 39, on right: 41
@8 (177)
    on left: 40, on right: 41
@9 (178)
    on left: 42, on right: 44
@10 (179)
    on left: 43, on right: 44
@11 (180)
    on left: 45, on right: 47
@12 (181)
    on left: 46, on right: 47
@13 (182)
    on left: 48, on right: 51
@14 (183)
    on left: 49, on right: 51
@15 (184)
    on left: 50, on right: 51
@16 (185)
    on left: 52, on right: 53
@17 (186)
    on left: 67, on right: 69
@18 (187)
    on left: 68, on right: 69
@19 (188)
    on left: 70, on right: 72
@20 (189)
    on left: 71, on right: 72
@21 (190)
    on left: 73, on right: 74
@22 (191)
    on left: 76, on right: 81
@23 (192)
    on left: 77, on right: 81
@24 (193)
    on left: 78, on right: 81
@25 (194)
    on left: 79, on right: 81
@26 (195)
    on left: 80, on right: 81
additional_catches (196)
    on left: 84 85, on right: 81
non_empty_additional_catches (197)
    on left: 86 87, on right: 84 87
additional_catch (198)
    on left: 90, on right: 86 87
@27 (199)
    on left: 88, on right: 90
@28 (200)
    on left: 89, on right: 90
unset_variables (201)
    on left: 91 92, on right: 66 92
unset_variable (202)
    on left: 93, on right: 91 92
function_declaration_statement (203)
    on left: 94, on right: 8 30
class_declaration_statement (204)
    on left: 95, on right: 9 31
is_reference (205)
    on left: 96 97, on right: 99 189 318 320
unticked_function_declaration_statement (206)
    on left: 99, on right: 94
@29 (207)
    on left: 98, on right: 99
unticked_class_declaration_statement (208)
    on left: 101 103, on right: 95
@30 (209)
    on left: 100, on right: 101
@31 (210)
    on left: 102, on right: 103
class_entry_type (211)
    on left: 104 105 106 107, on right: 101
extends_from (212)
    on left: 108 109, on right: 101
interface_entry (213)
    on left: 110, on right: 103
interface_extends_list (214)
    on left: 111 112, on right: 103
implements_list (215)
    on left: 113 114, on right: 101
interface_list (216)
    on left: 115 116, on right: 112 114 116
foreach_optional_arg (217)
    on left: 117 118, on right: 69 72
foreach_variable (218)
    on left: 119 120, on right: 69 118
for_statement (219)
    on left: 121 122, on right: 51
foreach_statement (220)
    on left: 123 124, on right: 69 72
declare_statement (221)
    on left: 125 126, on right: 74
declare_list (222)
    on left: 127 128, on right: 74 128
switch_case_list (223)
    on left: 129 130 131 132, on right: 53
case_list (224)
    on left: 133 135 137, on right: 129 130 131 132 135 137
@32 (225)
    on left: 134, on right: 135
@33 (226)
    on left: 136, on right: 137
case_separator (227)
    on left: 138 139, on right: 135 137
while_statement (228)
    on left: 140 141, on right: 44
elseif_list (229)
    on left: 142 144, on right: 38 144
@34 (230)
    on left: 143, on right: 144
new_elseif_list (231)
    on left: 145 147, on right: 41 147
@35 (232)
    on left: 146, on right: 147
else_single (233)
    on left: 148 149, on right: 38
new_else_single (234)
    on left: 150 151, on right: 41
parameter_list (235)
    on left: 152 153, on right: 99 189 318 320
non_empty_parameter_list (236)
    on left: 154 155 156 157 158 159 160 161, on right: 152 158 159
    160 161
optional_class_type (237)
    on left: 162 163 164, on right: 154 155 156 157 158 159 160 161
function_call_parameter_list (238)
    on left: 165 166, on right: 329 331 333 335 337 339 341 343 367
    423
non_empty_function_call_parameter_list (239)
    on left: 167 168 169 170 171 172, on right: 165 170 171 172
global_var_list (240)
    on left: 173 174, on right: 61 173
global_var (241)
    on left: 175 176 177, on right: 173 174
static_var_list (242)
    on left: 178 179 180 181, on right: 62 178 179
class_statement_list (243)
    on left: 182 183, on right: 101 103 182
class_statement (244)
    on left: 185 186 187 189, on right: 182
@36 (245)
    on left: 184, on right: 185
@37 (246)
    on left: 188, on right: 189
trait_use_statement (247)
    on left: 190, on right: 187
trait_list (248)
    on left: 191 192, on right: 190 192
trait_adaptations (249)
    on left: 193 194, on right: 190
trait_adaptation_list (250)
    on left: 195 196, on right: 194
non_empty_trait_adaptation_list (251)
    on left: 197 198, on right: 196 198
trait_adaptation_statement (252)
    on left: 199 200, on right: 197 198
trait_precedence (253)
    on left: 201, on right: 199
trait_reference_list (254)
    on left: 202 203, on right: 201 203
trait_method_reference (255)
    on left: 204 205, on right: 207 208
trait_method_reference_fully_qualified (256)
    on left: 206, on right: 201 205
trait_alias (257)
    on left: 207 208, on right: 200
trait_modifiers (258)
    on left: 209 210, on right: 207
method_body (259)
    on left: 211 212, on right: 189
variable_modifiers (260)
    on left: 213 214, on right: 185
method_modifiers (261)
    on left: 215 216, on right: 189
non_empty_member_modifiers (262)
    on left: 217 218, on right: 213 216 218
member_modifier (263)
    on left: 219 220 221 222 223 224, on right: 208 210 217 218
class_variable_declaration (264)
    on left: 225 226 227 228, on right: 185 225 226
class_constant_declaration (265)
    on left: 229 230, on right: 186 229
echo_expr_list (266)
    on left: 231 232, on right: 63 231
for_expr (267)
    on left: 233 234, on right: 51
non_empty_for_expr (268)
    on left: 236 237, on right: 234 236
@38 (269)
    on left: 235, on right: 236
expr_without_variable (270)
    on left: 239 240 241 243 245 246 247 248 249 250 251 252 253 254
    255 256 257 258 259 260 261 263 265 267 269 270 271 272 273 274
    275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290
    291 292 293 294 295 298 300 301 302 303 304 305 306 307 308 309
    311 312 313 314 315 316 318 320, on right: 59 72 167 170 408
@39 (271)
    on left: 238, on right: 239
@40 (272)
    on left: 242, on right: 243
@41 (273)
    on left: 244, on right: 245
@42 (274)
    on left: 262, on right: 263
@43 (275)
    on left: 264, on right: 265
@44 (276)
    on left: 266, on right: 267
@45 (277)
    on left: 268, on right: 269
@46 (278)
    on left: 296, on right: 298
@47 (279)
    on left: 297, on right: 298
@48 (280)
    on left: 299, on right: 300
@49 (281)
    on left: 310, on right: 311
@50 (282)
    on left: 317, on right: 318
@51 (283)
    on left: 319, on right: 320
function (284)
    on left: 321, on right: 99 189 318 320
lexical_vars (285)
    on left: 322 323, on right: 318 320
lexical_var_list (286)
    on left: 324 325 326 327, on right: 323 324 325
function_call (287)
    on left: 329 331 333 335 337 339 341 343, on right: 434 437
@52 (288)
    on left: 328, on right: 329
@53 (289)
    on left: 330, on right: 331
@54 (290)
    on left: 332, on right: 333
@55 (291)
    on left: 334, on right: 335
@56 (292)
    on left: 336, on right: 337
@57 (293)
    on left: 338, on right: 339
@58 (294)
    on left: 340, on right: 341
@59 (295)
    on left: 342, on right: 343
class_name (296)
    on left: 344 345 346 347, on right: 335 337 351 390 429 498
fully_qualified_class_name (297)
    on left: 348 349 350, on right: 81 90 109 115 116 164 191 192 202
    203 206
class_name_reference (298)
    on left: 351 352, on right: 243 245 294
dynamic_class_name_reference (299)
    on left: 355 356, on right: 352
@60 (300)
    on left: 353, on right: 355
@61 (301)
    on left: 354, on right: 355
dynamic_class_name_variable_properties (302)
    on left: 357 358, on right: 355 357
dynamic_class_name_variable_property (303)
    on left: 359, on right: 357
exit_expr (304)
    on left: 360 361 362, on right: 309
backticks_expr (305)
    on left: 363 364 365, on right: 315
ctor_arguments (306)
    on left: 366 367, on right: 243 245
common_scalar (307)
    on left: 368 369 370 371 372 373 374 375 376 377 378 379 380,
    on right: 381 396
static_scalar (308)
    on left: 381 382 383 384 385 386 387 388 389, on right: 24 25 127
    128 156 157 160 161 179 181 226 228 229 230 385 386 403 404 405
    406
static_class_constant (309)
    on left: 390, on right: 389
scalar (310)
    on left: 391 392 393 394 395 396 397 398, on right: 312
static_array_pair_list (311)
    on left: 399 400, on right: 387 388
possible_comma (312)
    on left: 401 402, on right: 400 465
non_empty_static_array_pair_list (313)
    on left: 403 404 405 406, on right: 400 403 404
expr (314)
    on left: 407 408, on right: 38 41 44 47 53 55 57 65 82 135 144
    147 177 231 232 236 237 239 240 246 247 248 249 250 251 252 253
    254 255 256 257 263 265 267 269 270 271 272 273 274 275 276 277
    278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293
    294 295 298 300 302 303 304 305 306 307 308 311 316 362 442 445
    447 452 455 466 467 468 469 470 472 482 483 490 491 492 493 494
r_variable (315)
    on left: 409, on right: 176 407
w_variable (316)
    on left: 410, on right: 169 172 470 471 472 473
rw_variable (317)
    on left: 411, on right: 258 259 260 261
variable (318)
    on left: 414 415, on right: 60 69 72 93 119 120 168 171 240 241
    243 247 248 249 250 251 252 253 254 255 256 257 409 410 411 460
    484 489 495 497
@62 (319)
    on left: 412, on right: 414
@63 (320)
    on left: 413, on right: 414
variable_properties (321)
    on left: 416 417, on right: 414 416
variable_property (322)
    on left: 419, on right: 416
@64 (323)
    on left: 418, on right: 419
array_method_dereference (324)
    on left: 420 421, on right: 420 425
method (325)
    on left: 423, on right: 421 424
@65 (326)
    on left: 422, on right: 423
method_or_not (327)
    on left: 424 425 426, on right: 414 419
variable_without_objects (328)
    on left: 427 428, on right: 337 341 343 429 430 450
static_member (329)
    on left: 429 430, on right: 440
variable_class_name (330)
    on left: 431, on right: 339 341 430 499
array_function_dereference (331)
    on left: 432 434, on right: 432 436
@66 (332)
    on left: 433, on right: 434
base_variable_with_function_calls (333)
    on left: 435 436 437, on right: 414 415
base_variable (334)
    on left: 438 439 440, on right: 355 356 435
reference_variable (335)
    on left: 441 442 443, on right: 427 428 431 438 439 441 442
compound_variable (336)
    on left: 444 445, on right: 443
dim_offset (337)
    on left: 446 447, on right: 420 421 432 434 441 451
object_property (338)
    on left: 448 450, on right: 355 359 414 419
@67 (339)
    on left: 449, on right: 450
object_dim_list (340)
    on left: 451 452 453, on right: 448 451 452
variable_name (341)
    on left: 454 455, on right: 335 339 453
simple_indirect_reference (342)
    on left: 456 457, on right: 428 439 457
assignment_list (343)
    on left: 458 459, on right: 239 458 462
assignment_list_element (344)
    on left: 460 462 463, on right: 458 459
@68 (345)
    on left: 461, on right: 462
array_pair_list (346)
    on left: 464 465, on right: 313 314
non_empty_array_pair_list (347)
    on left: 466 467 468 469 470 471 472 473, on right: 465 466 467
    470 471
encaps_list (348)
    on left: 474 475 476 477, on right: 365 397 398 474 475
encaps_var (349)
    on left: 478 480 481 482 483 484, on right: 474 476 477
@69 (350)
    on left: 479, on right: 480
encaps_var_offset (351)
    on left: 485 486 487, on right: 480
internal_functions_in_yacc (352)
    on left: 488 489 490 491 492 493 494, on right: 301
isset_variables (353)
    on left: 495 497, on right: 488 497
@70 (354)
    on left: 496, on right: 497
class_constant (355)
    on left: 498 499, on right: 392


state 0

    0 $accept: . start "end of file"

    $default  reduce using rule 4 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


state 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


state 2

    1 start: top_statement_list .
    3 top_statement_list: top_statement_list . @1 top_statement

    "end of file"  reduce using rule 1 (start)
    $default       reduce using rule 2 (@1)

    @1  go to state 4


state 3

    0 $accept: start "end of file" .

    $default  accept


state 4

    3 top_statement_list: top_statement_list @1 . top_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "const (T_CONST)"                             shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "use (T_USE)"                                 shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 53
    "final (T_FINAL)"                             shift, and go to state 54
    "abstract (T_ABSTRACT)"                       shift, and go to state 55
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 73
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                           go to state 83
    top_statement                            go to state 84
    constant_declaration                     go to state 85
    statement                                go to state 86
    unticked_statement                       go to state 87
    function_declaration_statement           go to state 88
    class_declaration_statement              go to state 89
    unticked_function_declaration_statement  go to state 90
    unticked_class_declaration_statement     go to state 91
    class_entry_type                         go to state 92
    interface_entry                          go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 5

  494 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 119
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 6

  493 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 120
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 7

  492 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 121


state 8

  491 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 122
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 9

  490 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 123
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 10

  316 expr_without_variable: "print (T_PRINT)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 124
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 11

  282 expr_without_variable: '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 125
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 12

  283 expr_without_variable: '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 126
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 13

  284 expr_without_variable: '!' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 127
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 14

  285 expr_without_variable: '~' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 128
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 15

  311 expr_without_variable: '@' . @49 expr

    $default  reduce using rule 310 (@49)

    @49  go to state 129


state 16

  308 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 130
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 17

  307 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 131
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 18

  306 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 132
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 19

  305 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 133
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 20

  304 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 134
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 21

  303 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 135
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 22

  302 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 136
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 23

  261 expr_without_variable: "-- (T_DEC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    rw_variable                        go to state 142
    variable                           go to state 143
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 24

  259 expr_without_variable: "++ (T_INC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    rw_variable                        go to state 145
    variable                           go to state 143
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 25

  314 expr_without_variable: '[' . array_pair_list ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 146
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 464 (array_pair_list)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 147
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    array_pair_list                    go to state 148
    non_empty_array_pair_list          go to state 149
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 26

  246 expr_without_variable: "clone (T_CLONE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 150
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 27

  245 expr_without_variable: "new (T_NEW)" . class_name_reference @41 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 80

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 155
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 28

  309 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 161

    $default  reduce using rule 360 (exit_expr)

    exit_expr  go to state 162


state 29

   38 unticked_statement: "if (T_IF)" . '(' expr ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" . '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    '('  shift, and go to state 163


state 30

  368 common_scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 368 (common_scalar)


state 31

  369 common_scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 369 (common_scalar)


state 32

    5 namespace_name: "identifier (T_STRING)" .
   34 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 164

    $default  reduce using rule 5 (namespace_name)


state 33

  391 scalar: "variable name (T_STRING_VARNAME)" .

    $default  reduce using rule 391 (scalar)


state 34

  444 compound_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 444 (compound_variable)


state 35

   64 unticked_statement: T_INLINE_HTML .

    $default  reduce using rule 64 (unticked_statement)


state 36

  370 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 370 (common_scalar)


state 37

   63 unticked_statement: "echo (T_ECHO)" . echo_expr_list ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    echo_expr_list                     go to state 165
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 166
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 38

   47 unticked_statement: "do (T_DO)" . @11 statement "while (T_WHILE)" '(' @12 expr ')' ';'

    $default  reduce using rule 45 (@11)

    @11  go to state 167


state 39

   44 unticked_statement: "while (T_WHILE)" . '(' @9 expr ')' @10 while_statement

    '('  shift, and go to state 168


state 40

   51 unticked_statement: "for (T_FOR)" . '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    '('  shift, and go to state 169


state 41

   69 unticked_statement: "foreach (T_FOREACH)" . '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
   72                   | "foreach (T_FOREACH)" . '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

    '('  shift, and go to state 170


state 42

   74 unticked_statement: "declare (T_DECLARE)" . @21 '(' declare_list ')' declare_statement

    $default  reduce using rule 73 (@21)

    @21  go to state 171


state 43

   53 unticked_statement: "switch (T_SWITCH)" . '(' expr ')' @16 switch_case_list

    '('  shift, and go to state 172


state 44

   54 unticked_statement: "break (T_BREAK)" . ';'
   55                   | "break (T_BREAK)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 173
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 174
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 45

   56 unticked_statement: "continue (T_CONTINUE)" . ';'
   57                   | "continue (T_CONTINUE)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 175
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 176
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 46

   83 unticked_statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 177


state 47

  321 function: "function (T_FUNCTION)" .

    $default  reduce using rule 321 (function)


state 48

   25 constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 178


state 49

   58 unticked_statement: "return (T_RETURN)" . ';'
   59                   | "return (T_RETURN)" . expr_without_variable ';'
   60                   | "return (T_RETURN)" . variable ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 179
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 180
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 182
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 50

   81 unticked_statement: "try (T_TRY)" . @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 76 (@22)

    @22  go to state 183


state 51

   82 unticked_statement: "throw (T_THROW)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 184
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 52

   16 top_statement: "use (T_USE)" . use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 185

    namespace_name    go to state 186
    use_declarations  go to state 187
    use_declaration   go to state 188


state 53

   61 unticked_statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 189
    '$'                      shift, and go to state 190

    global_var_list  go to state 191
    global_var       go to state 192


state 54

  107 class_entry_type: "final (T_FINAL)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 193


state 55

  105 class_entry_type: "abstract (T_ABSTRACT)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 194


state 56

   62 unticked_statement: "static (T_STATIC)" . static_var_list ';'
  320 expr_without_variable: "static (T_STATIC)" . function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'
  344 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 195
    "function (T_FUNCTION)"  shift, and go to state 47

    $default  reduce using rule 344 (class_name)

    static_var_list  go to state 196
    function         go to state 197


state 57

   66 unticked_statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 198


state 58

  488 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 199


state 59

  489 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' variable ')'

    '('  shift, and go to state 200


state 60

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 201


state 61

  104 class_entry_type: "class (T_CLASS)" .

    $default  reduce using rule 104 (class_entry_type)


state 62

  106 class_entry_type: "trait (T_TRAIT)" .

    $default  reduce using rule 106 (class_entry_type)


state 63

  110 interface_entry: "interface (T_INTERFACE)" .

    $default  reduce using rule 110 (interface_entry)


state 64

  239 expr_without_variable: "list (T_LIST)" . '(' @39 assignment_list ')' '=' expr

    '('  shift, and go to state 202


state 65

  313 expr_without_variable: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 203


state 66

  374 common_scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 374 (common_scalar)


state 67

  375 common_scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 375 (common_scalar)


state 68

  376 common_scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 376 (common_scalar)


state 69

  377 common_scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 377 (common_scalar)


state 70

  371 common_scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 371 (common_scalar)


state 71

  372 common_scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 372 (common_scalar)


state 72

  379 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  380              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  398 scalar: "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 205
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 206
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 209
    encaps_var   go to state 210


state 73

   11 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   13              | "namespace (T_NAMESPACE)" . namespace_name '{' @2 top_statement_list '}'
   15              | "namespace (T_NAMESPACE)" . '{' @3 top_statement_list '}'
  331 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'
  346 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  394 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 211
    '{'                      shift, and go to state 212

    namespace_name  go to state 213


state 74

  378 common_scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 378 (common_scalar)


state 75

  373 common_scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 373 (common_scalar)


state 76

  333 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' @54 function_call_parameter_list ')'
  347 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  395 scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 214


state 77

  295 expr_without_variable: '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 215
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 78

   75 unticked_statement: ';' .

    $default  reduce using rule 75 (unticked_statement)


state 79

   35 unticked_statement: '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 216


state 80

  445 compound_variable: '$' . '{' expr '}'
  456 simple_indirect_reference: '$' .

    '{'  shift, and go to state 217

    $default  reduce using rule 456 (simple_indirect_reference)


state 81

  315 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 218
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 363 (backticks_expr)

    backticks_expr  go to state 219
    encaps_list     go to state 220
    encaps_var      go to state 210


state 82

  397 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 221
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 222
    encaps_var   go to state 210


state 83

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  329 function_call: namespace_name . '(' @52 function_call_parameter_list ')'
  345 class_name: namespace_name .
  393 scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 224

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 345 (class_name)
    $default                       reduce using rule 393 (scalar)


state 84

    3 top_statement_list: top_statement_list @1 top_statement .

    $default  reduce using rule 3 (top_statement_list)


state 85

   17 top_statement: constant_declaration . ';'
   24 constant_declaration: constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 225
    ';'  shift, and go to state 226


state 86

    7 top_statement: statement .

    $default  reduce using rule 7 (top_statement)


state 87

   33 statement: unticked_statement .

    $default  reduce using rule 33 (statement)


state 88

    8 top_statement: function_declaration_statement .

    $default  reduce using rule 8 (top_statement)


state 89

    9 top_statement: class_declaration_statement .

    $default  reduce using rule 9 (top_statement)


state 90

   94 function_declaration_statement: unticked_function_declaration_statement .

    $default  reduce using rule 94 (function_declaration_statement)


state 91

   95 class_declaration_statement: unticked_class_declaration_statement .

    $default  reduce using rule 95 (class_declaration_statement)


state 92

  101 unticked_class_declaration_statement: class_entry_type . "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 227


state 93

  103 unticked_class_declaration_statement: interface_entry . "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 228


state 94

  408 expr: expr_without_variable .

    $default  reduce using rule 408 (expr)


state 95

   99 unticked_function_declaration_statement: function . is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'
  318 expr_without_variable: function . is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 230


state 96

  434 array_function_dereference: function_call . @66 '[' dim_offset ']'
  437 base_variable_with_function_calls: function_call .

    '['       reduce using rule 433 (@66)
    $default  reduce using rule 437 (base_variable_with_function_calls)

    @66  go to state 231


state 97

  335 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')'
  337              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')'
  429 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  498 class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 232


state 98

  396 scalar: common_scalar .

    $default  reduce using rule 396 (scalar)


state 99

  312 expr_without_variable: scalar .

    $default  reduce using rule 312 (expr_without_variable)


state 100

   65 unticked_statement: expr . ';'
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 259


state 101

  407 expr: r_variable .

    $default  reduce using rule 407 (expr)


state 102

  258 expr_without_variable: rw_variable . "++ (T_INC)"
  260                      | rw_variable . "-- (T_DEC)"

    "-- (T_DEC)"  shift, and go to state 260
    "++ (T_INC)"  shift, and go to state 261


state 103

  240 expr_without_variable: variable . '=' expr
  241                      | variable . '=' '&' variable
  243                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  247                      | variable . "+= (T_PLUS_EQUAL)" expr
  248                      | variable . "-= (T_MINUS_EQUAL)" expr
  249                      | variable . "*= (T_MUL_EQUAL)" expr
  250                      | variable . "/= (T_DIV_EQUAL)" expr
  251                      | variable . ".= (T_CONCAT_EQUAL)" expr
  252                      | variable . "%= (T_MOD_EQUAL)" expr
  253                      | variable . "&= (T_AND_EQUAL)" expr
  254                      | variable . "|= (T_OR_EQUAL)" expr
  255                      | variable . "^= (T_XOR_EQUAL)" expr
  256                      | variable . "<<= (T_SL_EQUAL)" expr
  257                      | variable . ">>= (T_SR_EQUAL)" expr
  409 r_variable: variable .
  411 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273

    "-- (T_DEC)"  reduce using rule 411 (rw_variable)
    "++ (T_INC)"  reduce using rule 411 (rw_variable)
    $default      reduce using rule 409 (r_variable)


state 104

  343 function_call: variable_without_objects . '(' @59 function_call_parameter_list ')'

    '('  shift, and go to state 274


state 105

  440 base_variable: static_member .

    $default  reduce using rule 440 (base_variable)


state 106

  339 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')'
  341              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')'
  430 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  499 class_constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 275


state 107

  432 array_function_dereference: array_function_dereference . '[' dim_offset ']'
  436 base_variable_with_function_calls: array_function_dereference .

    '['  shift, and go to state 276

    $default  reduce using rule 436 (base_variable_with_function_calls)


state 108

  414 variable: base_variable_with_function_calls . "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not variable_properties
  415         | base_variable_with_function_calls .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 277

    $default  reduce using rule 415 (variable)


state 109

  435 base_variable_with_function_calls: base_variable .

    $default  reduce using rule 435 (base_variable_with_function_calls)


state 110

  427 variable_without_objects: reference_variable .
  431 variable_class_name: reference_variable .
  438 base_variable: reference_variable .
  441 reference_variable: reference_variable . '[' dim_offset ']'
  442                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 431 (variable_class_name)
    '('                            reduce using rule 427 (variable_without_objects)
    $default                       reduce using rule 438 (base_variable)


state 111

  443 reference_variable: compound_variable .

    $default  reduce using rule 443 (reference_variable)


state 112

  428 variable_without_objects: simple_indirect_reference . reference_variable
  439 base_variable: simple_indirect_reference . reference_variable
  457 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 280

    reference_variable  go to state 281
    compound_variable   go to state 111


state 113

  301 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 301 (expr_without_variable)


state 114

  392 scalar: class_constant .

    $default  reduce using rule 392 (scalar)


state 115

    5 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 5 (namespace_name)


state 116

  320 expr_without_variable: "static (T_STATIC)" . function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'
  344 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 47

    $default  reduce using rule 344 (class_name)

    function  go to state 197


state 117

  331 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'
  346 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  394 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 211


state 118

  318 expr_without_variable: function . is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 282


state 119

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  494 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 494 (internal_functions_in_yacc)


state 120

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  493 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 493 (internal_functions_in_yacc)


state 121

  492 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 283
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 122

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  491 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 491 (internal_functions_in_yacc)


state 123

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  490 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 490 (internal_functions_in_yacc)


state 124

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  316                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 316 (expr_without_variable)


state 125

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  282                      | '+' expr .
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    $default  reduce using rule 282 (expr_without_variable)


state 126

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  283                      | '-' expr .
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    $default  reduce using rule 283 (expr_without_variable)


state 127

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  284                      | '!' expr .
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 284 (expr_without_variable)


state 128

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  285                      | '~' expr .
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    $default  reduce using rule 285 (expr_without_variable)


state 129

  311 expr_without_variable: '@' @49 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 284
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 130

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  308                      | "(unset) (T_UNSET_CAST)" expr .

    $default  reduce using rule 308 (expr_without_variable)


state 131

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  307                      | "(bool) (T_BOOL_CAST)" expr .

    $default  reduce using rule 307 (expr_without_variable)


state 132

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  306                      | "(object) (T_OBJECT_CAST)" expr .

    $default  reduce using rule 306 (expr_without_variable)


state 133

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  305                      | "(array) (T_ARRAY_CAST)" expr .

    $default  reduce using rule 305 (expr_without_variable)


state 134

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  304                      | "(string) (T_STRING_CAST)" expr .

    $default  reduce using rule 304 (expr_without_variable)


state 135

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  303                      | "(double) (T_DOUBLE_CAST)" expr .

    $default  reduce using rule 303 (expr_without_variable)


state 136

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  302                      | "(int) (T_INT_CAST)" expr .

    $default  reduce using rule 302 (expr_without_variable)


state 137

  344 class_name: "static (T_STATIC)" .

    $default  reduce using rule 344 (class_name)


state 138

  331 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'
  346 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 285


state 139

  333 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' @54 function_call_parameter_list ')'
  347 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 286


state 140

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  329 function_call: namespace_name . '(' @52 function_call_parameter_list ')'
  345 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 224

    $default  reduce using rule 345 (class_name)


state 141

  335 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')'
  337              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')'
  429 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 287


state 142

  261 expr_without_variable: "-- (T_DEC)" rw_variable .

    $default  reduce using rule 261 (expr_without_variable)


state 143

  411 rw_variable: variable .

    $default  reduce using rule 411 (rw_variable)


state 144

  339 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')'
  341              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')'
  430 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 288


state 145

  259 expr_without_variable: "++ (T_INC)" rw_variable .

    $default  reduce using rule 259 (expr_without_variable)


state 146

  473 non_empty_array_pair_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 289
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 147

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  468 non_empty_array_pair_list: expr . "=> (T_DOUBLE_ARROW)" expr
  469                          | expr .
  472                          | expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 291

    $default  reduce using rule 469 (non_empty_array_pair_list)


state 148

  314 expr_without_variable: '[' array_pair_list . ']'

    ']'  shift, and go to state 292


state 149

  465 array_pair_list: non_empty_array_pair_list . possible_comma
  466 non_empty_array_pair_list: non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" expr
  467                          | non_empty_array_pair_list . ',' expr
  470                          | non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  471                          | non_empty_array_pair_list . ',' '&' w_variable

    ','  shift, and go to state 293

    $default  reduce using rule 401 (possible_comma)

    possible_comma  go to state 294


state 150

  246 expr_without_variable: "clone (T_CLONE)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    $default  reduce using rule 246 (expr_without_variable)


state 151

  346 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 295


state 152

  347 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 296


state 153

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  345 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 345 (class_name)


state 154

  351 class_name_reference: class_name .
  429 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 297

    $default  reduce using rule 351 (class_name_reference)


state 155

  245 expr_without_variable: "new (T_NEW)" class_name_reference . @41 ctor_arguments

    $default  reduce using rule 244 (@41)

    @41  go to state 298


state 156

  352 class_name_reference: dynamic_class_name_reference .

    $default  reduce using rule 352 (class_name_reference)


state 157

  430 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 299


state 158

  355 dynamic_class_name_reference: base_variable . "-> (T_OBJECT_OPERATOR)" @60 object_property @61 dynamic_class_name_variable_properties
  356                             | base_variable .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 300

    $default  reduce using rule 356 (dynamic_class_name_reference)


state 159

  431 variable_class_name: reference_variable .
  438 base_variable: reference_variable .
  441 reference_variable: reference_variable . '[' dim_offset ']'
  442                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 431 (variable_class_name)
    $default                       reduce using rule 438 (base_variable)


state 160

  439 base_variable: simple_indirect_reference . reference_variable
  457 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 280

    reference_variable  go to state 301
    compound_variable   go to state 111


state 161

  361 exit_expr: '(' . ')'
  362          | '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ')'                                           shift, and go to state 302
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 303
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 162

  309 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 309 (expr_without_variable)


state 163

   38 unticked_statement: "if (T_IF)" '(' . expr ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' . expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 304
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 164

   34 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 34 (statement)


state 165

   63 unticked_statement: "echo (T_ECHO)" echo_expr_list . ';'
  231 echo_expr_list: echo_expr_list . ',' expr

    ','  shift, and go to state 305
    ';'  shift, and go to state 306


state 166

  232 echo_expr_list: expr .
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 232 (echo_expr_list)


state 167

   47 unticked_statement: "do (T_DO)" @11 . statement "while (T_WHILE)" '(' @12 expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 307
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 168

   44 unticked_statement: "while (T_WHILE)" '(' . @9 expr ')' @10 while_statement

    $default  reduce using rule 42 (@9)

    @9  go to state 308


state 169

   51 unticked_statement: "for (T_FOR)" '(' . for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 233 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 309
    non_empty_for_expr                 go to state 310
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 311
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 170

   69 unticked_statement: "foreach (T_FOREACH)" '(' . variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
   72                   | "foreach (T_FOREACH)" '(' . expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 312
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 313
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 171

   74 unticked_statement: "declare (T_DECLARE)" @21 . '(' declare_list ')' declare_statement

    '('  shift, and go to state 314


state 172

   53 unticked_statement: "switch (T_SWITCH)" '(' . expr ')' @16 switch_case_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 315
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 173

   54 unticked_statement: "break (T_BREAK)" ';' .

    $default  reduce using rule 54 (unticked_statement)


state 174

   55 unticked_statement: "break (T_BREAK)" expr . ';'
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 316


state 175

   56 unticked_statement: "continue (T_CONTINUE)" ';' .

    $default  reduce using rule 56 (unticked_statement)


state 176

   57 unticked_statement: "continue (T_CONTINUE)" expr . ';'
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 317


state 177

   83 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 318


state 178

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 319


state 179

   58 unticked_statement: "return (T_RETURN)" ';' .

    $default  reduce using rule 58 (unticked_statement)


state 180

   59 unticked_statement: "return (T_RETURN)" expr_without_variable . ';'
  408 expr: expr_without_variable .

    ';'  shift, and go to state 320

    $default  reduce using rule 408 (expr)


state 181

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258


state 182

   60 unticked_statement: "return (T_RETURN)" variable . ';'
  240 expr_without_variable: variable . '=' expr
  241                      | variable . '=' '&' variable
  243                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  247                      | variable . "+= (T_PLUS_EQUAL)" expr
  248                      | variable . "-= (T_MINUS_EQUAL)" expr
  249                      | variable . "*= (T_MUL_EQUAL)" expr
  250                      | variable . "/= (T_DIV_EQUAL)" expr
  251                      | variable . ".= (T_CONCAT_EQUAL)" expr
  252                      | variable . "%= (T_MOD_EQUAL)" expr
  253                      | variable . "&= (T_AND_EQUAL)" expr
  254                      | variable . "|= (T_OR_EQUAL)" expr
  255                      | variable . "^= (T_XOR_EQUAL)" expr
  256                      | variable . "<<= (T_SL_EQUAL)" expr
  257                      | variable . ">>= (T_SR_EQUAL)" expr
  409 r_variable: variable .
  411 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273
    ';'                    shift, and go to state 321

    "-- (T_DEC)"  reduce using rule 411 (rw_variable)
    "++ (T_INC)"  reduce using rule 411 (rw_variable)
    $default      reduce using rule 409 (r_variable)


state 183

   81 unticked_statement: "try (T_TRY)" @22 . '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '{'  shift, and go to state 322


state 184

   82 unticked_statement: "throw (T_THROW)" expr . ';'
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 323


state 185

   22 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   23                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 324


state 186

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   20 use_declaration: namespace_name .
   21                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 325
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 20 (use_declaration)


state 187

   16 top_statement: "use (T_USE)" use_declarations . ';'
   18 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 326
    ';'  shift, and go to state 327


state 188

   19 use_declarations: use_declaration .

    $default  reduce using rule 19 (use_declarations)


state 189

  175 global_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 175 (global_var)


state 190

  176 global_var: '$' . r_variable
  177           | '$' . '{' expr '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '{'                        shift, and go to state 328
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    r_variable                         go to state 329
    variable                           go to state 330
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 191

   61 unticked_statement: "global (T_GLOBAL)" global_var_list . ';'
  173 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 331
    ';'  shift, and go to state 332


state 192

  174 global_var_list: global_var .

    $default  reduce using rule 174 (global_var_list)


state 193

  107 class_entry_type: "final (T_FINAL)" "class (T_CLASS)" .

    $default  reduce using rule 107 (class_entry_type)


state 194

  105 class_entry_type: "abstract (T_ABSTRACT)" "class (T_CLASS)" .

    $default  reduce using rule 105 (class_entry_type)


state 195

  180 static_var_list: "variable (T_VARIABLE)" .
  181                | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 333

    $default  reduce using rule 180 (static_var_list)


state 196

   62 unticked_statement: "static (T_STATIC)" static_var_list . ';'
  178 static_var_list: static_var_list . ',' "variable (T_VARIABLE)"
  179                | static_var_list . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 334
    ';'  shift, and go to state 335


state 197

  320 expr_without_variable: "static (T_STATIC)" function . is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 336


state 198

   66 unticked_statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    unset_variables                    go to state 337
    unset_variable                     go to state 338
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 339
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 199

  488 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 340
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    isset_variables                    go to state 341


state 200

  489 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . variable ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 342
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 201

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 343


state 202

  239 expr_without_variable: "list (T_LIST)" '(' . @39 assignment_list ')' '=' expr

    $default  reduce using rule 238 (@39)

    @39  go to state 344


state 203

  313 expr_without_variable: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 146
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 464 (array_pair_list)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 147
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    array_pair_list                    go to state 345
    non_empty_array_pair_list          go to state 149
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 204

  478 encaps_var: "variable (T_VARIABLE)" .
  480           | "variable (T_VARIABLE)" . '[' @69 encaps_var_offset ']'
  481           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 346
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 347

    $default  reduce using rule 478 (encaps_var)


state 205

  379 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  477 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 348
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 349


state 206

  380 common_scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 380 (common_scalar)


state 207

  482 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  483           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 350
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 351
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 208

  484 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 352
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 209

  398 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  474 encaps_list: encaps_list . encaps_var
  475            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 353
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 354
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_var  go to state 355


state 210

  476 encaps_list: encaps_var .

    $default  reduce using rule 476 (encaps_list)


state 211

  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' @53 function_call_parameter_list ')'
  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  394 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 356


state 212

   15 top_statement: "namespace (T_NAMESPACE)" '{' . @3 top_statement_list '}'

    $default  reduce using rule 14 (@3)

    @3  go to state 357


state 213

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   11 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   13              | "namespace (T_NAMESPACE)" namespace_name . '{' @2 top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    ';'                    shift, and go to state 358
    '{'                    shift, and go to state 359


state 214

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  333 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' @54 function_call_parameter_list ')'
  347 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  395 scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 360

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 347 (class_name)
    $default                       reduce using rule 395 (scalar)


state 215

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  295                      | '(' expr . ')'
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 361


state 216

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   35 unticked_statement: '{' inner_statement_list . '}'

    '}'  shift, and go to state 362

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 217

  445 compound_variable: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 364
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 218

  364 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  477 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    $default  reduce using rule 364 (backticks_expr)

    encaps_var  go to state 349


state 219

  315 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 365


state 220

  365 backticks_expr: encaps_list .
  474 encaps_list: encaps_list . encaps_var
  475            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 353
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 365 (backticks_expr)

    encaps_var  go to state 355


state 221

  477 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 349


state 222

  397 scalar: '"' encaps_list . '"'
  474 encaps_list: encaps_list . encaps_var
  475            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 353
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208
    '"'                                                         shift, and go to state 366

    encaps_var  go to state 355


state 223

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 367


state 224

  329 function_call: namespace_name '(' . @52 function_call_parameter_list ')'

    $default  reduce using rule 328 (@52)

    @52  go to state 368


state 225

   24 constant_declaration: constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 369


state 226

   17 top_statement: constant_declaration ';' .

    $default  reduce using rule 17 (top_statement)


state 227

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" . extends_from @30 implements_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 370

    $default  reduce using rule 108 (extends_from)

    extends_from  go to state 371


state 228

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" . @31 interface_extends_list '{' class_statement_list '}'

    $default  reduce using rule 102 (@31)

    @31  go to state 372


state 229

   97 is_reference: '&' .

    $default  reduce using rule 97 (is_reference)


state 230

   99 unticked_function_declaration_statement: function is_reference . "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'
  318 expr_without_variable: function is_reference . '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 373
    '('                      shift, and go to state 374


state 231

  434 array_function_dereference: function_call @66 . '[' dim_offset ']'

    '['  shift, and go to state 375


state 232

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @55 function_call_parameter_list ')'
  337              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @56 function_call_parameter_list ')'
  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  498 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 376
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 378
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 380
    simple_indirect_reference  go to state 381


state 233

  267 expr_without_variable: expr "or (T_LOGICAL_OR)" . @44 expr

    $default  reduce using rule 266 (@44)

    @44  go to state 382


state 234

  270 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 383
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 235

  269 expr_without_variable: expr "and (T_LOGICAL_AND)" . @45 expr

    $default  reduce using rule 268 (@45)

    @45  go to state 384


state 236

  298 expr_without_variable: expr '?' . @46 expr ':' @47 expr
  300                      | expr '?' . ':' @48 expr

    ':'  shift, and go to state 385

    $default  reduce using rule 296 (@46)

    @46  go to state 386


state 237

  263 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . @42 expr

    $default  reduce using rule 262 (@42)

    @42  go to state 387


state 238

  265 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . @43 expr

    $default  reduce using rule 264 (@43)

    @43  go to state 388


state 239

  271 expr_without_variable: expr '|' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 389
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 240

  273 expr_without_variable: expr '^' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 241

  272 expr_without_variable: expr '&' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 391
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 242

  287 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 392
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 243

  286 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 393
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 244

  289 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 394
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 245

  288 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 395
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 246

  290 expr_without_variable: expr '<' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 396
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 247

  292 expr_without_variable: expr '>' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 397
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 248

  293 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 398
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 249

  291 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 399
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 250

  281 expr_without_variable: expr ">> (T_SR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 400
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 251

  280 expr_without_variable: expr "<< (T_SL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 401
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 252

  275 expr_without_variable: expr '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 402
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 253

  276 expr_without_variable: expr '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 403
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 254

  274 expr_without_variable: expr '.' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 404
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 255

  277 expr_without_variable: expr '*' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 405
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 256

  278 expr_without_variable: expr '/' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 406
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 257

  279 expr_without_variable: expr '%' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 407
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 258

  294 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 80

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 408
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 259

   65 unticked_statement: expr ';' .

    $default  reduce using rule 65 (unticked_statement)


state 260

  260 expr_without_variable: rw_variable "-- (T_DEC)" .

    $default  reduce using rule 260 (expr_without_variable)


state 261

  258 expr_without_variable: rw_variable "++ (T_INC)" .

    $default  reduce using rule 258 (expr_without_variable)


state 262

  240 expr_without_variable: variable '=' . expr
  241                      | variable '=' . '&' variable
  243                      | variable '=' . '&' "new (T_NEW)" class_name_reference @40 ctor_arguments

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 409
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 410
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 263

  257 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 411
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 264

  256 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 412
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 265

  255 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 413
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 266

  254 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 414
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 267

  253 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 415
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 268

  252 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 416
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 269

  251 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 417
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 270

  250 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 418
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 271

  249 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 419
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 272

  248 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 420
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 273

  247 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 421
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 274

  343 function_call: variable_without_objects '(' . @59 function_call_parameter_list ')'

    $default  reduce using rule 342 (@59)

    @59  go to state 422


state 275

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @57 function_call_parameter_list ')'
  341              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @58 function_call_parameter_list ')'
  430 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  499 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 423
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 424
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 425
    simple_indirect_reference  go to state 381


state 276

  432 array_function_dereference: array_function_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 446 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 427
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 277

  414 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" . @62 object_property @63 method_or_not variable_properties

    $default  reduce using rule 412 (@62)

    @62  go to state 428


state 278

  441 reference_variable: reference_variable '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 446 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 429
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 279

  442 reference_variable: reference_variable '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 430
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 280

  445 compound_variable: '$' . '{' expr '}'
  457 simple_indirect_reference: simple_indirect_reference '$' .

    '{'  shift, and go to state 217

    $default  reduce using rule 457 (simple_indirect_reference)


state 281

  428 variable_without_objects: simple_indirect_reference reference_variable .
  439 base_variable: simple_indirect_reference reference_variable .
  441 reference_variable: reference_variable . '[' dim_offset ']'
  442                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    '('       reduce using rule 428 (variable_without_objects)
    $default  reduce using rule 439 (base_variable)


state 282

  318 expr_without_variable: function is_reference . '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 374


state 283

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  492 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 431


state 284

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  311                      | '@' @49 expr .

    $default  reduce using rule 311 (expr_without_variable)


state 285

  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' @53 function_call_parameter_list ')'
  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 432


state 286

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  333 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' @54 function_call_parameter_list ')'
  347 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 360

    $default  reduce using rule 347 (class_name)


state 287

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @55 function_call_parameter_list ')'
  337              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @56 function_call_parameter_list ')'
  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 378
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 380
    simple_indirect_reference  go to state 381


state 288

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @57 function_call_parameter_list ')'
  341              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @58 function_call_parameter_list ')'
  430 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 424
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 425
    simple_indirect_reference  go to state 381


state 289

  473 non_empty_array_pair_list: '&' w_variable .

    $default  reduce using rule 473 (non_empty_array_pair_list)


state 290

  410 w_variable: variable .

    $default  reduce using rule 410 (w_variable)


state 291

  468 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" . expr
  472                          | expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 434
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 435
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 292

  314 expr_without_variable: '[' array_pair_list ']' .

    $default  reduce using rule 314 (expr_without_variable)


state 293

  402 possible_comma: ',' .
  466 non_empty_array_pair_list: non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" expr
  467                          | non_empty_array_pair_list ',' . expr
  470                          | non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  471                          | non_empty_array_pair_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 436
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 402 (possible_comma)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 437
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 294

  465 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 465 (array_pair_list)


state 295

  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 438


state 296

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  347 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 347 (class_name)


state 297

  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 439
    reference_variable         go to state 379
    compound_variable          go to state 111
    simple_indirect_reference  go to state 381


state 298

  245 expr_without_variable: "new (T_NEW)" class_name_reference @41 . ctor_arguments

    '('  shift, and go to state 440

    $default  reduce using rule 366 (ctor_arguments)

    ctor_arguments  go to state 441


state 299

  430 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 442
    reference_variable         go to state 379
    compound_variable          go to state 111
    simple_indirect_reference  go to state 381


state 300

  355 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" . @60 object_property @61 dynamic_class_name_variable_properties

    $default  reduce using rule 353 (@60)

    @60  go to state 443


state 301

  439 base_variable: simple_indirect_reference reference_variable .
  441 reference_variable: reference_variable . '[' dim_offset ']'
  442                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    $default  reduce using rule 439 (base_variable)


state 302

  361 exit_expr: '(' ')' .

    $default  reduce using rule 361 (exit_expr)


state 303

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  362 exit_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 444


state 304

   38 unticked_statement: "if (T_IF)" '(' expr . ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' expr . ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 445


state 305

  231 echo_expr_list: echo_expr_list ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 446
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 306

   63 unticked_statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 63 (unticked_statement)


state 307

   47 unticked_statement: "do (T_DO)" @11 statement . "while (T_WHILE)" '(' @12 expr ')' ';'

    "while (T_WHILE)"  shift, and go to state 447


state 308

   44 unticked_statement: "while (T_WHILE)" '(' @9 . expr ')' @10 while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 448
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 309

   51 unticked_statement: "for (T_FOR)" '(' for_expr . ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    ';'  shift, and go to state 449


state 310

  234 for_expr: non_empty_for_expr .
  236 non_empty_for_expr: non_empty_for_expr . ',' @38 expr

    ','  shift, and go to state 450

    $default  reduce using rule 234 (for_expr)


state 311

  237 non_empty_for_expr: expr .
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 237 (non_empty_for_expr)


state 312

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable . "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement
  408 expr: expr_without_variable .

    "as (T_AS)"  shift, and go to state 451

    $default  reduce using rule 408 (expr)


state 313

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable . "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
  240 expr_without_variable: variable . '=' expr
  241                      | variable . '=' '&' variable
  243                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  247                      | variable . "+= (T_PLUS_EQUAL)" expr
  248                      | variable . "-= (T_MINUS_EQUAL)" expr
  249                      | variable . "*= (T_MUL_EQUAL)" expr
  250                      | variable . "/= (T_DIV_EQUAL)" expr
  251                      | variable . ".= (T_CONCAT_EQUAL)" expr
  252                      | variable . "%= (T_MOD_EQUAL)" expr
  253                      | variable . "&= (T_AND_EQUAL)" expr
  254                      | variable . "|= (T_OR_EQUAL)" expr
  255                      | variable . "^= (T_XOR_EQUAL)" expr
  256                      | variable . "<<= (T_SL_EQUAL)" expr
  257                      | variable . ">>= (T_SR_EQUAL)" expr
  409 r_variable: variable .
  411 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273
    "as (T_AS)"            shift, and go to state 452

    "-- (T_DEC)"  reduce using rule 411 (rw_variable)
    "++ (T_INC)"  reduce using rule 411 (rw_variable)
    $default      reduce using rule 409 (r_variable)


state 314

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' . declare_list ')' declare_statement

    "identifier (T_STRING)"  shift, and go to state 453

    declare_list  go to state 454


state 315

   53 unticked_statement: "switch (T_SWITCH)" '(' expr . ')' @16 switch_case_list
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 455


state 316

   55 unticked_statement: "break (T_BREAK)" expr ';' .

    $default  reduce using rule 55 (unticked_statement)


state 317

   57 unticked_statement: "continue (T_CONTINUE)" expr ';' .

    $default  reduce using rule 57 (unticked_statement)


state 318

   83 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 83 (unticked_statement)


state 319

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 466
    static_class_constant  go to state 467


state 320

   59 unticked_statement: "return (T_RETURN)" expr_without_variable ';' .

    $default  reduce using rule 59 (unticked_statement)


state 321

   60 unticked_statement: "return (T_RETURN)" variable ';' .

    $default  reduce using rule 60 (unticked_statement)


state 322

   81 unticked_statement: "try (T_TRY)" @22 '{' . inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 468


state 323

   82 unticked_statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 82 (unticked_statement)


state 324

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   22 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   23                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 469
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 22 (use_declaration)


state 325

   21 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 470


state 326

   18 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 185

    namespace_name   go to state 186
    use_declaration  go to state 471


state 327

   16 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 16 (top_statement)


state 328

  177 global_var: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 472
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 329

  176 global_var: '$' r_variable .

    $default  reduce using rule 176 (global_var)


state 330

  409 r_variable: variable .

    $default  reduce using rule 409 (r_variable)


state 331

  173 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 189
    '$'                      shift, and go to state 190

    global_var  go to state 473


state 332

   61 unticked_statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 61 (unticked_statement)


state 333

  181 static_var_list: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 474
    static_class_constant  go to state 467


state 334

  178 static_var_list: static_var_list ',' . "variable (T_VARIABLE)"
  179                | static_var_list ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 475


state 335

   62 unticked_statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 62 (unticked_statement)


state 336

  320 expr_without_variable: "static (T_STATIC)" function is_reference . '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 476


state 337

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
   92 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 477
    ')'  shift, and go to state 478


state 338

   91 unset_variables: unset_variable .

    $default  reduce using rule 91 (unset_variables)


state 339

   93 unset_variable: variable .

    $default  reduce using rule 93 (unset_variable)


state 340

  495 isset_variables: variable .

    $default  reduce using rule 495 (isset_variables)


state 341

  488 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  497 isset_variables: isset_variables . ',' @70 variable

    ','  shift, and go to state 479
    ')'  shift, and go to state 480


state 342

  489 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable . ')'

    ')'  shift, and go to state 481


state 343

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 482


state 344

  239 expr_without_variable: "list (T_LIST)" '(' @39 . assignment_list ')' '=' expr

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 483
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    $default  reduce using rule 463 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 484
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list                    go to state 485
    assignment_list_element            go to state 486


state 345

  313 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 487


state 346

  480 encaps_var: "variable (T_VARIABLE)" '[' . @69 encaps_var_offset ']'

    $default  reduce using rule 479 (@69)

    @69  go to state 488


state 347

  481 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 489


state 348

  379 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 379 (common_scalar)


state 349

  477 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 477 (encaps_list)


state 350

  391 scalar: "variable name (T_STRING_VARNAME)" .
  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 490

    $default  reduce using rule 391 (scalar)


state 351

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  482 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 491


state 352

  484 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 492


state 353

  475 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 475 (encaps_list)


state 354

  398 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 398 (scalar)


state 355

  474 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 474 (encaps_list)


state 356

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' @53 function_call_parameter_list ')'
  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  394 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 493

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 346 (class_name)
    $default                       reduce using rule 394 (scalar)


state 357

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 494


state 358

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 11 (top_statement)


state 359

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' . @2 top_statement_list '}'

    $default  reduce using rule 12 (@2)

    @2  go to state 495


state 360

  333 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' . @54 function_call_parameter_list ')'

    $default  reduce using rule 332 (@54)

    @54  go to state 496


state 361

  295 expr_without_variable: '(' expr ')' .

    $default  reduce using rule 295 (expr_without_variable)


state 362

   35 unticked_statement: '{' inner_statement_list '}' .

    $default  reduce using rule 35 (unticked_statement)


state 363

   27 inner_statement_list: inner_statement_list @4 . inner_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "final (T_FINAL)"                             shift, and go to state 54
    "abstract (T_ABSTRACT)"                       shift, and go to state 55
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 497
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                           go to state 83
    inner_statement                          go to state 498
    statement                                go to state 499
    unticked_statement                       go to state 87
    function_declaration_statement           go to state 500
    class_declaration_statement              go to state 501
    unticked_function_declaration_statement  go to state 90
    unticked_class_declaration_statement     go to state 91
    class_entry_type                         go to state 92
    interface_entry                          go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 364

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  445 compound_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 502


state 365

  315 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 315 (expr_without_variable)


state 366

  397 scalar: '"' encaps_list '"' .

    $default  reduce using rule 397 (scalar)


state 367

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 6 (namespace_name)


state 368

  329 function_call: namespace_name '(' @52 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 504
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 369

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 508


state 370

  109 extends_from: "extends (T_EXTENDS)" . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 512


state 371

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from . @30 implements_list '{' class_statement_list '}'

    $default  reduce using rule 100 (@30)

    @30  go to state 513


state 372

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 . interface_extends_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 514

    $default  reduce using rule 111 (interface_extends_list)

    interface_extends_list  go to state 515


state 373

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" . @29 '(' parameter_list ')' '{' inner_statement_list '}'

    $default  reduce using rule 98 (@29)

    @29  go to state 516


state 374

  318 expr_without_variable: function is_reference '(' . @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 317 (@50)

    @50  go to state 517


state 375

  434 array_function_dereference: function_call @66 '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 446 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 518
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 376

  454 variable_name: "identifier (T_STRING)" .
  498 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 454 (variable_name)
    $default  reduce using rule 498 (class_constant)


state 377

  455 variable_name: '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 519
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 378

  337 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' @56 function_call_parameter_list ')'
  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 520

    $default  reduce using rule 429 (static_member)


state 379

  427 variable_without_objects: reference_variable .
  441 reference_variable: reference_variable . '[' dim_offset ']'
  442                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    $default  reduce using rule 427 (variable_without_objects)


state 380

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' @55 function_call_parameter_list ')'

    '('  shift, and go to state 521


state 381

  428 variable_without_objects: simple_indirect_reference . reference_variable
  457 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 280

    reference_variable  go to state 522
    compound_variable   go to state 111


state 382

  267 expr_without_variable: expr "or (T_LOGICAL_OR)" @44 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 523
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 383

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  270                      | expr "xor (T_LOGICAL_XOR)" expr .
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 270 (expr_without_variable)


state 384

  269 expr_without_variable: expr "and (T_LOGICAL_AND)" @45 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 524
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 385

  300 expr_without_variable: expr '?' ':' . @48 expr

    $default  reduce using rule 299 (@48)

    @48  go to state 525


state 386

  298 expr_without_variable: expr '?' @46 . expr ':' @47 expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 526
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 387

  263 expr_without_variable: expr "|| (T_BOOLEAN_OR)" @42 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 527
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 388

  265 expr_without_variable: expr "&& (T_BOOLEAN_AND)" @43 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 528
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 389

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  271                      | expr '|' expr .
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 271 (expr_without_variable)


state 390

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  273                      | expr '^' expr .
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 273 (expr_without_variable)


state 391

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  272                      | expr '&' expr .
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 272 (expr_without_variable)


state 392

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  287                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 287 (expr_without_variable)


state 393

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  286                      | expr "=== (T_IS_IDENTICAL)" expr .
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 286 (expr_without_variable)


state 394

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  289                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 289 (expr_without_variable)


state 395

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  288                      | expr "== (T_IS_EQUAL)" expr .
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 288 (expr_without_variable)


state 396

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  290                      | expr '<' expr .
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 290 (expr_without_variable)


state 397

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  292                      | expr '>' expr .
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 292 (expr_without_variable)


state 398

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  293                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 293 (expr_without_variable)


state 399

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  291                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 291 (expr_without_variable)


state 400

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  281                      | expr ">> (T_SR)" expr .
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 281 (expr_without_variable)


state 401

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  280                      | expr "<< (T_SL)" expr .
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 280 (expr_without_variable)


state 402

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  275                      | expr '+' expr .
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 275 (expr_without_variable)


state 403

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  276                      | expr '-' expr .
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 276 (expr_without_variable)


state 404

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  274                      | expr '.' expr .
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 274 (expr_without_variable)


state 405

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  277                      | expr '*' expr .
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 277 (expr_without_variable)


state 406

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  278                      | expr '/' expr .
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 278 (expr_without_variable)


state 407

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  279                      | expr '%' expr .
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 279 (expr_without_variable)


state 408

  294 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 294 (expr_without_variable)


state 409

  241 expr_without_variable: variable '=' '&' . variable
  243                      | variable '=' '&' . "new (T_NEW)" class_name_reference @40 ctor_arguments

    "new (T_NEW)"              shift, and go to state 529
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 530
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 410

  240 expr_without_variable: variable '=' expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 240 (expr_without_variable)


state 411

  257 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 257 (expr_without_variable)


state 412

  256 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 256 (expr_without_variable)


state 413

  255 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 255 (expr_without_variable)


state 414

  254 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 254 (expr_without_variable)


state 415

  253 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 253 (expr_without_variable)


state 416

  252 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 252 (expr_without_variable)


state 417

  251 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 251 (expr_without_variable)


state 418

  250 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 250 (expr_without_variable)


state 419

  249 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 249 (expr_without_variable)


state 420

  248 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 248 (expr_without_variable)


state 421

  247 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 247 (expr_without_variable)


state 422

  343 function_call: variable_without_objects '(' @59 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 531
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 423

  454 variable_name: "identifier (T_STRING)" .
  499 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 454 (variable_name)
    $default  reduce using rule 499 (class_constant)


state 424

  341 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' @58 function_call_parameter_list ')'
  430 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 532

    $default  reduce using rule 430 (static_member)


state 425

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' @57 function_call_parameter_list ')'

    '('  shift, and go to state 533


state 426

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  447 dim_offset: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 447 (dim_offset)


state 427

  432 array_function_dereference: array_function_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 534


state 428

  414 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 . object_property @63 method_or_not variable_properties

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 536
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 429

  441 reference_variable: reference_variable '[' dim_offset . ']'

    ']'  shift, and go to state 539


state 430

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  442 reference_variable: reference_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 540


state 431

  492 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 492 (internal_functions_in_yacc)


state 432

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' @53 function_call_parameter_list ')'
  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 493

    $default  reduce using rule 346 (class_name)


state 433

  454 variable_name: "identifier (T_STRING)" .

    $default  reduce using rule 454 (variable_name)


state 434

  472 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 541
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 435

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  468 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 468 (non_empty_array_pair_list)


state 436

  471 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 542
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 437

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  466 non_empty_array_pair_list: non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" expr
  467                          | non_empty_array_pair_list ',' expr .
  470                          | non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 543

    $default  reduce using rule 467 (non_empty_array_pair_list)


state 438

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 346 (class_name)


state 439

  429 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 429 (static_member)


state 440

  367 ctor_arguments: '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 544
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 441

  245 expr_without_variable: "new (T_NEW)" class_name_reference @41 ctor_arguments .

    $default  reduce using rule 245 (expr_without_variable)


state 442

  430 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 430 (static_member)


state 443

  355 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 . object_property @61 dynamic_class_name_variable_properties

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 545
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 444

  362 exit_expr: '(' expr ')' .

    $default  reduce using rule 362 (exit_expr)


state 445

   38 unticked_statement: "if (T_IF)" '(' expr ')' . @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' expr ')' . ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 546

    $default  reduce using rule 36 (@5)

    @5  go to state 547


state 446

  231 echo_expr_list: echo_expr_list ',' expr .
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 231 (echo_expr_list)


state 447

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" . '(' @12 expr ')' ';'

    '('  shift, and go to state 548


state 448

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr . ')' @10 while_statement
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 549


state 449

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' . @13 for_expr ';' @14 for_expr ')' @15 for_statement

    $default  reduce using rule 48 (@13)

    @13  go to state 550


state 450

  236 non_empty_for_expr: non_empty_for_expr ',' . @38 expr

    $default  reduce using rule 235 (@38)

    @38  go to state 551


state 451

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" . @19 variable foreach_optional_arg ')' @20 foreach_statement

    $default  reduce using rule 70 (@19)

    @19  go to state 552


state 452

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" . @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement

    $default  reduce using rule 67 (@17)

    @17  go to state 553


state 453

  127 declare_list: "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 554


state 454

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list . ')' declare_statement
  128 declare_list: declare_list . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 555
    ')'  shift, and go to state 556


state 455

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' . @16 switch_case_list

    $default  reduce using rule 52 (@16)

    @16  go to state 557


state 456

  385 static_scalar: '+' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 558
    static_class_constant  go to state 467


state 457

  386 static_scalar: '-' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 559
    static_class_constant  go to state 467


state 458

  388 static_scalar: '[' . static_array_pair_list ']'

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    $default  reduce using rule 399 (static_array_pair_list)

    namespace_name                    go to state 463
    class_name                        go to state 464
    common_scalar                     go to state 465
    static_scalar                     go to state 560
    static_class_constant             go to state 467
    static_array_pair_list            go to state 561
    non_empty_static_array_pair_list  go to state 562


state 459

  387 static_scalar: "array (T_ARRAY)" . '(' static_array_pair_list ')'

    '('  shift, and go to state 563


state 460

  379 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  380              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"

    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 564
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 206


state 461

  346 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  383 static_scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 565


state 462

  347 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  384 static_scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 566


state 463

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  345 class_name: namespace_name .
  382 static_scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 345 (class_name)
    $default                       reduce using rule 382 (static_scalar)


state 464

  390 static_class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 567


state 465

  381 static_scalar: common_scalar .

    $default  reduce using rule 381 (static_scalar)


state 466

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 25 (constant_declaration)


state 467

  389 static_scalar: static_class_constant .

    $default  reduce using rule 389 (static_scalar)


state 468

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list . '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '}'  shift, and go to state 568

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 469

   23 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 569


state 470

   21 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 21 (use_declaration)


state 471

   18 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 18 (use_declarations)


state 472

  177 global_var: '$' '{' expr . '}'
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 570


state 473

  173 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 173 (global_var_list)


state 474

  181 static_var_list: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 181 (static_var_list)


state 475

  178 static_var_list: static_var_list ',' "variable (T_VARIABLE)" .
  179                | static_var_list ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 571

    $default  reduce using rule 178 (static_var_list)


state 476

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' . @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 319 (@51)

    @51  go to state 572


state 477

   92 unset_variables: unset_variables ',' . unset_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    unset_variable                     go to state 573
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 339
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 478

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 574


state 479

  497 isset_variables: isset_variables ',' . @70 variable

    $default  reduce using rule 496 (@70)

    @70  go to state 575


state 480

  488 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 488 (internal_functions_in_yacc)


state 481

  489 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable ')' .

    $default  reduce using rule 489 (internal_functions_in_yacc)


state 482

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 10 (top_statement)


state 483

  462 assignment_list_element: "list (T_LIST)" . '(' @68 assignment_list ')'

    '('  shift, and go to state 576


state 484

  460 assignment_list_element: variable .

    $default  reduce using rule 460 (assignment_list_element)


state 485

  239 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list . ')' '=' expr
  458 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 577
    ')'  shift, and go to state 578


state 486

  459 assignment_list: assignment_list_element .

    $default  reduce using rule 459 (assignment_list)


state 487

  313 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 313 (expr_without_variable)


state 488

  480 encaps_var: "variable (T_VARIABLE)" '[' @69 . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 579
    "variable (T_VARIABLE)"  shift, and go to state 580
    "number (T_NUM_STRING)"  shift, and go to state 581

    encaps_var_offset  go to state 582


state 489

  481 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 481 (encaps_var)


state 490

  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 583
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 491

  482 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 482 (encaps_var)


state 492

  484 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 484 (encaps_var)


state 493

  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' . @53 function_call_parameter_list ')'

    $default  reduce using rule 330 (@53)

    @53  go to state 584


state 494

    3 top_statement_list: top_statement_list . @1 top_statement
   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list . '}'

    '}'  shift, and go to state 585

    $default  reduce using rule 2 (@1)

    @1  go to state 4


state 495

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 586


state 496

  333 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 587
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 497

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 588


state 498

   27 inner_statement_list: inner_statement_list @4 inner_statement .

    $default  reduce using rule 27 (inner_statement_list)


state 499

   29 inner_statement: statement .

    $default  reduce using rule 29 (inner_statement)


state 500

   30 inner_statement: function_declaration_statement .

    $default  reduce using rule 30 (inner_statement)


state 501

   31 inner_statement: class_declaration_statement .

    $default  reduce using rule 31 (inner_statement)


state 502

  445 compound_variable: '$' '{' expr '}' .

    $default  reduce using rule 445 (compound_variable)


state 503

  169 non_empty_function_call_parameter_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 589
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 504

  329 function_call: namespace_name '(' @52 function_call_parameter_list . ')'

    ')'  shift, and go to state 590


state 505

  165 function_call_parameter_list: non_empty_function_call_parameter_list .
  170 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list . ',' expr_without_variable
  171                                       | non_empty_function_call_parameter_list . ',' variable
  172                                       | non_empty_function_call_parameter_list . ',' '&' w_variable

    ','  shift, and go to state 591

    $default  reduce using rule 165 (function_call_parameter_list)


state 506

  167 non_empty_function_call_parameter_list: expr_without_variable .
  408 expr: expr_without_variable .

    ','       reduce using rule 167 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 167 (non_empty_function_call_parameter_list)
    $default  reduce using rule 408 (expr)


state 507

  168 non_empty_function_call_parameter_list: variable .
  240 expr_without_variable: variable . '=' expr
  241                      | variable . '=' '&' variable
  243                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  247                      | variable . "+= (T_PLUS_EQUAL)" expr
  248                      | variable . "-= (T_MINUS_EQUAL)" expr
  249                      | variable . "*= (T_MUL_EQUAL)" expr
  250                      | variable . "/= (T_DIV_EQUAL)" expr
  251                      | variable . ".= (T_CONCAT_EQUAL)" expr
  252                      | variable . "%= (T_MOD_EQUAL)" expr
  253                      | variable . "&= (T_AND_EQUAL)" expr
  254                      | variable . "|= (T_OR_EQUAL)" expr
  255                      | variable . "^= (T_XOR_EQUAL)" expr
  256                      | variable . "<<= (T_SL_EQUAL)" expr
  257                      | variable . ">>= (T_SR_EQUAL)" expr
  409 r_variable: variable .
  411 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273

    ','           reduce using rule 168 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 411 (rw_variable)
    "++ (T_INC)"  reduce using rule 411 (rw_variable)
    ')'           reduce using rule 168 (non_empty_function_call_parameter_list)
    $default      reduce using rule 409 (r_variable)


state 508

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 592
    static_class_constant  go to state 467


state 509

  349 fully_qualified_class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 593


state 510

  350 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 594


state 511

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  348 fully_qualified_class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 348 (fully_qualified_class_name)


state 512

  109 extends_from: "extends (T_EXTENDS)" fully_qualified_class_name .

    $default  reduce using rule 109 (extends_from)


state 513

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 . implements_list '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 595

    $default  reduce using rule 113 (implements_list)

    implements_list  go to state 596


state 514

  112 interface_extends_list: "extends (T_EXTENDS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    interface_list              go to state 597
    fully_qualified_class_name  go to state 598


state 515

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list . '{' class_statement_list '}'

    '{'  shift, and go to state 599


state 516

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 . '(' parameter_list ')' '{' inner_statement_list '}'

    '('  shift, and go to state 600


state 517

  318 expr_without_variable: function is_reference '(' @50 . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 602
    non_empty_parameter_list    go to state 603
    optional_class_type         go to state 604
    fully_qualified_class_name  go to state 605


state 518

  434 array_function_dereference: function_call @66 '[' dim_offset . ']'

    ']'  shift, and go to state 606


state 519

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  455 variable_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 607


state 520

  337 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . @56 function_call_parameter_list ')'

    $default  reduce using rule 336 (@56)

    @56  go to state 608


state 521

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . @55 function_call_parameter_list ')'

    $default  reduce using rule 334 (@55)

    @55  go to state 609


state 522

  428 variable_without_objects: simple_indirect_reference reference_variable .
  441 reference_variable: reference_variable . '[' dim_offset ']'
  442                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    $default  reduce using rule 428 (variable_without_objects)


state 523

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  267                      | expr "or (T_LOGICAL_OR)" @44 expr .
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 267 (expr_without_variable)


state 524

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  269                      | expr "and (T_LOGICAL_AND)" @45 expr .
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 269 (expr_without_variable)


state 525

  300 expr_without_variable: expr '?' ':' @48 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 610
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 526

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  298                      | expr '?' @46 expr . ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    ':'                           shift, and go to state 611
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258


state 527

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  263                      | expr "|| (T_BOOLEAN_OR)" @42 expr .
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 263 (expr_without_variable)


state 528

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  265                      | expr "&& (T_BOOLEAN_AND)" @43 expr .
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 265 (expr_without_variable)


state 529

  243 expr_without_variable: variable '=' '&' "new (T_NEW)" . class_name_reference @40 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 80

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 612
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 530

  241 expr_without_variable: variable '=' '&' variable .

    $default  reduce using rule 241 (expr_without_variable)


state 531

  343 function_call: variable_without_objects '(' @59 function_call_parameter_list . ')'

    ')'  shift, and go to state 613


state 532

  341 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . @58 function_call_parameter_list ')'

    $default  reduce using rule 340 (@58)

    @58  go to state 614


state 533

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . @57 function_call_parameter_list ')'

    $default  reduce using rule 338 (@57)

    @57  go to state 615


state 534

  432 array_function_dereference: array_function_dereference '[' dim_offset ']' .

    $default  reduce using rule 432 (array_function_dereference)


state 535

  450 object_property: variable_without_objects . @67

    $default  reduce using rule 449 (@67)

    @67  go to state 616


state 536

  414 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property . @63 method_or_not variable_properties

    $default  reduce using rule 413 (@63)

    @63  go to state 617


state 537

  448 object_property: object_dim_list .
  451 object_dim_list: object_dim_list . '[' dim_offset ']'
  452                | object_dim_list . '{' expr '}'

    '['  shift, and go to state 618
    '{'  shift, and go to state 619

    $default  reduce using rule 448 (object_property)


state 538

  453 object_dim_list: variable_name .

    $default  reduce using rule 453 (object_dim_list)


state 539

  441 reference_variable: reference_variable '[' dim_offset ']' .

    $default  reduce using rule 441 (reference_variable)


state 540

  442 reference_variable: reference_variable '{' expr '}' .

    $default  reduce using rule 442 (reference_variable)


state 541

  472 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 472 (non_empty_array_pair_list)


state 542

  471 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' w_variable .

    $default  reduce using rule 471 (non_empty_array_pair_list)


state 543

  466 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . expr
  470                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 620
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 621
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 544

  367 ctor_arguments: '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 622


state 545

  355 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property . @61 dynamic_class_name_variable_properties

    $default  reduce using rule 354 (@61)

    @61  go to state 623


state 546

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' . @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 39 (@7)

    @7  go to state 624


state 547

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 . statement @6 elseif_list else_single

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 625
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 548

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' . @12 expr ')' ';'

    $default  reduce using rule 46 (@12)

    @12  go to state 626


state 549

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' . @10 while_statement

    $default  reduce using rule 43 (@10)

    @10  go to state 627


state 550

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 . for_expr ';' @14 for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 233 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 628
    non_empty_for_expr                 go to state 310
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 311
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 551

  236 non_empty_for_expr: non_empty_for_expr ',' @38 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 629
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 552

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 . variable foreach_optional_arg ')' @20 foreach_statement

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 630
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 553

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 . foreach_variable foreach_optional_arg ')' @18 foreach_statement

    '&'                        shift, and go to state 631
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    foreach_variable                   go to state 632
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 633
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 554

  127 declare_list: "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 634
    static_class_constant  go to state 467


state 555

  128 declare_list: declare_list ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 635


state 556

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' . declare_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 636
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 637
    unticked_statement                 go to state 87
    declare_statement                  go to state 638
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 557

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 . switch_case_list

    ':'  shift, and go to state 639
    '{'  shift, and go to state 640

    switch_case_list  go to state 641


state 558

  385 static_scalar: '+' static_scalar .

    $default  reduce using rule 385 (static_scalar)


state 559

  386 static_scalar: '-' static_scalar .

    $default  reduce using rule 386 (static_scalar)


state 560

  405 non_empty_static_array_pair_list: static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  406                                 | static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 642

    $default  reduce using rule 406 (non_empty_static_array_pair_list)


state 561

  388 static_scalar: '[' static_array_pair_list . ']'

    ']'  shift, and go to state 643


state 562

  400 static_array_pair_list: non_empty_static_array_pair_list . possible_comma
  403 non_empty_static_array_pair_list: non_empty_static_array_pair_list . ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  404                                 | non_empty_static_array_pair_list . ',' static_scalar

    ','  shift, and go to state 644

    $default  reduce using rule 401 (possible_comma)

    possible_comma  go to state 645


state 563

  387 static_scalar: "array (T_ARRAY)" '(' . static_array_pair_list ')'

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    $default  reduce using rule 399 (static_array_pair_list)

    namespace_name                    go to state 463
    class_name                        go to state 464
    common_scalar                     go to state 465
    static_scalar                     go to state 560
    static_class_constant             go to state 467
    static_array_pair_list            go to state 646
    non_empty_static_array_pair_list  go to state 562


state 564

  379 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"

    "heredoc end (T_END_HEREDOC)"  shift, and go to state 348


state 565

  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  383 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 647


state 566

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  347 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  384 static_scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 347 (class_name)
    $default                       reduce using rule 384 (static_scalar)


state 567

  390 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 648


state 568

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' . "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "catch (T_CATCH)"  shift, and go to state 649


state 569

   23 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 23 (use_declaration)


state 570

  177 global_var: '$' '{' expr '}' .

    $default  reduce using rule 177 (global_var)


state 571

  179 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 650
    static_class_constant  go to state 467


state 572

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 651
    non_empty_parameter_list    go to state 603
    optional_class_type         go to state 604
    fully_qualified_class_name  go to state 605


state 573

   92 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 92 (unset_variables)


state 574

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 66 (unticked_statement)


state 575

  497 isset_variables: isset_variables ',' @70 . variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 652
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 576

  462 assignment_list_element: "list (T_LIST)" '(' . @68 assignment_list ')'

    $default  reduce using rule 461 (@68)

    @68  go to state 653


state 577

  458 assignment_list: assignment_list ',' . assignment_list_element

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 483
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    $default  reduce using rule 463 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 484
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list_element            go to state 654


state 578

  239 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' . '=' expr

    '='  shift, and go to state 655


state 579

  485 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 485 (encaps_var_offset)


state 580

  487 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 487 (encaps_var_offset)


state 581

  486 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 486 (encaps_var_offset)


state 582

  480 encaps_var: "variable (T_VARIABLE)" '[' @69 encaps_var_offset . ']'

    ']'  shift, and go to state 656


state 583

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ']'                           shift, and go to state 657


state 584

  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 658
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 585

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list '}' .

    $default  reduce using rule 15 (top_statement)


state 586

    3 top_statement_list: top_statement_list . @1 top_statement
   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list . '}'

    '}'  shift, and go to state 659

    $default  reduce using rule 2 (@1)

    @1  go to state 4


state 587

  333 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 function_call_parameter_list . ')'

    ')'  shift, and go to state 660


state 588

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 661


state 589

  169 non_empty_function_call_parameter_list: '&' w_variable .

    $default  reduce using rule 169 (non_empty_function_call_parameter_list)


state 590

  329 function_call: namespace_name '(' @52 function_call_parameter_list ')' .

    $default  reduce using rule 329 (function_call)


state 591

  170 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' . expr_without_variable
  171                                       | non_empty_function_call_parameter_list ',' . variable
  172                                       | non_empty_function_call_parameter_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 662
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 663
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 664
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 592

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 24 (constant_declaration)


state 593

  349 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 665


state 594

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  350 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 350 (fully_qualified_class_name)


state 595

  114 implements_list: "implements (T_IMPLEMENTS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    interface_list              go to state 666
    fully_qualified_class_name  go to state 598


state 596

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list . '{' class_statement_list '}'

    '{'  shift, and go to state 667


state 597

  112 interface_extends_list: "extends (T_EXTENDS)" interface_list .
  116 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 668

    $default  reduce using rule 112 (interface_extends_list)


state 598

  115 interface_list: fully_qualified_class_name .

    $default  reduce using rule 115 (interface_list)


state 599

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' . class_statement_list '}'

    $default  reduce using rule 183 (class_statement_list)

    class_statement_list  go to state 669


state 600

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' . parameter_list ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 670
    non_empty_parameter_list    go to state 603
    optional_class_type         go to state 604
    fully_qualified_class_name  go to state 605


state 601

  163 optional_class_type: "array (T_ARRAY)" .

    $default  reduce using rule 163 (optional_class_type)


state 602

  318 expr_without_variable: function is_reference '(' @50 parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 671


state 603

  152 parameter_list: non_empty_parameter_list .
  158 non_empty_parameter_list: non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 672

    $default  reduce using rule 152 (parameter_list)


state 604

  154 non_empty_parameter_list: optional_class_type . "variable (T_VARIABLE)"
  155                         | optional_class_type . '&' "variable (T_VARIABLE)"
  156                         | optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  157                         | optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 673
    "variable (T_VARIABLE)"  shift, and go to state 674


state 605

  164 optional_class_type: fully_qualified_class_name .

    $default  reduce using rule 164 (optional_class_type)


state 606

  434 array_function_dereference: function_call @66 '[' dim_offset ']' .

    $default  reduce using rule 434 (array_function_dereference)


state 607

  455 variable_name: '{' expr '}' .

    $default  reduce using rule 455 (variable_name)


state 608

  337 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 675
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 609

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 676
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 610

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  300                      | expr '?' ':' @48 expr .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 300 (expr_without_variable)


state 611

  298 expr_without_variable: expr '?' @46 expr ':' . @47 expr

    $default  reduce using rule 297 (@47)

    @47  go to state 677


state 612

  243 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference . @40 ctor_arguments

    $default  reduce using rule 242 (@40)

    @40  go to state 678


state 613

  343 function_call: variable_without_objects '(' @59 function_call_parameter_list ')' .

    $default  reduce using rule 343 (function_call)


state 614

  341 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 679
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 615

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 680
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 616

  450 object_property: variable_without_objects @67 .

    $default  reduce using rule 450 (object_property)


state 617

  414 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 . method_or_not variable_properties

    '('  shift, and go to state 681

    $default  reduce using rule 426 (method_or_not)

    array_method_dereference  go to state 682
    method                    go to state 683
    method_or_not             go to state 684


state 618

  451 object_dim_list: object_dim_list '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 446 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 685
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 619

  452 object_dim_list: object_dim_list '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 686
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 620

  470 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 687
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 621

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  466 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 466 (non_empty_array_pair_list)


state 622

  367 ctor_arguments: '(' function_call_parameter_list ')' .

    $default  reduce using rule 367 (ctor_arguments)


state 623

  355 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property @61 . dynamic_class_name_variable_properties

    $default  reduce using rule 358 (dynamic_class_name_variable_properties)

    dynamic_class_name_variable_properties  go to state 688


state 624

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 . inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 689


state 625

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement . @6 elseif_list else_single

    $default  reduce using rule 37 (@6)

    @6  go to state 690


state 626

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 . expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 691
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 627

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 . while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 692
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 693
    unticked_statement                 go to state 87
    while_statement                    go to state 694
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 628

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr . ';' @14 for_expr ')' @15 for_statement

    ';'  shift, and go to state 695


state 629

  236 non_empty_for_expr: non_empty_for_expr ',' @38 expr .
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 236 (non_empty_for_expr)


state 630

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable . foreach_optional_arg ')' @20 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 696

    $default  reduce using rule 117 (foreach_optional_arg)

    foreach_optional_arg  go to state 697


state 631

  120 foreach_variable: '&' . variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 698
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 632

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable . foreach_optional_arg ')' @18 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 696

    $default  reduce using rule 117 (foreach_optional_arg)

    foreach_optional_arg  go to state 699


state 633

  119 foreach_variable: variable .

    $default  reduce using rule 119 (foreach_variable)


state 634

  127 declare_list: "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 127 (declare_list)


state 635

  128 declare_list: declare_list ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 700


state 636

  126 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 701


state 637

  125 declare_statement: statement .

    $default  reduce using rule 125 (declare_statement)


state 638

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' declare_statement .

    $default  reduce using rule 74 (unticked_statement)


state 639

  131 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  132                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 702

    $default  reduce using rule 133 (case_list)

    case_list  go to state 703


state 640

  129 switch_case_list: '{' . case_list '}'
  130                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 704

    $default  reduce using rule 133 (case_list)

    case_list  go to state 705


state 641

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 switch_case_list .

    $default  reduce using rule 53 (unticked_statement)


state 642

  405 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 706
    static_class_constant  go to state 467


state 643

  388 static_scalar: '[' static_array_pair_list ']' .

    $default  reduce using rule 388 (static_scalar)


state 644

  402 possible_comma: ',' .
  403 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' . static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  404                                 | non_empty_static_array_pair_list ',' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    $default  reduce using rule 402 (possible_comma)

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 707
    static_class_constant  go to state 467


state 645

  400 static_array_pair_list: non_empty_static_array_pair_list possible_comma .

    $default  reduce using rule 400 (static_array_pair_list)


state 646

  387 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list . ')'

    ')'  shift, and go to state 708


state 647

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  346 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  383 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 346 (class_name)
    $default                       reduce using rule 383 (static_scalar)


state 648

  390 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 390 (static_class_constant)


state 649

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" . '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '('  shift, and go to state 709


state 650

  179 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 179 (static_var_list)


state 651

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 710


state 652

  497 isset_variables: isset_variables ',' @70 variable .

    $default  reduce using rule 497 (isset_variables)


state 653

  462 assignment_list_element: "list (T_LIST)" '(' @68 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 483
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    $default  reduce using rule 463 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 484
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list                    go to state 711
    assignment_list_element            go to state 486


state 654

  458 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 458 (assignment_list)


state 655

  239 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' '=' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 712
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 656

  480 encaps_var: "variable (T_VARIABLE)" '[' @69 encaps_var_offset ']' .

    $default  reduce using rule 480 (encaps_var)


state 657

  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 713


state 658

  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list . ')'

    ')'  shift, and go to state 714


state 659

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list '}' .

    $default  reduce using rule 13 (top_statement)


state 660

  333 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 function_call_parameter_list ')' .

    $default  reduce using rule 333 (function_call)


state 661

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 715


state 662

  172 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 716
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 663

  170 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' expr_without_variable .
  408 expr: expr_without_variable .

    ','       reduce using rule 170 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 170 (non_empty_function_call_parameter_list)
    $default  reduce using rule 408 (expr)


state 664

  171 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' variable .
  240 expr_without_variable: variable . '=' expr
  241                      | variable . '=' '&' variable
  243                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  247                      | variable . "+= (T_PLUS_EQUAL)" expr
  248                      | variable . "-= (T_MINUS_EQUAL)" expr
  249                      | variable . "*= (T_MUL_EQUAL)" expr
  250                      | variable . "/= (T_DIV_EQUAL)" expr
  251                      | variable . ".= (T_CONCAT_EQUAL)" expr
  252                      | variable . "%= (T_MOD_EQUAL)" expr
  253                      | variable . "&= (T_AND_EQUAL)" expr
  254                      | variable . "|= (T_OR_EQUAL)" expr
  255                      | variable . "^= (T_XOR_EQUAL)" expr
  256                      | variable . "<<= (T_SL_EQUAL)" expr
  257                      | variable . ">>= (T_SR_EQUAL)" expr
  409 r_variable: variable .
  411 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273

    ','           reduce using rule 171 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 411 (rw_variable)
    "++ (T_INC)"  reduce using rule 411 (rw_variable)
    ')'           reduce using rule 171 (non_empty_function_call_parameter_list)
    $default      reduce using rule 409 (r_variable)


state 665

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  349 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 349 (fully_qualified_class_name)


state 666

  114 implements_list: "implements (T_IMPLEMENTS)" interface_list .
  116 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 668

    $default  reduce using rule 114 (implements_list)


state 667

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' . class_statement_list '}'

    $default  reduce using rule 183 (class_statement_list)

    class_statement_list  go to state 717


state 668

  116 interface_list: interface_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 718


state 669

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list . '}'
  182 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 719
    "use (T_USE)"              shift, and go to state 720
    "public (T_PUBLIC)"        shift, and go to state 721
    "protected (T_PROTECTED)"  shift, and go to state 722
    "private (T_PRIVATE)"      shift, and go to state 723
    "final (T_FINAL)"          shift, and go to state 724
    "abstract (T_ABSTRACT)"    shift, and go to state 725
    "static (T_STATIC)"        shift, and go to state 726
    "var (T_VAR)"              shift, and go to state 727
    '}'                        shift, and go to state 728

    $default  reduce using rule 215 (method_modifiers)

    class_statement             go to state 729
    trait_use_statement         go to state 730
    variable_modifiers          go to state 731
    method_modifiers            go to state 732
    non_empty_member_modifiers  go to state 733
    member_modifier             go to state 734
    class_constant_declaration  go to state 735


state 670

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 736


state 671

  318 expr_without_variable: function is_reference '(' @50 parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 737

    $default  reduce using rule 322 (lexical_vars)

    lexical_vars  go to state 738


state 672

  158 non_empty_parameter_list: non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    optional_class_type         go to state 739
    fully_qualified_class_name  go to state 605


state 673

  155 non_empty_parameter_list: optional_class_type '&' . "variable (T_VARIABLE)"
  156                         | optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 740


state 674

  154 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" .
  157                         | optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 741

    $default  reduce using rule 154 (non_empty_parameter_list)


state 675

  337 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list . ')'

    ')'  shift, and go to state 742


state 676

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list . ')'

    ')'  shift, and go to state 743


state 677

  298 expr_without_variable: expr '?' @46 expr ':' @47 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 744
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 678

  243 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @40 . ctor_arguments

    '('  shift, and go to state 440

    $default  reduce using rule 366 (ctor_arguments)

    ctor_arguments  go to state 745


state 679

  341 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list . ')'

    ')'  shift, and go to state 746


state 680

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list . ')'

    ')'  shift, and go to state 747


state 681

  423 method: '(' . @65 function_call_parameter_list ')'

    $default  reduce using rule 422 (@65)

    @65  go to state 748


state 682

  420 array_method_dereference: array_method_dereference . '[' dim_offset ']'
  425 method_or_not: array_method_dereference .

    '['  shift, and go to state 749

    $default  reduce using rule 425 (method_or_not)


state 683

  421 array_method_dereference: method . '[' dim_offset ']'
  424 method_or_not: method .

    '['  shift, and go to state 750

    $default  reduce using rule 424 (method_or_not)


state 684

  414 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not . variable_properties

    $default  reduce using rule 417 (variable_properties)

    variable_properties  go to state 751


state 685

  451 object_dim_list: object_dim_list '[' dim_offset . ']'

    ']'  shift, and go to state 752


state 686

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr
  452 object_dim_list: object_dim_list '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 753


state 687

  470 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 470 (non_empty_array_pair_list)


state 688

  355 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property @61 dynamic_class_name_variable_properties .
  357 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties . dynamic_class_name_variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 754

    $default  reduce using rule 355 (dynamic_class_name_reference)

    dynamic_class_name_variable_property  go to state 755


state 689

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list . @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  reduce using rule 40 (@8)
    "else (T_ELSE)"      reduce using rule 40 (@8)
    "endif (T_ENDIF)"    reduce using rule 40 (@8)
    $default             reduce using rule 26 (@4)

    @4  go to state 363
    @8  go to state 756


state 690

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 . elseif_list else_single

    $default  reduce using rule 142 (elseif_list)

    elseif_list  go to state 757


state 691

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr . ')' ';'
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 758


state 692

  141 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 759


state 693

  140 while_statement: statement .

    $default  reduce using rule 140 (while_statement)


state 694

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 while_statement .

    $default  reduce using rule 44 (unticked_statement)


state 695

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' . @14 for_expr ')' @15 for_statement

    $default  reduce using rule 49 (@14)

    @14  go to state 760


state 696

  118 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" . foreach_variable

    '&'                        shift, and go to state 631
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    foreach_variable                   go to state 761
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 633
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 697

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg . ')' @20 foreach_statement

    ')'  shift, and go to state 762


state 698

  120 foreach_variable: '&' variable .

    $default  reduce using rule 120 (foreach_variable)


state 699

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg . ')' @18 foreach_statement

    ')'  shift, and go to state 763


state 700

  128 declare_list: declare_list ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 764
    static_class_constant  go to state 467


state 701

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  126 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "enddeclare (T_ENDDECLARE)"  shift, and go to state 765

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 702

  132 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 133 (case_list)

    case_list  go to state 766


state 703

  131 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 767
    "case (T_CASE)"            shift, and go to state 768
    "default (T_DEFAULT)"      shift, and go to state 769


state 704

  130 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 133 (case_list)

    case_list  go to state 770


state 705

  129 switch_case_list: '{' case_list . '}'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "case (T_CASE)"        shift, and go to state 768
    "default (T_DEFAULT)"  shift, and go to state 769
    '}'                    shift, and go to state 771


state 706

  405 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 405 (non_empty_static_array_pair_list)


state 707

  403 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  404                                 | non_empty_static_array_pair_list ',' static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 772

    $default  reduce using rule 404 (non_empty_static_array_pair_list)


state 708

  387 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list ')' .

    $default  reduce using rule 387 (static_scalar)


state 709

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' . @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 77 (@23)

    @23  go to state 773


state 710

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 737

    $default  reduce using rule 322 (lexical_vars)

    lexical_vars  go to state 774


state 711

  458 assignment_list: assignment_list . ',' assignment_list_element
  462 assignment_list_element: "list (T_LIST)" '(' @68 assignment_list . ')'

    ','  shift, and go to state 577
    ')'  shift, and go to state 775


state 712

  239 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' '=' expr .
  263                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 239 (expr_without_variable)


state 713

  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 483 (encaps_var)


state 714

  331 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')' .

    $default  reduce using rule 331 (function_call)


state 715

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 32 (inner_statement)


state 716

  172 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' w_variable .

    $default  reduce using rule 172 (non_empty_function_call_parameter_list)


state 717

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list . '}'
  182 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 719
    "use (T_USE)"              shift, and go to state 720
    "public (T_PUBLIC)"        shift, and go to state 721
    "protected (T_PROTECTED)"  shift, and go to state 722
    "private (T_PRIVATE)"      shift, and go to state 723
    "final (T_FINAL)"          shift, and go to state 724
    "abstract (T_ABSTRACT)"    shift, and go to state 725
    "static (T_STATIC)"        shift, and go to state 726
    "var (T_VAR)"              shift, and go to state 727
    '}'                        shift, and go to state 776

    $default  reduce using rule 215 (method_modifiers)

    class_statement             go to state 729
    trait_use_statement         go to state 730
    variable_modifiers          go to state 731
    method_modifiers            go to state 732
    non_empty_member_modifiers  go to state 733
    member_modifier             go to state 734
    class_constant_declaration  go to state 735


state 718

  116 interface_list: interface_list ',' fully_qualified_class_name .

    $default  reduce using rule 116 (interface_list)


state 719

  230 class_constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 777


state 720

  190 trait_use_statement: "use (T_USE)" . trait_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    trait_list                  go to state 778
    fully_qualified_class_name  go to state 779


state 721

  219 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 219 (member_modifier)


state 722

  220 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 220 (member_modifier)


state 723

  221 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 221 (member_modifier)


state 724

  224 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 224 (member_modifier)


state 725

  223 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 223 (member_modifier)


state 726

  222 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 222 (member_modifier)


state 727

  214 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 214 (variable_modifiers)


state 728

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}' .

    $default  reduce using rule 103 (unticked_class_declaration_statement)


state 729

  182 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 182 (class_statement_list)


state 730

  187 class_statement: trait_use_statement .

    $default  reduce using rule 187 (class_statement)


state 731

  185 class_statement: variable_modifiers . @36 class_variable_declaration ';'

    $default  reduce using rule 184 (@36)

    @36  go to state 780


state 732

  189 class_statement: method_modifiers . function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    "function (T_FUNCTION)"  shift, and go to state 47

    function  go to state 781


state 733

  213 variable_modifiers: non_empty_member_modifiers .
  216 method_modifiers: non_empty_member_modifiers .
  218 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 721
    "protected (T_PROTECTED)"  shift, and go to state 722
    "private (T_PRIVATE)"      shift, and go to state 723
    "final (T_FINAL)"          shift, and go to state 724
    "abstract (T_ABSTRACT)"    shift, and go to state 725
    "static (T_STATIC)"        shift, and go to state 726

    "function (T_FUNCTION)"  reduce using rule 216 (method_modifiers)
    $default                 reduce using rule 213 (variable_modifiers)

    member_modifier  go to state 782


state 734

  217 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 217 (non_empty_member_modifiers)


state 735

  186 class_statement: class_constant_declaration . ';'
  229 class_constant_declaration: class_constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 783
    ';'  shift, and go to state 784


state 736

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 785


state 737

  323 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 786


state 738

  318 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 787


state 739

  158 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 788
    "variable (T_VARIABLE)"  shift, and go to state 789


state 740

  155 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" .
  156                         | optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 790

    $default  reduce using rule 155 (non_empty_parameter_list)


state 741

  157 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 791
    static_class_constant  go to state 467


state 742

  337 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')' .

    $default  reduce using rule 337 (function_call)


state 743

  335 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')' .

    $default  reduce using rule 335 (function_call)


state 744

  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  298                      | expr '?' @46 expr ':' @47 expr .
  300                      | expr . '?' ':' @48 expr

    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 298 (expr_without_variable)


state 745

  243 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments .

    $default  reduce using rule 243 (expr_without_variable)


state 746

  341 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')' .

    $default  reduce using rule 341 (function_call)


state 747

  339 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')' .

    $default  reduce using rule 339 (function_call)


state 748

  423 method: '(' @65 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 166 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 792
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 749

  420 array_method_dereference: array_method_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 446 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 793
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 750

  421 array_method_dereference: method '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 446 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 794
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 751

  414 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not variable_properties .
  416 variable_properties: variable_properties . variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 795

    $default  reduce using rule 414 (variable)

    variable_property  go to state 796


state 752

  451 object_dim_list: object_dim_list '[' dim_offset ']' .

    $default  reduce using rule 451 (object_dim_list)


state 753

  452 object_dim_list: object_dim_list '{' expr '}' .

    $default  reduce using rule 452 (object_dim_list)


state 754

  359 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" . object_property

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 797
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 755

  357 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    $default  reduce using rule 357 (dynamic_class_name_variable_properties)


state 756

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 . new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 145 (new_elseif_list)

    new_elseif_list  go to state 798


state 757

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list . else_single
  144 elseif_list: elseif_list . "elseif (T_ELSEIF)" '(' expr ')' @34 statement

    "elseif (T_ELSEIF)"  shift, and go to state 799
    "else (T_ELSE)"      shift, and go to state 800

    "elseif (T_ELSEIF)"  [reduce using rule 148 (else_single)]
    "else (T_ELSE)"      [reduce using rule 148 (else_single)]
    $default             reduce using rule 148 (else_single)

    else_single  go to state 801


state 758

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' . ';'

    ';'  shift, and go to state 802


state 759

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  141 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "endwhile (T_ENDWHILE)"  shift, and go to state 803

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 760

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 . for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 233 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 804
    non_empty_for_expr                 go to state 310
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 311
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 761

  118 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" foreach_variable .

    $default  reduce using rule 118 (foreach_optional_arg)


state 762

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' . @20 foreach_statement

    $default  reduce using rule 71 (@20)

    @20  go to state 805


state 763

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' . @18 foreach_statement

    $default  reduce using rule 68 (@18)

    @18  go to state 806


state 764

  128 declare_list: declare_list ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 128 (declare_list)


state 765

  126 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 807


state 766

  132 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 808
    "case (T_CASE)"            shift, and go to state 768
    "default (T_DEFAULT)"      shift, and go to state 769


state 767

  131 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 809


state 768

  135 case_list: case_list "case (T_CASE)" . expr case_separator @32 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 810
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 769

  137 case_list: case_list "default (T_DEFAULT)" . case_separator @33 inner_statement_list

    ':'  shift, and go to state 811
    ';'  shift, and go to state 812

    case_separator  go to state 813


state 770

  130 switch_case_list: '{' ';' case_list . '}'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "case (T_CASE)"        shift, and go to state 768
    "default (T_DEFAULT)"  shift, and go to state 769
    '}'                    shift, and go to state 814


state 771

  129 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 129 (switch_case_list)


state 772

  403 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 815
    static_class_constant  go to state 467


state 773

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 . fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 816


state 774

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 817


state 775

  462 assignment_list_element: "list (T_LIST)" '(' @68 assignment_list ')' .

    $default  reduce using rule 462 (assignment_list_element)


state 776

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}' .

    $default  reduce using rule 101 (unticked_class_declaration_statement)


state 777

  230 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 818


state 778

  190 trait_use_statement: "use (T_USE)" trait_list . trait_adaptations
  192 trait_list: trait_list . ',' fully_qualified_class_name

    ','  shift, and go to state 819
    ';'  shift, and go to state 820
    '{'  shift, and go to state 821

    trait_adaptations  go to state 822


state 779

  191 trait_list: fully_qualified_class_name .

    $default  reduce using rule 191 (trait_list)


state 780

  185 class_statement: variable_modifiers @36 . class_variable_declaration ';'

    "variable (T_VARIABLE)"  shift, and go to state 823

    class_variable_declaration  go to state 824


state 781

  189 class_statement: method_modifiers function . is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 825


state 782

  218 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 218 (non_empty_member_modifiers)


state 783

  229 class_constant_declaration: class_constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 826


state 784

  186 class_statement: class_constant_declaration ';' .

    $default  reduce using rule 186 (class_statement)


state 785

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 827


state 786

  323 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 828
    "variable (T_VARIABLE)"  shift, and go to state 829

    lexical_var_list  go to state 830


state 787

  318 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 831


state 788

  159 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 832


state 789

  158 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" .
  161                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 833

    $default  reduce using rule 158 (non_empty_parameter_list)


state 790

  156 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 834
    static_class_constant  go to state 467


state 791

  157 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 157 (non_empty_parameter_list)


state 792

  423 method: '(' @65 function_call_parameter_list . ')'

    ')'  shift, and go to state 835


state 793

  420 array_method_dereference: array_method_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 836


state 794

  421 array_method_dereference: method '[' dim_offset . ']'

    ']'  shift, and go to state 837


state 795

  419 variable_property: "-> (T_OBJECT_OPERATOR)" . object_property @64 method_or_not

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 838
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 796

  416 variable_properties: variable_properties variable_property .

    $default  reduce using rule 416 (variable_properties)


state 797

  359 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property .

    $default  reduce using rule 359 (dynamic_class_name_variable_property)


state 798

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list . new_else_single "endif (T_ENDIF)" ';'
  147 new_elseif_list: new_elseif_list . "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list

    "elseif (T_ELSEIF)"  shift, and go to state 839
    "else (T_ELSE)"      shift, and go to state 840

    $default  reduce using rule 150 (new_else_single)

    new_else_single  go to state 841


state 799

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" . '(' expr ')' @34 statement

    '('  shift, and go to state 842


state 800

  149 else_single: "else (T_ELSE)" . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 843
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 801

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list else_single .

    $default  reduce using rule 38 (unticked_statement)


state 802

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' ';' .

    $default  reduce using rule 47 (unticked_statement)


state 803

  141 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 844


state 804

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr . ')' @15 for_statement

    ')'  shift, and go to state 845


state 805

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 846
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 847
    unticked_statement                 go to state 87
    foreach_statement                  go to state 848
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 806

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 846
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 847
    unticked_statement                 go to state 87
    foreach_statement                  go to state 849
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 807

  126 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 126 (declare_statement)


state 808

  132 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 850


state 809

  131 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 131 (switch_case_list)


state 810

  135 case_list: case_list "case (T_CASE)" expr . case_separator @32 inner_statement_list
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    ':'                           shift, and go to state 811
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 812

    case_separator  go to state 851


state 811

  138 case_separator: ':' .

    $default  reduce using rule 138 (case_separator)


state 812

  139 case_separator: ';' .

    $default  reduce using rule 139 (case_separator)


state 813

  137 case_list: case_list "default (T_DEFAULT)" case_separator . @33 inner_statement_list

    $default  reduce using rule 136 (@33)

    @33  go to state 852


state 814

  130 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 130 (switch_case_list)


state 815

  403 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 403 (non_empty_static_array_pair_list)


state 816

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name . @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 78 (@24)

    @24  go to state 853


state 817

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 854


state 818

  230 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 855
    static_class_constant  go to state 467


state 819

  192 trait_list: trait_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 856


state 820

  193 trait_adaptations: ';' .

    $default  reduce using rule 193 (trait_adaptations)


state 821

  194 trait_adaptations: '{' . trait_adaptation_list '}'

    "identifier (T_STRING)"    shift, and go to state 857
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    $default  reduce using rule 195 (trait_adaptation_list)

    namespace_name                          go to state 511
    trait_adaptation_list                   go to state 858
    non_empty_trait_adaptation_list         go to state 859
    trait_adaptation_statement              go to state 860
    trait_precedence                        go to state 861
    trait_method_reference                  go to state 862
    trait_method_reference_fully_qualified  go to state 863
    trait_alias                             go to state 864
    fully_qualified_class_name              go to state 865


state 822

  190 trait_use_statement: "use (T_USE)" trait_list trait_adaptations .

    $default  reduce using rule 190 (trait_use_statement)


state 823

  227 class_variable_declaration: "variable (T_VARIABLE)" .
  228                           | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 866

    $default  reduce using rule 227 (class_variable_declaration)


state 824

  185 class_statement: variable_modifiers @36 class_variable_declaration . ';'
  225 class_variable_declaration: class_variable_declaration . ',' "variable (T_VARIABLE)"
  226                           | class_variable_declaration . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 867
    ';'  shift, and go to state 868


state 825

  189 class_statement: method_modifiers function is_reference . "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    "identifier (T_STRING)"  shift, and go to state 869


state 826

  229 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 870


state 827

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list . '}'

    '}'  shift, and go to state 871

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 828

  327 lexical_var_list: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 872


state 829

  326 lexical_var_list: "variable (T_VARIABLE)" .

    $default  reduce using rule 326 (lexical_var_list)


state 830

  323 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  324 lexical_var_list: lexical_var_list . ',' "variable (T_VARIABLE)"
  325                 | lexical_var_list . ',' '&' "variable (T_VARIABLE)"

    ','  shift, and go to state 873
    ')'  shift, and go to state 874


state 831

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  318 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 875

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 832

  159 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" .
  160                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 876

    $default  reduce using rule 159 (non_empty_parameter_list)


state 833

  161 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 877
    static_class_constant  go to state 467


state 834

  156 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 156 (non_empty_parameter_list)


state 835

  423 method: '(' @65 function_call_parameter_list ')' .

    $default  reduce using rule 423 (method)


state 836

  420 array_method_dereference: array_method_dereference '[' dim_offset ']' .

    $default  reduce using rule 420 (array_method_dereference)


state 837

  421 array_method_dereference: method '[' dim_offset ']' .

    $default  reduce using rule 421 (array_method_dereference)


state 838

  419 variable_property: "-> (T_OBJECT_OPERATOR)" object_property . @64 method_or_not

    $default  reduce using rule 418 (@64)

    @64  go to state 878


state 839

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" . '(' expr ')' ':' @35 inner_statement_list

    '('  shift, and go to state 879


state 840

  151 new_else_single: "else (T_ELSE)" . ':' inner_statement_list

    ':'  shift, and go to state 880


state 841

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single . "endif (T_ENDIF)" ';'

    "endif (T_ENDIF)"  shift, and go to state 881


state 842

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' . expr ')' @34 statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 882
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 843

  149 else_single: "else (T_ELSE)" statement .

    $default  reduce using rule 149 (else_single)


state 844

  141 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 141 (while_statement)


state 845

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' . @15 for_statement

    $default  reduce using rule 50 (@15)

    @15  go to state 883


state 846

  124 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 884


state 847

  123 foreach_statement: statement .

    $default  reduce using rule 123 (foreach_statement)


state 848

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement .

    $default  reduce using rule 72 (unticked_statement)


state 849

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement .

    $default  reduce using rule 69 (unticked_statement)


state 850

  132 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 132 (switch_case_list)


state 851

  135 case_list: case_list "case (T_CASE)" expr case_separator . @32 inner_statement_list

    $default  reduce using rule 134 (@32)

    @32  go to state 885


state 852

  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 886


state 853

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 . "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "variable (T_VARIABLE)"  shift, and go to state 887


state 854

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 888

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 855

  230 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 230 (class_constant_declaration)


state 856

  192 trait_list: trait_list ',' fully_qualified_class_name .

    $default  reduce using rule 192 (trait_list)


state 857

    5 namespace_name: "identifier (T_STRING)" .
  204 trait_method_reference: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 204 (trait_method_reference)
    $default     reduce using rule 5 (namespace_name)


state 858

  194 trait_adaptations: '{' trait_adaptation_list . '}'

    '}'  shift, and go to state 889


state 859

  196 trait_adaptation_list: non_empty_trait_adaptation_list .
  198 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list . trait_adaptation_statement

    "identifier (T_STRING)"    shift, and go to state 857
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    $default  reduce using rule 196 (trait_adaptation_list)

    namespace_name                          go to state 511
    trait_adaptation_statement              go to state 890
    trait_precedence                        go to state 861
    trait_method_reference                  go to state 862
    trait_method_reference_fully_qualified  go to state 863
    trait_alias                             go to state 864
    fully_qualified_class_name              go to state 865


state 860

  197 non_empty_trait_adaptation_list: trait_adaptation_statement .

    $default  reduce using rule 197 (non_empty_trait_adaptation_list)


state 861

  199 trait_adaptation_statement: trait_precedence . ';'

    ';'  shift, and go to state 891


state 862

  207 trait_alias: trait_method_reference . "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  208            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 892


state 863

  201 trait_precedence: trait_method_reference_fully_qualified . "insteadof (T_INSTEADOF)" trait_reference_list
  205 trait_method_reference: trait_method_reference_fully_qualified .

    "insteadof (T_INSTEADOF)"  shift, and go to state 893

    $default  reduce using rule 205 (trait_method_reference)


state 864

  200 trait_adaptation_statement: trait_alias . ';'

    ';'  shift, and go to state 894


state 865

  206 trait_method_reference_fully_qualified: fully_qualified_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 895


state 866

  228 class_variable_declaration: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 896
    static_class_constant  go to state 467


state 867

  225 class_variable_declaration: class_variable_declaration ',' . "variable (T_VARIABLE)"
  226                           | class_variable_declaration ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 897


state 868

  185 class_statement: variable_modifiers @36 class_variable_declaration ';' .

    $default  reduce using rule 185 (class_statement)


state 869

  189 class_statement: method_modifiers function is_reference "identifier (T_STRING)" . @37 '(' parameter_list ')' method_body

    $default  reduce using rule 188 (@37)

    @37  go to state 898


state 870

  229 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 899
    static_class_constant  go to state 467


state 871

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}' .

    $default  reduce using rule 99 (unticked_function_declaration_statement)


state 872

  327 lexical_var_list: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 327 (lexical_var_list)


state 873

  324 lexical_var_list: lexical_var_list ',' . "variable (T_VARIABLE)"
  325                 | lexical_var_list ',' . '&' "variable (T_VARIABLE)"

    '&'                      shift, and go to state 900
    "variable (T_VARIABLE)"  shift, and go to state 901


state 874

  323 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 323 (lexical_vars)


state 875

  318 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 318 (expr_without_variable)


state 876

  160 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 902
    static_class_constant  go to state 467


state 877

  161 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 161 (non_empty_parameter_list)


state 878

  419 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @64 . method_or_not

    '('  shift, and go to state 681

    $default  reduce using rule 426 (method_or_not)

    array_method_dereference  go to state 682
    method                    go to state 683
    method_or_not             go to state 903


state 879

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' . expr ')' ':' @35 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 904
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 880

  151 new_else_single: "else (T_ELSE)" ':' . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 905


state 881

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 906


state 882

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr . ')' @34 statement
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 907


state 883

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 . for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 908
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 909
    unticked_statement                 go to state 87
    for_statement                      go to state 910
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 884

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  124 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "endforeach (T_ENDFOREACH)"  shift, and go to state 911

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 885

  135 case_list: case_list "case (T_CASE)" expr case_separator @32 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 912


state 886

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 137 (case_list)
    "case (T_CASE)"            reduce using rule 137 (case_list)
    "default (T_DEFAULT)"      reduce using rule 137 (case_list)
    '}'                        reduce using rule 137 (case_list)
    $default                   reduce using rule 26 (@4)

    @4  go to state 363


state 887

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" . ')' @25 '{' inner_statement_list '}' @26 additional_catches

    ')'  shift, and go to state 913


state 888

  320 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 320 (expr_without_variable)


state 889

  194 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 194 (trait_adaptations)


state 890

  198 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list trait_adaptation_statement .

    $default  reduce using rule 198 (non_empty_trait_adaptation_list)


state 891

  199 trait_adaptation_statement: trait_precedence ';' .

    $default  reduce using rule 199 (trait_adaptation_statement)


state 892

  207 trait_alias: trait_method_reference "as (T_AS)" . trait_modifiers "identifier (T_STRING)"
  208            | trait_method_reference "as (T_AS)" . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 721
    "protected (T_PROTECTED)"  shift, and go to state 722
    "private (T_PRIVATE)"      shift, and go to state 723
    "final (T_FINAL)"          shift, and go to state 724
    "abstract (T_ABSTRACT)"    shift, and go to state 725
    "static (T_STATIC)"        shift, and go to state 726

    $default  reduce using rule 209 (trait_modifiers)

    trait_modifiers  go to state 914
    member_modifier  go to state 915


state 893

  201 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" . trait_reference_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    trait_reference_list        go to state 916
    fully_qualified_class_name  go to state 917


state 894

  200 trait_adaptation_statement: trait_alias ';' .

    $default  reduce using rule 200 (trait_adaptation_statement)


state 895

  206 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 918


state 896

  228 class_variable_declaration: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 228 (class_variable_declaration)


state 897

  225 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" .
  226                           | class_variable_declaration ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 919

    $default  reduce using rule 225 (class_variable_declaration)


state 898

  189 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 . '(' parameter_list ')' method_body

    '('  shift, and go to state 920


state 899

  229 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 229 (class_constant_declaration)


state 900

  325 lexical_var_list: lexical_var_list ',' '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 921


state 901

  324 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)" .

    $default  reduce using rule 324 (lexical_var_list)


state 902

  160 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 160 (non_empty_parameter_list)


state 903

  419 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @64 method_or_not .

    $default  reduce using rule 419 (variable_property)


state 904

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr . ')' ':' @35 inner_statement_list
  263 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  265                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  267                      | expr . "or (T_LOGICAL_OR)" @44 expr
  269                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr . '|' expr
  272                      | expr . '&' expr
  273                      | expr . '^' expr
  274                      | expr . '.' expr
  275                      | expr . '+' expr
  276                      | expr . '-' expr
  277                      | expr . '*' expr
  278                      | expr . '/' expr
  279                      | expr . '%' expr
  280                      | expr . "<< (T_SL)" expr
  281                      | expr . ">> (T_SR)" expr
  286                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr . '<' expr
  291                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr . '>' expr
  293                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  298                      | expr . '?' @46 expr ':' @47 expr
  300                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 922


state 905

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  151 new_else_single: "else (T_ELSE)" ':' inner_statement_list .

    "endif (T_ENDIF)"  reduce using rule 151 (new_else_single)
    $default           reduce using rule 26 (@4)

    @4  go to state 363


state 906

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';' .

    $default  reduce using rule 41 (unticked_statement)


state 907

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' . @34 statement

    $default  reduce using rule 143 (@34)

    @34  go to state 923


state 908

  122 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 924


state 909

  121 for_statement: statement .

    $default  reduce using rule 121 (for_statement)


state 910

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement .

    $default  reduce using rule 51 (unticked_statement)


state 911

  124 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 925


state 912

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  135 case_list: case_list "case (T_CASE)" expr case_separator @32 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 135 (case_list)
    "case (T_CASE)"            reduce using rule 135 (case_list)
    "default (T_DEFAULT)"      reduce using rule 135 (case_list)
    '}'                        reduce using rule 135 (case_list)
    $default                   reduce using rule 26 (@4)

    @4  go to state 363


state 913

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' . @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 79 (@25)

    @25  go to state 926


state 914

  207 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 927


state 915

  208 trait_alias: trait_method_reference "as (T_AS)" member_modifier .
  210 trait_modifiers: member_modifier .

    "identifier (T_STRING)"  reduce using rule 210 (trait_modifiers)
    $default                 reduce using rule 208 (trait_alias)


state 916

  201 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list .
  203 trait_reference_list: trait_reference_list . ',' fully_qualified_class_name

    ','  shift, and go to state 928

    $default  reduce using rule 201 (trait_precedence)


state 917

  202 trait_reference_list: fully_qualified_class_name .

    $default  reduce using rule 202 (trait_reference_list)


state 918

  206 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 206 (trait_method_reference_fully_qualified)


state 919

  226 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 929
    static_class_constant  go to state 467


state 920

  189 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' . parameter_list ')' method_body

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 930
    non_empty_parameter_list    go to state 603
    optional_class_type         go to state 604
    fully_qualified_class_name  go to state 605


state 921

  325 lexical_var_list: lexical_var_list ',' '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 325 (lexical_var_list)


state 922

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' . ':' @35 inner_statement_list

    ':'  shift, and go to state 931


state 923

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 932
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 924

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  122 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "endfor (T_ENDFOR)"  shift, and go to state 933

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 925

  124 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 124 (foreach_statement)


state 926

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 . '{' inner_statement_list '}' @26 additional_catches

    '{'  shift, and go to state 934


state 927

  207 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)" .

    $default  reduce using rule 207 (trait_alias)


state 928

  203 trait_reference_list: trait_reference_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 935


state 929

  226 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 226 (class_variable_declaration)


state 930

  189 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list . ')' method_body

    ')'  shift, and go to state 936


state 931

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' . @35 inner_statement_list

    $default  reduce using rule 146 (@35)

    @35  go to state 937


state 932

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 statement .

    $default  reduce using rule 144 (elseif_list)


state 933

  122 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 938


state 934

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' . inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 939


state 935

  203 trait_reference_list: trait_reference_list ',' fully_qualified_class_name .

    $default  reduce using rule 203 (trait_reference_list)


state 936

  189 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' . method_body

    ';'  shift, and go to state 940
    '{'  shift, and go to state 941

    method_body  go to state 942


state 937

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 943


state 938

  122 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 122 (for_statement)


state 939

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list . '}' @26 additional_catches

    '}'  shift, and go to state 944

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 940

  211 method_body: ';' .

    $default  reduce using rule 211 (method_body)


state 941

  212 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 945


state 942

  189 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body .

    $default  reduce using rule 189 (class_statement)


state 943

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list .

    "elseif (T_ELSEIF)"  reduce using rule 147 (new_elseif_list)
    "else (T_ELSE)"      reduce using rule 147 (new_elseif_list)
    "endif (T_ENDIF)"    reduce using rule 147 (new_elseif_list)
    $default             reduce using rule 26 (@4)

    @4  go to state 363


state 944

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' . @26 additional_catches

    $default  reduce using rule 80 (@26)

    @26  go to state 946


state 945

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  212 method_body: '{' inner_statement_list . '}'

    '}'  shift, and go to state 947

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 946

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 . additional_catches

    "catch (T_CATCH)"  shift, and go to state 948

    $default  reduce using rule 85 (additional_catches)

    additional_catches            go to state 949
    non_empty_additional_catches  go to state 950
    additional_catch              go to state 951


state 947

  212 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 212 (method_body)


state 948

   90 additional_catch: "catch (T_CATCH)" . '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    '('  shift, and go to state 952


state 949

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches .

    $default  reduce using rule 81 (unticked_statement)


state 950

   84 additional_catches: non_empty_additional_catches .
   87 non_empty_additional_catches: non_empty_additional_catches . additional_catch

    "catch (T_CATCH)"  shift, and go to state 948

    $default  reduce using rule 84 (additional_catches)

    additional_catch  go to state 953


state 951

   86 non_empty_additional_catches: additional_catch .

    $default  reduce using rule 86 (non_empty_additional_catches)


state 952

   90 additional_catch: "catch (T_CATCH)" '(' . fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 954


state 953

   87 non_empty_additional_catches: non_empty_additional_catches additional_catch .

    $default  reduce using rule 87 (non_empty_additional_catches)


state 954

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name . @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    $default  reduce using rule 88 (@27)

    @27  go to state 955


state 955

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 . "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 956


state 956

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" . ')' @28 '{' inner_statement_list '}'

    ')'  shift, and go to state 957


state 957

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' . @28 '{' inner_statement_list '}'

    $default  reduce using rule 89 (@28)

    @28  go to state 958


state 958

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 . '{' inner_statement_list '}'

    '{'  shift, and go to state 959


state 959

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 960


state 960

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list . '}'

    '}'  shift, and go to state 961

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 961

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}' .

    $default  reduce using rule 90 (additional_catch)
