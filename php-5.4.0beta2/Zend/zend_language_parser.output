Terminals which are not used

   T_CHARACTER
   T_BAD_CHARACTER
   "comment (T_COMMENT)"
   "doc comment (T_DOC_COMMENT)"
   "open tag (T_OPEN_TAG)"
   "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
   "close tag (T_CLOSE_TAG)"
   "whitespace (T_WHITESPACE)"


State 758 conflicts: 2 shift/reduce


Grammar

    0 $accept: start "end of file"

    1 start: top_statement_list

    2 @1: /* empty */

    3 top_statement_list: top_statement_list @1 top_statement
    4                   | /* empty */

    5 namespace_name: "identifier (T_STRING)"
    6               | namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"

    7 top_statement: statement
    8              | function_declaration_statement
    9              | class_declaration_statement
   10              | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'
   11              | "namespace (T_NAMESPACE)" namespace_name ';'

   12 @2: /* empty */

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list '}'

   14 @3: /* empty */

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list '}'
   16              | "use (T_USE)" use_declarations ';'
   17              | constant_declaration ';'

   18 use_declarations: use_declarations ',' use_declaration
   19                 | use_declaration

   20 use_declaration: namespace_name
   21                | namespace_name "as (T_AS)" "identifier (T_STRING)"
   22                | "\\ (T_NS_SEPARATOR)" namespace_name
   23                | "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)"

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
   25                     | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

   26 @4: /* empty */

   27 inner_statement_list: inner_statement_list @4 inner_statement
   28                     | /* empty */

   29 inner_statement: statement
   30                | function_declaration_statement
   31                | class_declaration_statement
   32                | "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';'

   33 statement: unticked_statement
   34          | "identifier (T_STRING)" ':'

   35 unticked_statement: '{' inner_statement_list '}'

   36 @5: /* empty */

   37 @6: /* empty */

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list else_single

   39 @7: /* empty */

   40 @8: /* empty */

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

   42 @9: /* empty */

   43 @10: /* empty */

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 while_statement

   45 @11: /* empty */

   46 @12: /* empty */

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' ';'

   48 @13: /* empty */

   49 @14: /* empty */

   50 @15: /* empty */

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

   52 @16: /* empty */

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 switch_case_list
   54                   | "break (T_BREAK)" ';'
   55                   | "break (T_BREAK)" expr ';'
   56                   | "continue (T_CONTINUE)" ';'
   57                   | "continue (T_CONTINUE)" expr ';'
   58                   | "return (T_RETURN)" ';'
   59                   | "return (T_RETURN)" expr_without_variable ';'
   60                   | "return (T_RETURN)" variable ';'
   61                   | "global (T_GLOBAL)" global_var_list ';'
   62                   | "static (T_STATIC)" static_var_list ';'
   63                   | "echo (T_ECHO)" echo_expr_list ';'
   64                   | T_INLINE_HTML
   65                   | expr ';'
   66                   | "unset (T_UNSET)" '(' unset_variables ')' ';'

   67 @17: /* empty */

   68 @18: /* empty */

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement

   70 @19: /* empty */

   71 @20: /* empty */

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

   73 @21: /* empty */

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' declare_statement
   75                   | ';'

   76 @22: /* empty */

   77 @23: /* empty */

   78 @24: /* empty */

   79 @25: /* empty */

   80 @26: /* empty */

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches
   82                   | "throw (T_THROW)" expr ';'
   83                   | "goto (T_GOTO)" "identifier (T_STRING)" ';'

   84 additional_catches: non_empty_additional_catches
   85                   | /* empty */

   86 non_empty_additional_catches: additional_catch
   87                             | non_empty_additional_catches additional_catch

   88 @27: /* empty */

   89 @28: /* empty */

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

   91 unset_variables: unset_variable
   92                | unset_variables ',' unset_variable

   93 unset_variable: variable

   94 function_declaration_statement: unticked_function_declaration_statement

   95 class_declaration_statement: unticked_class_declaration_statement

   96 is_reference: /* empty */
   97             | '&'

   98 @29: /* empty */

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'

  100 @30: /* empty */

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}'

  102 @31: /* empty */

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}'

  104 class_entry_type: "class (T_CLASS)"
  105                 | "abstract (T_ABSTRACT)" "class (T_CLASS)"
  106                 | "trait (T_TRAIT)"
  107                 | "final (T_FINAL)" "class (T_CLASS)"

  108 extends_from: /* empty */
  109             | "extends (T_EXTENDS)" fully_qualified_class_name

  110 interface_entry: "interface (T_INTERFACE)"

  111 interface_extends_list: /* empty */
  112                       | "extends (T_EXTENDS)" interface_list

  113 implements_list: /* empty */
  114                | "implements (T_IMPLEMENTS)" interface_list

  115 interface_list: fully_qualified_class_name
  116               | interface_list ',' fully_qualified_class_name

  117 foreach_optional_arg: /* empty */
  118                     | "=> (T_DOUBLE_ARROW)" foreach_variable

  119 foreach_variable: variable
  120                 | '&' variable

  121 for_statement: statement
  122              | ':' inner_statement_list "endfor (T_ENDFOR)" ';'

  123 foreach_statement: statement
  124                  | ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';'

  125 declare_statement: statement
  126                  | ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

  127 declare_list: "identifier (T_STRING)" '=' static_scalar
  128             | declare_list ',' "identifier (T_STRING)" '=' static_scalar

  129 switch_case_list: '{' case_list '}'
  130                 | '{' ';' case_list '}'
  131                 | ':' case_list "endswitch (T_ENDSWITCH)" ';'
  132                 | ':' ';' case_list "endswitch (T_ENDSWITCH)" ';'

  133 case_list: /* empty */

  134 @32: /* empty */

  135 case_list: case_list "case (T_CASE)" expr case_separator @32 inner_statement_list

  136 @33: /* empty */

  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 inner_statement_list

  138 case_separator: ':'
  139               | ';'

  140 while_statement: statement
  141                | ':' inner_statement_list "endwhile (T_ENDWHILE)" ';'

  142 elseif_list: /* empty */

  143 @34: /* empty */

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 statement

  145 new_elseif_list: /* empty */

  146 @35: /* empty */

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list

  148 else_single: /* empty */
  149            | "else (T_ELSE)" statement

  150 new_else_single: /* empty */
  151                | "else (T_ELSE)" ':' inner_statement_list

  152 parameter_list: non_empty_parameter_list
  153               | /* empty */

  154 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)"
  155                         | optional_class_type '&' "variable (T_VARIABLE)"
  156                         | optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  157                         | optional_class_type "variable (T_VARIABLE)" '=' static_scalar
  158                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

  162 optional_class_type: /* empty */
  163                    | "array (T_ARRAY)"
  164                    | "callable (T_CALLABLE)"
  165                    | fully_qualified_class_name

  166 function_call_parameter_list: non_empty_function_call_parameter_list
  167                             | /* empty */

  168 non_empty_function_call_parameter_list: expr_without_variable
  169                                       | variable
  170                                       | '&' w_variable
  171                                       | non_empty_function_call_parameter_list ',' expr_without_variable
  172                                       | non_empty_function_call_parameter_list ',' variable
  173                                       | non_empty_function_call_parameter_list ',' '&' w_variable

  174 global_var_list: global_var_list ',' global_var
  175                | global_var

  176 global_var: "variable (T_VARIABLE)"
  177           | '$' r_variable
  178           | '$' '{' expr '}'

  179 static_var_list: static_var_list ',' "variable (T_VARIABLE)"
  180                | static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar
  181                | "variable (T_VARIABLE)"
  182                | "variable (T_VARIABLE)" '=' static_scalar

  183 class_statement_list: class_statement_list class_statement
  184                     | /* empty */

  185 @36: /* empty */

  186 class_statement: variable_modifiers @36 class_variable_declaration ';'
  187                | class_constant_declaration ';'
  188                | trait_use_statement

  189 @37: /* empty */

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

  191 trait_use_statement: "use (T_USE)" trait_list trait_adaptations

  192 trait_list: fully_qualified_class_name
  193           | trait_list ',' fully_qualified_class_name

  194 trait_adaptations: ';'
  195                  | '{' trait_adaptation_list '}'

  196 trait_adaptation_list: /* empty */
  197                      | non_empty_trait_adaptation_list

  198 non_empty_trait_adaptation_list: trait_adaptation_statement
  199                                | non_empty_trait_adaptation_list trait_adaptation_statement

  200 trait_adaptation_statement: trait_precedence ';'
  201                           | trait_alias ';'

  202 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list

  203 trait_reference_list: fully_qualified_class_name
  204                     | trait_reference_list ',' fully_qualified_class_name

  205 trait_method_reference: "identifier (T_STRING)"
  206                       | trait_method_reference_fully_qualified

  207 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  208 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  209            | trait_method_reference "as (T_AS)" member_modifier

  210 trait_modifiers: /* empty */
  211                | member_modifier

  212 method_body: ';'
  213            | '{' inner_statement_list '}'

  214 variable_modifiers: non_empty_member_modifiers
  215                   | "var (T_VAR)"

  216 method_modifiers: /* empty */
  217                 | non_empty_member_modifiers

  218 non_empty_member_modifiers: member_modifier
  219                           | non_empty_member_modifiers member_modifier

  220 member_modifier: "public (T_PUBLIC)"
  221                | "protected (T_PROTECTED)"
  222                | "private (T_PRIVATE)"
  223                | "static (T_STATIC)"
  224                | "abstract (T_ABSTRACT)"
  225                | "final (T_FINAL)"

  226 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)"
  227                           | class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar
  228                           | "variable (T_VARIABLE)"
  229                           | "variable (T_VARIABLE)" '=' static_scalar

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar
  231                           | "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar

  232 echo_expr_list: echo_expr_list ',' expr
  233               | expr

  234 for_expr: /* empty */
  235         | non_empty_for_expr

  236 @38: /* empty */

  237 non_empty_for_expr: non_empty_for_expr ',' @38 expr
  238                   | expr

  239 @39: /* empty */

  240 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' '=' expr
  241                      | variable '=' expr
  242                      | variable '=' '&' variable

  243 @40: /* empty */

  244 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments

  245 @41: /* empty */

  246 expr_without_variable: "new (T_NEW)" class_name_reference @41 ctor_arguments
  247                      | "clone (T_CLONE)" expr
  248                      | variable "+= (T_PLUS_EQUAL)" expr
  249                      | variable "-= (T_MINUS_EQUAL)" expr
  250                      | variable "*= (T_MUL_EQUAL)" expr
  251                      | variable "/= (T_DIV_EQUAL)" expr
  252                      | variable ".= (T_CONCAT_EQUAL)" expr
  253                      | variable "%= (T_MOD_EQUAL)" expr
  254                      | variable "&= (T_AND_EQUAL)" expr
  255                      | variable "|= (T_OR_EQUAL)" expr
  256                      | variable "^= (T_XOR_EQUAL)" expr
  257                      | variable "<<= (T_SL_EQUAL)" expr
  258                      | variable ">>= (T_SR_EQUAL)" expr
  259                      | rw_variable "++ (T_INC)"
  260                      | "++ (T_INC)" rw_variable
  261                      | rw_variable "-- (T_DEC)"
  262                      | "-- (T_DEC)" rw_variable

  263 @42: /* empty */

  264 expr_without_variable: expr "|| (T_BOOLEAN_OR)" @42 expr

  265 @43: /* empty */

  266 expr_without_variable: expr "&& (T_BOOLEAN_AND)" @43 expr

  267 @44: /* empty */

  268 expr_without_variable: expr "or (T_LOGICAL_OR)" @44 expr

  269 @45: /* empty */

  270 expr_without_variable: expr "and (T_LOGICAL_AND)" @45 expr
  271                      | expr "xor (T_LOGICAL_XOR)" expr
  272                      | expr '|' expr
  273                      | expr '&' expr
  274                      | expr '^' expr
  275                      | expr '.' expr
  276                      | expr '+' expr
  277                      | expr '-' expr
  278                      | expr '*' expr
  279                      | expr '/' expr
  280                      | expr '%' expr
  281                      | expr "<< (T_SL)" expr
  282                      | expr ">> (T_SR)" expr
  283                      | '+' expr
  284                      | '-' expr
  285                      | '!' expr
  286                      | '~' expr
  287                      | expr "=== (T_IS_IDENTICAL)" expr
  288                      | expr "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr "== (T_IS_EQUAL)" expr
  290                      | expr "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr '<' expr
  292                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr '>' expr
  294                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr "instanceof (T_INSTANCEOF)" class_name_reference
  296                      | '(' expr ')'

  297 @46: /* empty */

  298 @47: /* empty */

  299 expr_without_variable: expr '?' @46 expr ':' @47 expr

  300 @48: /* empty */

  301 expr_without_variable: expr '?' ':' @48 expr
  302                      | internal_functions_in_yacc
  303                      | "(int) (T_INT_CAST)" expr
  304                      | "(double) (T_DOUBLE_CAST)" expr
  305                      | "(string) (T_STRING_CAST)" expr
  306                      | "(array) (T_ARRAY_CAST)" expr
  307                      | "(object) (T_OBJECT_CAST)" expr
  308                      | "(bool) (T_BOOL_CAST)" expr
  309                      | "(unset) (T_UNSET_CAST)" expr
  310                      | "exit (T_EXIT)" exit_expr

  311 @49: /* empty */

  312 expr_without_variable: '@' @49 expr
  313                      | scalar
  314                      | "array (T_ARRAY)" '(' array_pair_list ')'
  315                      | '[' array_pair_list ']'
  316                      | '`' backticks_expr '`'
  317                      | "print (T_PRINT)" expr

  318 @50: /* empty */

  319 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

  320 @51: /* empty */

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

  322 function: "function (T_FUNCTION)"

  323 lexical_vars: /* empty */
  324             | "use (T_USE)" '(' lexical_var_list ')'

  325 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)"
  326                 | lexical_var_list ',' '&' "variable (T_VARIABLE)"
  327                 | "variable (T_VARIABLE)"
  328                 | '&' "variable (T_VARIABLE)"

  329 @52: /* empty */

  330 function_call: namespace_name '(' @52 function_call_parameter_list ')'

  331 @53: /* empty */

  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'

  333 @54: /* empty */

  334 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 function_call_parameter_list ')'

  335 @55: /* empty */

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')'

  337 @56: /* empty */

  338 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')'

  339 @57: /* empty */

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')'

  341 @58: /* empty */

  342 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')'

  343 @59: /* empty */

  344 function_call: variable_without_objects '(' @59 function_call_parameter_list ')'

  345 class_name: "static (T_STATIC)"
  346           | namespace_name
  347           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  348           | "\\ (T_NS_SEPARATOR)" namespace_name

  349 fully_qualified_class_name: namespace_name
  350                           | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  351                           | "\\ (T_NS_SEPARATOR)" namespace_name

  352 class_name_reference: class_name
  353                     | dynamic_class_name_reference

  354 @60: /* empty */

  355 @61: /* empty */

  356 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property @61 dynamic_class_name_variable_properties
  357                             | base_variable

  358 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property
  359                                       | /* empty */

  360 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property

  361 exit_expr: /* empty */
  362          | '(' ')'
  363          | '(' expr ')'

  364 backticks_expr: /* empty */
  365               | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  366               | encaps_list

  367 ctor_arguments: /* empty */
  368               | '(' function_call_parameter_list ')'

  369 common_scalar: "integer number (T_LNUMBER)"
  370              | "floating-point number (T_DNUMBER)"
  371              | "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
  372              | "__LINE__ (T_LINE)"
  373              | "__FILE__ (T_FILE)"
  374              | "__DIR__ (T_DIR)"
  375              | "__CLASS__ (T_CLASS_C)"
  376              | "__TRAIT__ (T_TRAIT_C)"
  377              | "__METHOD__ (T_METHOD_C)"
  378              | "__FUNCTION__ (T_FUNC_C)"
  379              | "__NAMESPACE__ (T_NS_C)"
  380              | "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  381              | "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)"

  382 static_scalar: common_scalar
  383              | namespace_name
  384              | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  385              | "\\ (T_NS_SEPARATOR)" namespace_name
  386              | '+' static_scalar
  387              | '-' static_scalar
  388              | "array (T_ARRAY)" '(' static_array_pair_list ')'
  389              | '[' static_array_pair_list ']'
  390              | static_class_constant

  391 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

  392 scalar: "variable name (T_STRING_VARNAME)"
  393       | class_constant
  394       | namespace_name
  395       | "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name
  396       | "\\ (T_NS_SEPARATOR)" namespace_name
  397       | common_scalar
  398       | '"' encaps_list '"'
  399       | "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)"

  400 static_array_pair_list: /* empty */
  401                       | non_empty_static_array_pair_list possible_comma

  402 possible_comma: /* empty */
  403               | ','

  404 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  405                                 | non_empty_static_array_pair_list ',' static_scalar
  406                                 | static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  407                                 | static_scalar

  408 expr: r_variable
  409     | expr_without_variable

  410 r_variable: variable

  411 w_variable: variable

  412 rw_variable: variable

  413 @62: /* empty */

  414 @63: /* empty */

  415 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not variable_properties
  416         | base_variable_with_function_calls

  417 variable_properties: variable_properties variable_property
  418                    | /* empty */

  419 @64: /* empty */

  420 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @64 method_or_not

  421 array_method_dereference: array_method_dereference '[' dim_offset ']'
  422                         | method '[' dim_offset ']'

  423 @65: /* empty */

  424 method: '(' @65 function_call_parameter_list ')'

  425 method_or_not: method
  426              | array_method_dereference
  427              | /* empty */

  428 variable_without_objects: reference_variable
  429                         | simple_indirect_reference reference_variable

  430 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  431              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

  432 variable_class_name: reference_variable

  433 array_function_dereference: array_function_dereference '[' dim_offset ']'

  434 @66: /* empty */

  435 array_function_dereference: function_call @66 '[' dim_offset ']'

  436 base_variable_with_function_calls: base_variable
  437                                  | array_function_dereference
  438                                  | function_call

  439 base_variable: reference_variable
  440              | simple_indirect_reference reference_variable
  441              | static_member

  442 reference_variable: reference_variable '[' dim_offset ']'
  443                   | reference_variable '{' expr '}'
  444                   | compound_variable

  445 compound_variable: "variable (T_VARIABLE)"
  446                  | '$' '{' expr '}'

  447 dim_offset: /* empty */
  448           | expr

  449 object_property: object_dim_list

  450 @67: /* empty */

  451 object_property: variable_without_objects @67

  452 object_dim_list: object_dim_list '[' dim_offset ']'
  453                | object_dim_list '{' expr '}'
  454                | variable_name

  455 variable_name: "identifier (T_STRING)"
  456              | '{' expr '}'

  457 simple_indirect_reference: '$'
  458                          | simple_indirect_reference '$'

  459 assignment_list: assignment_list ',' assignment_list_element
  460                | assignment_list_element

  461 assignment_list_element: variable

  462 @68: /* empty */

  463 assignment_list_element: "list (T_LIST)" '(' @68 assignment_list ')'
  464                        | /* empty */

  465 array_pair_list: /* empty */
  466                | non_empty_array_pair_list possible_comma

  467 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr
  468                          | non_empty_array_pair_list ',' expr
  469                          | expr "=> (T_DOUBLE_ARROW)" expr
  470                          | expr
  471                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  472                          | non_empty_array_pair_list ',' '&' w_variable
  473                          | expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  474                          | '&' w_variable

  475 encaps_list: encaps_list encaps_var
  476            | encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
  477            | encaps_var
  478            | "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var

  479 encaps_var: "variable (T_VARIABLE)"

  480 @69: /* empty */

  481 encaps_var: "variable (T_VARIABLE)" '[' @69 encaps_var_offset ']'
  482           | "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"
  483           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}'
  484           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}'
  485           | "{$ (T_CURLY_OPEN)" variable '}'

  486 encaps_var_offset: "identifier (T_STRING)"
  487                  | "number (T_NUM_STRING)"
  488                  | "variable (T_VARIABLE)"

  489 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')'
  490                           | "empty (T_EMPTY)" '(' variable ')'
  491                           | "include (T_INCLUDE)" expr
  492                           | "include_once (T_INCLUDE_ONCE)" expr
  493                           | "eval (T_EVAL)" '(' expr ')'
  494                           | "require (T_REQUIRE)" expr
  495                           | "require_once (T_REQUIRE_ONCE)" expr

  496 isset_variables: variable

  497 @70: /* empty */

  498 isset_variables: isset_variables ',' @70 variable

  499 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"
  500               | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"


Terminals, with rules where they appear

"end of file" (0) 0
'!' (33) 285
'"' (34) 398
'$' (36) 177 178 446 457 458
'%' (37) 280
'&' (38) 97 120 155 156 159 160 170 173 242 244 273 326 328 471 472
    473 474
'(' (40) 10 32 38 41 44 47 51 53 66 69 72 74 81 90 99 144 147 190 240
    296 314 319 321 324 330 332 334 336 338 340 342 344 362 363 368
    388 424 463 489 490 493
')' (41) 10 32 38 41 44 47 51 53 66 69 72 74 81 90 99 144 147 190 240
    296 314 319 321 324 330 332 334 336 338 340 342 344 362 363 368
    388 424 463 489 490 493
'*' (42) 278
'+' (43) 276 283 386
',' (44) 18 24 92 116 128 158 159 160 161 171 172 173 174 179 180 193
    204 226 227 230 232 237 325 326 403 404 405 459 467 468 471 472
    498
'-' (45) 277 284 387
'.' (46) 275
'/' (47) 279
':' (58) 34 41 122 124 126 131 132 138 141 147 151 299 301
';' (59) 10 11 16 17 32 41 47 51 54 55 56 57 58 59 60 61 62 63 65 66
    75 82 83 122 124 126 130 131 132 139 141 186 187 194 200 201 212
'<' (60) 291
'=' (61) 24 25 127 128 156 157 160 161 180 182 227 229 230 231 240
    241 242 244
'>' (62) 293
'?' (63) 299 301
'@' (64) 312
'[' (91) 315 389 421 422 433 435 442 452 481 484
']' (93) 315 389 421 422 433 435 442 452 481 484
'^' (94) 274
'`' (96) 316
'{' (123) 13 15 35 81 90 99 101 103 129 130 178 195 213 319 321 443
    446 453 456
'|' (124) 272
'}' (125) 13 15 35 81 90 99 101 103 129 130 178 195 213 319 321 443
    446 453 456 483 484 485
'~' (126) 286
error (256)
"require_once (T_REQUIRE_ONCE)" (258) 495
"require (T_REQUIRE)" (259) 494
"eval (T_EVAL)" (260) 493
"include_once (T_INCLUDE_ONCE)" (261) 492
"include (T_INCLUDE)" (262) 491
"or (T_LOGICAL_OR)" (263) 268
"xor (T_LOGICAL_XOR)" (264) 271
"and (T_LOGICAL_AND)" (265) 270
"print (T_PRINT)" (266) 317
">>= (T_SR_EQUAL)" (267) 258
"<<= (T_SL_EQUAL)" (268) 257
"^= (T_XOR_EQUAL)" (269) 256
"|= (T_OR_EQUAL)" (270) 255
"&= (T_AND_EQUAL)" (271) 254
"%= (T_MOD_EQUAL)" (272) 253
".= (T_CONCAT_EQUAL)" (273) 252
"/= (T_DIV_EQUAL)" (274) 251
"*= (T_MUL_EQUAL)" (275) 250
"-= (T_MINUS_EQUAL)" (276) 249
"+= (T_PLUS_EQUAL)" (277) 248
"|| (T_BOOLEAN_OR)" (278) 264
"&& (T_BOOLEAN_AND)" (279) 266
"!== (T_IS_NOT_IDENTICAL)" (280) 288
"=== (T_IS_IDENTICAL)" (281) 287
"!= (T_IS_NOT_EQUAL)" (282) 290
"== (T_IS_EQUAL)" (283) 289
">= (T_IS_GREATER_OR_EQUAL)" (284) 294
"<= (T_IS_SMALLER_OR_EQUAL)" (285) 292
">> (T_SR)" (286) 282
"<< (T_SL)" (287) 281
"instanceof (T_INSTANCEOF)" (288) 295
"(unset) (T_UNSET_CAST)" (289) 309
"(bool) (T_BOOL_CAST)" (290) 308
"(object) (T_OBJECT_CAST)" (291) 307
"(array) (T_ARRAY_CAST)" (292) 306
"(string) (T_STRING_CAST)" (293) 305
"(double) (T_DOUBLE_CAST)" (294) 304
"(int) (T_INT_CAST)" (295) 303
"-- (T_DEC)" (296) 261 262
"++ (T_INC)" (297) 259 260
"clone (T_CLONE)" (298) 247
"new (T_NEW)" (299) 244 246
"exit (T_EXIT)" (300) 310
"if (T_IF)" (301) 38 41
"elseif (T_ELSEIF)" (302) 144 147
"else (T_ELSE)" (303) 149 151
"endif (T_ENDIF)" (304) 41
"integer number (T_LNUMBER)" (305) 369
"floating-point number (T_DNUMBER)" (306) 370
"identifier (T_STRING)" (307) 5 6 21 23 24 25 34 83 99 101 103 127
    128 190 205 207 208 230 231 391 455 482 486 499 500
"variable name (T_STRING_VARNAME)" (308) 392 484
"variable (T_VARIABLE)" (309) 81 90 154 155 156 157 158 159 160 161
    176 179 180 181 182 226 227 228 229 325 326 327 328 445 479 481
    482 488
"number (T_NUM_STRING)" (310) 487
T_INLINE_HTML (311) 64
T_CHARACTER (312)
T_BAD_CHARACTER (313)
"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
    (314) 365 380 476 478
"quoted-string (T_CONSTANT_ENCAPSED_STRING)" (315) 371
"echo (T_ECHO)" (316) 63
"do (T_DO)" (317) 47
"while (T_WHILE)" (318) 44 47
"endwhile (T_ENDWHILE)" (319) 141
"for (T_FOR)" (320) 51
"endfor (T_ENDFOR)" (321) 122
"foreach (T_FOREACH)" (322) 69 72
"endforeach (T_ENDFOREACH)" (323) 124
"declare (T_DECLARE)" (324) 74
"enddeclare (T_ENDDECLARE)" (325) 126
"as (T_AS)" (326) 21 23 69 72 208 209
"switch (T_SWITCH)" (327) 53
"endswitch (T_ENDSWITCH)" (328) 131 132
"case (T_CASE)" (329) 135
"default (T_DEFAULT)" (330) 137
"break (T_BREAK)" (331) 54 55
"continue (T_CONTINUE)" (332) 56 57
"goto (T_GOTO)" (333) 83
"function (T_FUNCTION)" (334) 322
"const (T_CONST)" (335) 25 231
"return (T_RETURN)" (336) 58 59 60
"try (T_TRY)" (337) 81
"catch (T_CATCH)" (338) 81 90
"throw (T_THROW)" (339) 82
"use (T_USE)" (340) 16 191 324
"insteadof (T_INSTEADOF)" (341) 202
"global (T_GLOBAL)" (342) 61
"public (T_PUBLIC)" (343) 220
"protected (T_PROTECTED)" (344) 221
"private (T_PRIVATE)" (345) 222
"final (T_FINAL)" (346) 107 225
"abstract (T_ABSTRACT)" (347) 105 224
"static (T_STATIC)" (348) 62 223 321 345
"var (T_VAR)" (349) 215
"unset (T_UNSET)" (350) 66
"isset (T_ISSET)" (351) 489
"empty (T_EMPTY)" (352) 490
"__halt_compiler (T_HALT_COMPILER)" (353) 10 32
"class (T_CLASS)" (354) 104 105 107
"trait (T_TRAIT)" (355) 106
"interface (T_INTERFACE)" (356) 110
"extends (T_EXTENDS)" (357) 109 112
"implements (T_IMPLEMENTS)" (358) 114
"-> (T_OBJECT_OPERATOR)" (359) 356 360 415 420 482
"=> (T_DOUBLE_ARROW)" (360) 118 404 406 467 469 471 473
"list (T_LIST)" (361) 240 463
"array (T_ARRAY)" (362) 163 314 388
"callable (T_CALLABLE)" (363) 164
"__CLASS__ (T_CLASS_C)" (364) 375
"__TRAIT__ (T_TRAIT_C)" (365) 376
"__METHOD__ (T_METHOD_C)" (366) 377
"__FUNCTION__ (T_FUNC_C)" (367) 378
"__LINE__ (T_LINE)" (368) 372
"__FILE__ (T_FILE)" (369) 373
"comment (T_COMMENT)" (370)
"doc comment (T_DOC_COMMENT)" (371)
"open tag (T_OPEN_TAG)" (372)
"open tag with echo (T_OPEN_TAG_WITH_ECHO)" (373)
"close tag (T_CLOSE_TAG)" (374)
"whitespace (T_WHITESPACE)" (375)
"heredoc start (T_START_HEREDOC)" (376) 380 381 399
"heredoc end (T_END_HEREDOC)" (377) 380 381 399
"${ (T_DOLLAR_OPEN_CURLY_BRACES)" (378) 483 484
"{$ (T_CURLY_OPEN)" (379) 485
":: (T_PAAMAYIM_NEKUDOTAYIM)" (380) 207 336 338 340 342 391 430 431
    499 500
"namespace (T_NAMESPACE)" (381) 11 13 15 332 347 350 384 395
"__NAMESPACE__ (T_NS_C)" (382) 379
"__DIR__ (T_DIR)" (383) 374
"\\ (T_NS_SEPARATOR)" (384) 6 22 23 332 334 347 348 350 351 384 385
    395 396


Nonterminals, with rules where they appear

$accept (158)
    on left: 0
start (159)
    on left: 1, on right: 0
top_statement_list (160)
    on left: 3 4, on right: 1 3 13 15
@1 (161)
    on left: 2, on right: 3
namespace_name (162)
    on left: 5 6, on right: 6 11 13 20 21 22 23 330 332 334 346 347
    348 349 350 351 383 384 385 394 395 396
top_statement (163)
    on left: 7 8 9 10 11 13 15 16 17, on right: 3
@2 (164)
    on left: 12, on right: 13
@3 (165)
    on left: 14, on right: 15
use_declarations (166)
    on left: 18 19, on right: 16 18
use_declaration (167)
    on left: 20 21 22 23, on right: 18 19
constant_declaration (168)
    on left: 24 25, on right: 17 24
inner_statement_list (169)
    on left: 27 28, on right: 27 35 41 81 90 99 122 124 126 135 137
    141 147 151 213 319 321
@4 (170)
    on left: 26, on right: 27
inner_statement (171)
    on left: 29 30 31 32, on right: 27
statement (172)
    on left: 33 34, on right: 7 29 38 47 121 123 125 140 144 149
unticked_statement (173)
    on left: 35 38 41 44 47 51 53 54 55 56 57 58 59 60 61 62 63 64
    65 66 69 72 74 75 81 82 83, on right: 33
@5 (174)
    on left: 36, on right: 38
@6 (175)
    on left: 37, on right: 38
@7 (176)
    on left: 39, on right: 41
@8 (177)
    on left: 40, on right: 41
@9 (178)
    on left: 42, on right: 44
@10 (179)
    on left: 43, on right: 44
@11 (180)
    on left: 45, on right: 47
@12 (181)
    on left: 46, on right: 47
@13 (182)
    on left: 48, on right: 51
@14 (183)
    on left: 49, on right: 51
@15 (184)
    on left: 50, on right: 51
@16 (185)
    on left: 52, on right: 53
@17 (186)
    on left: 67, on right: 69
@18 (187)
    on left: 68, on right: 69
@19 (188)
    on left: 70, on right: 72
@20 (189)
    on left: 71, on right: 72
@21 (190)
    on left: 73, on right: 74
@22 (191)
    on left: 76, on right: 81
@23 (192)
    on left: 77, on right: 81
@24 (193)
    on left: 78, on right: 81
@25 (194)
    on left: 79, on right: 81
@26 (195)
    on left: 80, on right: 81
additional_catches (196)
    on left: 84 85, on right: 81
non_empty_additional_catches (197)
    on left: 86 87, on right: 84 87
additional_catch (198)
    on left: 90, on right: 86 87
@27 (199)
    on left: 88, on right: 90
@28 (200)
    on left: 89, on right: 90
unset_variables (201)
    on left: 91 92, on right: 66 92
unset_variable (202)
    on left: 93, on right: 91 92
function_declaration_statement (203)
    on left: 94, on right: 8 30
class_declaration_statement (204)
    on left: 95, on right: 9 31
is_reference (205)
    on left: 96 97, on right: 99 190 319 321
unticked_function_declaration_statement (206)
    on left: 99, on right: 94
@29 (207)
    on left: 98, on right: 99
unticked_class_declaration_statement (208)
    on left: 101 103, on right: 95
@30 (209)
    on left: 100, on right: 101
@31 (210)
    on left: 102, on right: 103
class_entry_type (211)
    on left: 104 105 106 107, on right: 101
extends_from (212)
    on left: 108 109, on right: 101
interface_entry (213)
    on left: 110, on right: 103
interface_extends_list (214)
    on left: 111 112, on right: 103
implements_list (215)
    on left: 113 114, on right: 101
interface_list (216)
    on left: 115 116, on right: 112 114 116
foreach_optional_arg (217)
    on left: 117 118, on right: 69 72
foreach_variable (218)
    on left: 119 120, on right: 69 118
for_statement (219)
    on left: 121 122, on right: 51
foreach_statement (220)
    on left: 123 124, on right: 69 72
declare_statement (221)
    on left: 125 126, on right: 74
declare_list (222)
    on left: 127 128, on right: 74 128
switch_case_list (223)
    on left: 129 130 131 132, on right: 53
case_list (224)
    on left: 133 135 137, on right: 129 130 131 132 135 137
@32 (225)
    on left: 134, on right: 135
@33 (226)
    on left: 136, on right: 137
case_separator (227)
    on left: 138 139, on right: 135 137
while_statement (228)
    on left: 140 141, on right: 44
elseif_list (229)
    on left: 142 144, on right: 38 144
@34 (230)
    on left: 143, on right: 144
new_elseif_list (231)
    on left: 145 147, on right: 41 147
@35 (232)
    on left: 146, on right: 147
else_single (233)
    on left: 148 149, on right: 38
new_else_single (234)
    on left: 150 151, on right: 41
parameter_list (235)
    on left: 152 153, on right: 99 190 319 321
non_empty_parameter_list (236)
    on left: 154 155 156 157 158 159 160 161, on right: 152 158 159
    160 161
optional_class_type (237)
    on left: 162 163 164 165, on right: 154 155 156 157 158 159 160
    161
function_call_parameter_list (238)
    on left: 166 167, on right: 330 332 334 336 338 340 342 344 368
    424
non_empty_function_call_parameter_list (239)
    on left: 168 169 170 171 172 173, on right: 166 171 172 173
global_var_list (240)
    on left: 174 175, on right: 61 174
global_var (241)
    on left: 176 177 178, on right: 174 175
static_var_list (242)
    on left: 179 180 181 182, on right: 62 179 180
class_statement_list (243)
    on left: 183 184, on right: 101 103 183
class_statement (244)
    on left: 186 187 188 190, on right: 183
@36 (245)
    on left: 185, on right: 186
@37 (246)
    on left: 189, on right: 190
trait_use_statement (247)
    on left: 191, on right: 188
trait_list (248)
    on left: 192 193, on right: 191 193
trait_adaptations (249)
    on left: 194 195, on right: 191
trait_adaptation_list (250)
    on left: 196 197, on right: 195
non_empty_trait_adaptation_list (251)
    on left: 198 199, on right: 197 199
trait_adaptation_statement (252)
    on left: 200 201, on right: 198 199
trait_precedence (253)
    on left: 202, on right: 200
trait_reference_list (254)
    on left: 203 204, on right: 202 204
trait_method_reference (255)
    on left: 205 206, on right: 208 209
trait_method_reference_fully_qualified (256)
    on left: 207, on right: 202 206
trait_alias (257)
    on left: 208 209, on right: 201
trait_modifiers (258)
    on left: 210 211, on right: 208
method_body (259)
    on left: 212 213, on right: 190
variable_modifiers (260)
    on left: 214 215, on right: 186
method_modifiers (261)
    on left: 216 217, on right: 190
non_empty_member_modifiers (262)
    on left: 218 219, on right: 214 217 219
member_modifier (263)
    on left: 220 221 222 223 224 225, on right: 209 211 218 219
class_variable_declaration (264)
    on left: 226 227 228 229, on right: 186 226 227
class_constant_declaration (265)
    on left: 230 231, on right: 187 230
echo_expr_list (266)
    on left: 232 233, on right: 63 232
for_expr (267)
    on left: 234 235, on right: 51
non_empty_for_expr (268)
    on left: 237 238, on right: 235 237
@38 (269)
    on left: 236, on right: 237
expr_without_variable (270)
    on left: 240 241 242 244 246 247 248 249 250 251 252 253 254 255
    256 257 258 259 260 261 262 264 266 268 270 271 272 273 274 275
    276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291
    292 293 294 295 296 299 301 302 303 304 305 306 307 308 309 310
    312 313 314 315 316 317 319 321, on right: 59 72 168 171 409
@39 (271)
    on left: 239, on right: 240
@40 (272)
    on left: 243, on right: 244
@41 (273)
    on left: 245, on right: 246
@42 (274)
    on left: 263, on right: 264
@43 (275)
    on left: 265, on right: 266
@44 (276)
    on left: 267, on right: 268
@45 (277)
    on left: 269, on right: 270
@46 (278)
    on left: 297, on right: 299
@47 (279)
    on left: 298, on right: 299
@48 (280)
    on left: 300, on right: 301
@49 (281)
    on left: 311, on right: 312
@50 (282)
    on left: 318, on right: 319
@51 (283)
    on left: 320, on right: 321
function (284)
    on left: 322, on right: 99 190 319 321
lexical_vars (285)
    on left: 323 324, on right: 319 321
lexical_var_list (286)
    on left: 325 326 327 328, on right: 324 325 326
function_call (287)
    on left: 330 332 334 336 338 340 342 344, on right: 435 438
@52 (288)
    on left: 329, on right: 330
@53 (289)
    on left: 331, on right: 332
@54 (290)
    on left: 333, on right: 334
@55 (291)
    on left: 335, on right: 336
@56 (292)
    on left: 337, on right: 338
@57 (293)
    on left: 339, on right: 340
@58 (294)
    on left: 341, on right: 342
@59 (295)
    on left: 343, on right: 344
class_name (296)
    on left: 345 346 347 348, on right: 336 338 352 391 430 499
fully_qualified_class_name (297)
    on left: 349 350 351, on right: 81 90 109 115 116 165 192 193 203
    204 207
class_name_reference (298)
    on left: 352 353, on right: 244 246 295
dynamic_class_name_reference (299)
    on left: 356 357, on right: 353
@60 (300)
    on left: 354, on right: 356
@61 (301)
    on left: 355, on right: 356
dynamic_class_name_variable_properties (302)
    on left: 358 359, on right: 356 358
dynamic_class_name_variable_property (303)
    on left: 360, on right: 358
exit_expr (304)
    on left: 361 362 363, on right: 310
backticks_expr (305)
    on left: 364 365 366, on right: 316
ctor_arguments (306)
    on left: 367 368, on right: 244 246
common_scalar (307)
    on left: 369 370 371 372 373 374 375 376 377 378 379 380 381,
    on right: 382 397
static_scalar (308)
    on left: 382 383 384 385 386 387 388 389 390, on right: 24 25 127
    128 156 157 160 161 180 182 227 229 230 231 386 387 404 405 406
    407
static_class_constant (309)
    on left: 391, on right: 390
scalar (310)
    on left: 392 393 394 395 396 397 398 399, on right: 313
static_array_pair_list (311)
    on left: 400 401, on right: 388 389
possible_comma (312)
    on left: 402 403, on right: 401 466
non_empty_static_array_pair_list (313)
    on left: 404 405 406 407, on right: 401 404 405
expr (314)
    on left: 408 409, on right: 38 41 44 47 53 55 57 65 82 135 144
    147 178 232 233 237 238 240 241 247 248 249 250 251 252 253 254
    255 256 257 258 264 266 268 270 271 272 273 274 275 276 277 278
    279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
    295 296 299 301 303 304 305 306 307 308 309 312 317 363 443 446
    448 453 456 467 468 469 470 471 473 483 484 491 492 493 494 495
r_variable (315)
    on left: 410, on right: 177 408
w_variable (316)
    on left: 411, on right: 170 173 471 472 473 474
rw_variable (317)
    on left: 412, on right: 259 260 261 262
variable (318)
    on left: 415 416, on right: 60 69 72 93 119 120 169 172 241 242
    244 248 249 250 251 252 253 254 255 256 257 258 410 411 412 461
    485 490 496 498
@62 (319)
    on left: 413, on right: 415
@63 (320)
    on left: 414, on right: 415
variable_properties (321)
    on left: 417 418, on right: 415 417
variable_property (322)
    on left: 420, on right: 417
@64 (323)
    on left: 419, on right: 420
array_method_dereference (324)
    on left: 421 422, on right: 421 426
method (325)
    on left: 424, on right: 422 425
@65 (326)
    on left: 423, on right: 424
method_or_not (327)
    on left: 425 426 427, on right: 415 420
variable_without_objects (328)
    on left: 428 429, on right: 338 342 344 430 431 451
static_member (329)
    on left: 430 431, on right: 441
variable_class_name (330)
    on left: 432, on right: 340 342 431 500
array_function_dereference (331)
    on left: 433 435, on right: 433 437
@66 (332)
    on left: 434, on right: 435
base_variable_with_function_calls (333)
    on left: 436 437 438, on right: 415 416
base_variable (334)
    on left: 439 440 441, on right: 356 357 436
reference_variable (335)
    on left: 442 443 444, on right: 428 429 432 439 440 442 443
compound_variable (336)
    on left: 445 446, on right: 444
dim_offset (337)
    on left: 447 448, on right: 421 422 433 435 442 452
object_property (338)
    on left: 449 451, on right: 356 360 415 420
@67 (339)
    on left: 450, on right: 451
object_dim_list (340)
    on left: 452 453 454, on right: 449 452 453
variable_name (341)
    on left: 455 456, on right: 336 340 454
simple_indirect_reference (342)
    on left: 457 458, on right: 429 440 458
assignment_list (343)
    on left: 459 460, on right: 240 459 463
assignment_list_element (344)
    on left: 461 463 464, on right: 459 460
@68 (345)
    on left: 462, on right: 463
array_pair_list (346)
    on left: 465 466, on right: 314 315
non_empty_array_pair_list (347)
    on left: 467 468 469 470 471 472 473 474, on right: 466 467 468
    471 472
encaps_list (348)
    on left: 475 476 477 478, on right: 366 398 399 475 476
encaps_var (349)
    on left: 479 481 482 483 484 485, on right: 475 477 478
@69 (350)
    on left: 480, on right: 481
encaps_var_offset (351)
    on left: 486 487 488, on right: 481
internal_functions_in_yacc (352)
    on left: 489 490 491 492 493 494 495, on right: 302
isset_variables (353)
    on left: 496 498, on right: 489 498
@70 (354)
    on left: 497, on right: 498
class_constant (355)
    on left: 499 500, on right: 393


state 0

    0 $accept: . start "end of file"

    $default  reduce using rule 4 (top_statement_list)

    start               go to state 1
    top_statement_list  go to state 2


state 1

    0 $accept: start . "end of file"

    "end of file"  shift, and go to state 3


state 2

    1 start: top_statement_list .
    3 top_statement_list: top_statement_list . @1 top_statement

    "end of file"  reduce using rule 1 (start)
    $default       reduce using rule 2 (@1)

    @1  go to state 4


state 3

    0 $accept: start "end of file" .

    $default  accept


state 4

    3 top_statement_list: top_statement_list @1 . top_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "const (T_CONST)"                             shift, and go to state 48
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "use (T_USE)"                                 shift, and go to state 52
    "global (T_GLOBAL)"                           shift, and go to state 53
    "final (T_FINAL)"                             shift, and go to state 54
    "abstract (T_ABSTRACT)"                       shift, and go to state 55
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 60
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 73
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                           go to state 83
    top_statement                            go to state 84
    constant_declaration                     go to state 85
    statement                                go to state 86
    unticked_statement                       go to state 87
    function_declaration_statement           go to state 88
    class_declaration_statement              go to state 89
    unticked_function_declaration_statement  go to state 90
    unticked_class_declaration_statement     go to state 91
    class_entry_type                         go to state 92
    interface_entry                          go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 5

  495 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 119
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 6

  494 internal_functions_in_yacc: "require (T_REQUIRE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 120
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 7

  493 internal_functions_in_yacc: "eval (T_EVAL)" . '(' expr ')'

    '('  shift, and go to state 121


state 8

  492 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 122
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 9

  491 internal_functions_in_yacc: "include (T_INCLUDE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 123
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 10

  317 expr_without_variable: "print (T_PRINT)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 124
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 11

  283 expr_without_variable: '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 125
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 12

  284 expr_without_variable: '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 126
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 13

  285 expr_without_variable: '!' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 127
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 14

  286 expr_without_variable: '~' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 128
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 15

  312 expr_without_variable: '@' . @49 expr

    $default  reduce using rule 311 (@49)

    @49  go to state 129


state 16

  309 expr_without_variable: "(unset) (T_UNSET_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 130
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 17

  308 expr_without_variable: "(bool) (T_BOOL_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 131
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 18

  307 expr_without_variable: "(object) (T_OBJECT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 132
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 19

  306 expr_without_variable: "(array) (T_ARRAY_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 133
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 20

  305 expr_without_variable: "(string) (T_STRING_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 134
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 21

  304 expr_without_variable: "(double) (T_DOUBLE_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 135
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 22

  303 expr_without_variable: "(int) (T_INT_CAST)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 136
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 23

  262 expr_without_variable: "-- (T_DEC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    rw_variable                        go to state 142
    variable                           go to state 143
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 24

  260 expr_without_variable: "++ (T_INC)" . rw_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    rw_variable                        go to state 145
    variable                           go to state 143
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 25

  315 expr_without_variable: '[' . array_pair_list ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 146
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 465 (array_pair_list)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 147
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    array_pair_list                    go to state 148
    non_empty_array_pair_list          go to state 149
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 26

  247 expr_without_variable: "clone (T_CLONE)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 150
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 27

  246 expr_without_variable: "new (T_NEW)" . class_name_reference @41 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 80

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 155
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 28

  310 expr_without_variable: "exit (T_EXIT)" . exit_expr

    '('  shift, and go to state 161

    $default  reduce using rule 361 (exit_expr)

    exit_expr  go to state 162


state 29

   38 unticked_statement: "if (T_IF)" . '(' expr ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" . '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    '('  shift, and go to state 163


state 30

  369 common_scalar: "integer number (T_LNUMBER)" .

    $default  reduce using rule 369 (common_scalar)


state 31

  370 common_scalar: "floating-point number (T_DNUMBER)" .

    $default  reduce using rule 370 (common_scalar)


state 32

    5 namespace_name: "identifier (T_STRING)" .
   34 statement: "identifier (T_STRING)" . ':'

    ':'  shift, and go to state 164

    $default  reduce using rule 5 (namespace_name)


state 33

  392 scalar: "variable name (T_STRING_VARNAME)" .

    $default  reduce using rule 392 (scalar)


state 34

  445 compound_variable: "variable (T_VARIABLE)" .

    $default  reduce using rule 445 (compound_variable)


state 35

   64 unticked_statement: T_INLINE_HTML .

    $default  reduce using rule 64 (unticked_statement)


state 36

  371 common_scalar: "quoted-string (T_CONSTANT_ENCAPSED_STRING)" .

    $default  reduce using rule 371 (common_scalar)


state 37

   63 unticked_statement: "echo (T_ECHO)" . echo_expr_list ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    echo_expr_list                     go to state 165
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 166
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 38

   47 unticked_statement: "do (T_DO)" . @11 statement "while (T_WHILE)" '(' @12 expr ')' ';'

    $default  reduce using rule 45 (@11)

    @11  go to state 167


state 39

   44 unticked_statement: "while (T_WHILE)" . '(' @9 expr ')' @10 while_statement

    '('  shift, and go to state 168


state 40

   51 unticked_statement: "for (T_FOR)" . '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    '('  shift, and go to state 169


state 41

   69 unticked_statement: "foreach (T_FOREACH)" . '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
   72                   | "foreach (T_FOREACH)" . '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

    '('  shift, and go to state 170


state 42

   74 unticked_statement: "declare (T_DECLARE)" . @21 '(' declare_list ')' declare_statement

    $default  reduce using rule 73 (@21)

    @21  go to state 171


state 43

   53 unticked_statement: "switch (T_SWITCH)" . '(' expr ')' @16 switch_case_list

    '('  shift, and go to state 172


state 44

   54 unticked_statement: "break (T_BREAK)" . ';'
   55                   | "break (T_BREAK)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 173
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 174
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 45

   56 unticked_statement: "continue (T_CONTINUE)" . ';'
   57                   | "continue (T_CONTINUE)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 175
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 176
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 46

   83 unticked_statement: "goto (T_GOTO)" . "identifier (T_STRING)" ';'

    "identifier (T_STRING)"  shift, and go to state 177


state 47

  322 function: "function (T_FUNCTION)" .

    $default  reduce using rule 322 (function)


state 48

   25 constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 178


state 49

   58 unticked_statement: "return (T_RETURN)" . ';'
   59                   | "return (T_RETURN)" . expr_without_variable ';'
   60                   | "return (T_RETURN)" . variable ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 179
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 180
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 182
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 50

   81 unticked_statement: "try (T_TRY)" . @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 76 (@22)

    @22  go to state 183


state 51

   82 unticked_statement: "throw (T_THROW)" . expr ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 184
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 52

   16 top_statement: "use (T_USE)" . use_declarations ';'

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 185

    namespace_name    go to state 186
    use_declarations  go to state 187
    use_declaration   go to state 188


state 53

   61 unticked_statement: "global (T_GLOBAL)" . global_var_list ';'

    "variable (T_VARIABLE)"  shift, and go to state 189
    '$'                      shift, and go to state 190

    global_var_list  go to state 191
    global_var       go to state 192


state 54

  107 class_entry_type: "final (T_FINAL)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 193


state 55

  105 class_entry_type: "abstract (T_ABSTRACT)" . "class (T_CLASS)"

    "class (T_CLASS)"  shift, and go to state 194


state 56

   62 unticked_statement: "static (T_STATIC)" . static_var_list ';'
  321 expr_without_variable: "static (T_STATIC)" . function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'
  345 class_name: "static (T_STATIC)" .

    "variable (T_VARIABLE)"  shift, and go to state 195
    "function (T_FUNCTION)"  shift, and go to state 47

    $default  reduce using rule 345 (class_name)

    static_var_list  go to state 196
    function         go to state 197


state 57

   66 unticked_statement: "unset (T_UNSET)" . '(' unset_variables ')' ';'

    '('  shift, and go to state 198


state 58

  489 internal_functions_in_yacc: "isset (T_ISSET)" . '(' isset_variables ')'

    '('  shift, and go to state 199


state 59

  490 internal_functions_in_yacc: "empty (T_EMPTY)" . '(' variable ')'

    '('  shift, and go to state 200


state 60

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 201


state 61

  104 class_entry_type: "class (T_CLASS)" .

    $default  reduce using rule 104 (class_entry_type)


state 62

  106 class_entry_type: "trait (T_TRAIT)" .

    $default  reduce using rule 106 (class_entry_type)


state 63

  110 interface_entry: "interface (T_INTERFACE)" .

    $default  reduce using rule 110 (interface_entry)


state 64

  240 expr_without_variable: "list (T_LIST)" . '(' @39 assignment_list ')' '=' expr

    '('  shift, and go to state 202


state 65

  314 expr_without_variable: "array (T_ARRAY)" . '(' array_pair_list ')'

    '('  shift, and go to state 203


state 66

  375 common_scalar: "__CLASS__ (T_CLASS_C)" .

    $default  reduce using rule 375 (common_scalar)


state 67

  376 common_scalar: "__TRAIT__ (T_TRAIT_C)" .

    $default  reduce using rule 376 (common_scalar)


state 68

  377 common_scalar: "__METHOD__ (T_METHOD_C)" .

    $default  reduce using rule 377 (common_scalar)


state 69

  378 common_scalar: "__FUNCTION__ (T_FUNC_C)" .

    $default  reduce using rule 378 (common_scalar)


state 70

  372 common_scalar: "__LINE__ (T_LINE)" .

    $default  reduce using rule 372 (common_scalar)


state 71

  373 common_scalar: "__FILE__ (T_FILE)" .

    $default  reduce using rule 373 (common_scalar)


state 72

  380 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  381              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"
  399 scalar: "heredoc start (T_START_HEREDOC)" . encaps_list "heredoc end (T_END_HEREDOC)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 205
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 206
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 209
    encaps_var   go to state 210


state 73

   11 top_statement: "namespace (T_NAMESPACE)" . namespace_name ';'
   13              | "namespace (T_NAMESPACE)" . namespace_name '{' @2 top_statement_list '}'
   15              | "namespace (T_NAMESPACE)" . '{' @3 top_statement_list '}'
  332 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'
  347 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  395 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 211
    '{'                      shift, and go to state 212

    namespace_name  go to state 213


state 74

  379 common_scalar: "__NAMESPACE__ (T_NS_C)" .

    $default  reduce using rule 379 (common_scalar)


state 75

  374 common_scalar: "__DIR__ (T_DIR)" .

    $default  reduce using rule 374 (common_scalar)


state 76

  334 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' @54 function_call_parameter_list ')'
  348 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  396 scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 214


state 77

  296 expr_without_variable: '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 215
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 78

   75 unticked_statement: ';' .

    $default  reduce using rule 75 (unticked_statement)


state 79

   35 unticked_statement: '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 216


state 80

  446 compound_variable: '$' . '{' expr '}'
  457 simple_indirect_reference: '$' .

    '{'  shift, and go to state 217

    $default  reduce using rule 457 (simple_indirect_reference)


state 81

  316 expr_without_variable: '`' . backticks_expr '`'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 218
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 364 (backticks_expr)

    backticks_expr  go to state 219
    encaps_list     go to state 220
    encaps_var      go to state 210


state 82

  398 scalar: '"' . encaps_list '"'

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 221
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_list  go to state 222
    encaps_var   go to state 210


state 83

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  330 function_call: namespace_name . '(' @52 function_call_parameter_list ')'
  346 class_name: namespace_name .
  394 scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 224

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 346 (class_name)
    $default                       reduce using rule 394 (scalar)


state 84

    3 top_statement_list: top_statement_list @1 top_statement .

    $default  reduce using rule 3 (top_statement_list)


state 85

   17 top_statement: constant_declaration . ';'
   24 constant_declaration: constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 225
    ';'  shift, and go to state 226


state 86

    7 top_statement: statement .

    $default  reduce using rule 7 (top_statement)


state 87

   33 statement: unticked_statement .

    $default  reduce using rule 33 (statement)


state 88

    8 top_statement: function_declaration_statement .

    $default  reduce using rule 8 (top_statement)


state 89

    9 top_statement: class_declaration_statement .

    $default  reduce using rule 9 (top_statement)


state 90

   94 function_declaration_statement: unticked_function_declaration_statement .

    $default  reduce using rule 94 (function_declaration_statement)


state 91

   95 class_declaration_statement: unticked_class_declaration_statement .

    $default  reduce using rule 95 (class_declaration_statement)


state 92

  101 unticked_class_declaration_statement: class_entry_type . "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 227


state 93

  103 unticked_class_declaration_statement: interface_entry . "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 228


state 94

  409 expr: expr_without_variable .

    $default  reduce using rule 409 (expr)


state 95

   99 unticked_function_declaration_statement: function . is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'
  319 expr_without_variable: function . is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 230


state 96

  435 array_function_dereference: function_call . @66 '[' dim_offset ']'
  438 base_variable_with_function_calls: function_call .

    '['       reduce using rule 434 (@66)
    $default  reduce using rule 438 (base_variable_with_function_calls)

    @66  go to state 231


state 97

  336 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')'
  338              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')'
  430 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  499 class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 232


state 98

  397 scalar: common_scalar .

    $default  reduce using rule 397 (scalar)


state 99

  313 expr_without_variable: scalar .

    $default  reduce using rule 313 (expr_without_variable)


state 100

   65 unticked_statement: expr . ';'
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 259


state 101

  408 expr: r_variable .

    $default  reduce using rule 408 (expr)


state 102

  259 expr_without_variable: rw_variable . "++ (T_INC)"
  261                      | rw_variable . "-- (T_DEC)"

    "-- (T_DEC)"  shift, and go to state 260
    "++ (T_INC)"  shift, and go to state 261


state 103

  241 expr_without_variable: variable . '=' expr
  242                      | variable . '=' '&' variable
  244                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  248                      | variable . "+= (T_PLUS_EQUAL)" expr
  249                      | variable . "-= (T_MINUS_EQUAL)" expr
  250                      | variable . "*= (T_MUL_EQUAL)" expr
  251                      | variable . "/= (T_DIV_EQUAL)" expr
  252                      | variable . ".= (T_CONCAT_EQUAL)" expr
  253                      | variable . "%= (T_MOD_EQUAL)" expr
  254                      | variable . "&= (T_AND_EQUAL)" expr
  255                      | variable . "|= (T_OR_EQUAL)" expr
  256                      | variable . "^= (T_XOR_EQUAL)" expr
  257                      | variable . "<<= (T_SL_EQUAL)" expr
  258                      | variable . ">>= (T_SR_EQUAL)" expr
  410 r_variable: variable .
  412 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273

    "-- (T_DEC)"  reduce using rule 412 (rw_variable)
    "++ (T_INC)"  reduce using rule 412 (rw_variable)
    $default      reduce using rule 410 (r_variable)


state 104

  344 function_call: variable_without_objects . '(' @59 function_call_parameter_list ')'

    '('  shift, and go to state 274


state 105

  441 base_variable: static_member .

    $default  reduce using rule 441 (base_variable)


state 106

  340 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')'
  342              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')'
  431 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects
  500 class_constant: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 275


state 107

  433 array_function_dereference: array_function_dereference . '[' dim_offset ']'
  437 base_variable_with_function_calls: array_function_dereference .

    '['  shift, and go to state 276

    $default  reduce using rule 437 (base_variable_with_function_calls)


state 108

  415 variable: base_variable_with_function_calls . "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not variable_properties
  416         | base_variable_with_function_calls .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 277

    $default  reduce using rule 416 (variable)


state 109

  436 base_variable_with_function_calls: base_variable .

    $default  reduce using rule 436 (base_variable_with_function_calls)


state 110

  428 variable_without_objects: reference_variable .
  432 variable_class_name: reference_variable .
  439 base_variable: reference_variable .
  442 reference_variable: reference_variable . '[' dim_offset ']'
  443                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 432 (variable_class_name)
    '('                            reduce using rule 428 (variable_without_objects)
    $default                       reduce using rule 439 (base_variable)


state 111

  444 reference_variable: compound_variable .

    $default  reduce using rule 444 (reference_variable)


state 112

  429 variable_without_objects: simple_indirect_reference . reference_variable
  440 base_variable: simple_indirect_reference . reference_variable
  458 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 280

    reference_variable  go to state 281
    compound_variable   go to state 111


state 113

  302 expr_without_variable: internal_functions_in_yacc .

    $default  reduce using rule 302 (expr_without_variable)


state 114

  393 scalar: class_constant .

    $default  reduce using rule 393 (scalar)


state 115

    5 namespace_name: "identifier (T_STRING)" .

    $default  reduce using rule 5 (namespace_name)


state 116

  321 expr_without_variable: "static (T_STATIC)" . function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'
  345 class_name: "static (T_STATIC)" .

    "function (T_FUNCTION)"  shift, and go to state 47

    $default  reduce using rule 345 (class_name)

    function  go to state 197


state 117

  332 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'
  347 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  395 scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 211


state 118

  319 expr_without_variable: function . is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 282


state 119

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  495 internal_functions_in_yacc: "require_once (T_REQUIRE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 495 (internal_functions_in_yacc)


state 120

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  494 internal_functions_in_yacc: "require (T_REQUIRE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 494 (internal_functions_in_yacc)


state 121

  493 internal_functions_in_yacc: "eval (T_EVAL)" '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 283
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 122

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  492 internal_functions_in_yacc: "include_once (T_INCLUDE_ONCE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 492 (internal_functions_in_yacc)


state 123

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  491 internal_functions_in_yacc: "include (T_INCLUDE)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 491 (internal_functions_in_yacc)


state 124

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  317                      | "print (T_PRINT)" expr .

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 317 (expr_without_variable)


state 125

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  283                      | '+' expr .
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    $default  reduce using rule 283 (expr_without_variable)


state 126

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  284                      | '-' expr .
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    $default  reduce using rule 284 (expr_without_variable)


state 127

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  285                      | '!' expr .
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 285 (expr_without_variable)


state 128

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  286                      | '~' expr .
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    $default  reduce using rule 286 (expr_without_variable)


state 129

  312 expr_without_variable: '@' @49 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 284
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 130

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  309                      | "(unset) (T_UNSET_CAST)" expr .

    $default  reduce using rule 309 (expr_without_variable)


state 131

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  308                      | "(bool) (T_BOOL_CAST)" expr .

    $default  reduce using rule 308 (expr_without_variable)


state 132

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  307                      | "(object) (T_OBJECT_CAST)" expr .

    $default  reduce using rule 307 (expr_without_variable)


state 133

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  306                      | "(array) (T_ARRAY_CAST)" expr .

    $default  reduce using rule 306 (expr_without_variable)


state 134

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  305                      | "(string) (T_STRING_CAST)" expr .

    $default  reduce using rule 305 (expr_without_variable)


state 135

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  304                      | "(double) (T_DOUBLE_CAST)" expr .

    $default  reduce using rule 304 (expr_without_variable)


state 136

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  303                      | "(int) (T_INT_CAST)" expr .

    $default  reduce using rule 303 (expr_without_variable)


state 137

  345 class_name: "static (T_STATIC)" .

    $default  reduce using rule 345 (class_name)


state 138

  332 function_call: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')'
  347 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 285


state 139

  334 function_call: "\\ (T_NS_SEPARATOR)" . namespace_name '(' @54 function_call_parameter_list ')'
  348 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 286


state 140

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  330 function_call: namespace_name . '(' @52 function_call_parameter_list ')'
  346 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 224

    $default  reduce using rule 346 (class_name)


state 141

  336 function_call: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')'
  338              | class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')'
  430 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 287


state 142

  262 expr_without_variable: "-- (T_DEC)" rw_variable .

    $default  reduce using rule 262 (expr_without_variable)


state 143

  412 rw_variable: variable .

    $default  reduce using rule 412 (rw_variable)


state 144

  340 function_call: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')'
  342              | variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')'
  431 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 288


state 145

  260 expr_without_variable: "++ (T_INC)" rw_variable .

    $default  reduce using rule 260 (expr_without_variable)


state 146

  474 non_empty_array_pair_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 289
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 147

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  469 non_empty_array_pair_list: expr . "=> (T_DOUBLE_ARROW)" expr
  470                          | expr .
  473                          | expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 291

    $default  reduce using rule 470 (non_empty_array_pair_list)


state 148

  315 expr_without_variable: '[' array_pair_list . ']'

    ']'  shift, and go to state 292


state 149

  466 array_pair_list: non_empty_array_pair_list . possible_comma
  467 non_empty_array_pair_list: non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" expr
  468                          | non_empty_array_pair_list . ',' expr
  471                          | non_empty_array_pair_list . ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  472                          | non_empty_array_pair_list . ',' '&' w_variable

    ','  shift, and go to state 293

    $default  reduce using rule 402 (possible_comma)

    possible_comma  go to state 294


state 150

  247 expr_without_variable: "clone (T_CLONE)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    $default  reduce using rule 247 (expr_without_variable)


state 151

  347 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 295


state 152

  348 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 296


state 153

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  346 class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 346 (class_name)


state 154

  352 class_name_reference: class_name .
  430 static_member: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 297

    $default  reduce using rule 352 (class_name_reference)


state 155

  246 expr_without_variable: "new (T_NEW)" class_name_reference . @41 ctor_arguments

    $default  reduce using rule 245 (@41)

    @41  go to state 298


state 156

  353 class_name_reference: dynamic_class_name_reference .

    $default  reduce using rule 353 (class_name_reference)


state 157

  431 static_member: variable_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 299


state 158

  356 dynamic_class_name_reference: base_variable . "-> (T_OBJECT_OPERATOR)" @60 object_property @61 dynamic_class_name_variable_properties
  357                             | base_variable .

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 300

    $default  reduce using rule 357 (dynamic_class_name_reference)


state 159

  432 variable_class_name: reference_variable .
  439 base_variable: reference_variable .
  442 reference_variable: reference_variable . '[' dim_offset ']'
  443                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 432 (variable_class_name)
    $default                       reduce using rule 439 (base_variable)


state 160

  440 base_variable: simple_indirect_reference . reference_variable
  458 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 280

    reference_variable  go to state 301
    compound_variable   go to state 111


state 161

  362 exit_expr: '(' . ')'
  363          | '(' . expr ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ')'                                           shift, and go to state 302
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 303
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 162

  310 expr_without_variable: "exit (T_EXIT)" exit_expr .

    $default  reduce using rule 310 (expr_without_variable)


state 163

   38 unticked_statement: "if (T_IF)" '(' . expr ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' . expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 304
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 164

   34 statement: "identifier (T_STRING)" ':' .

    $default  reduce using rule 34 (statement)


state 165

   63 unticked_statement: "echo (T_ECHO)" echo_expr_list . ';'
  232 echo_expr_list: echo_expr_list . ',' expr

    ','  shift, and go to state 305
    ';'  shift, and go to state 306


state 166

  233 echo_expr_list: expr .
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 233 (echo_expr_list)


state 167

   47 unticked_statement: "do (T_DO)" @11 . statement "while (T_WHILE)" '(' @12 expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 307
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 168

   44 unticked_statement: "while (T_WHILE)" '(' . @9 expr ')' @10 while_statement

    $default  reduce using rule 42 (@9)

    @9  go to state 308


state 169

   51 unticked_statement: "for (T_FOR)" '(' . for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 234 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 309
    non_empty_for_expr                 go to state 310
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 311
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 170

   69 unticked_statement: "foreach (T_FOREACH)" '(' . variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
   72                   | "foreach (T_FOREACH)" '(' . expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 312
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 313
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 171

   74 unticked_statement: "declare (T_DECLARE)" @21 . '(' declare_list ')' declare_statement

    '('  shift, and go to state 314


state 172

   53 unticked_statement: "switch (T_SWITCH)" '(' . expr ')' @16 switch_case_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 315
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 173

   54 unticked_statement: "break (T_BREAK)" ';' .

    $default  reduce using rule 54 (unticked_statement)


state 174

   55 unticked_statement: "break (T_BREAK)" expr . ';'
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 316


state 175

   56 unticked_statement: "continue (T_CONTINUE)" ';' .

    $default  reduce using rule 56 (unticked_statement)


state 176

   57 unticked_statement: "continue (T_CONTINUE)" expr . ';'
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 317


state 177

   83 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" . ';'

    ';'  shift, and go to state 318


state 178

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 319


state 179

   58 unticked_statement: "return (T_RETURN)" ';' .

    $default  reduce using rule 58 (unticked_statement)


state 180

   59 unticked_statement: "return (T_RETURN)" expr_without_variable . ';'
  409 expr: expr_without_variable .

    ';'  shift, and go to state 320

    $default  reduce using rule 409 (expr)


state 181

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258


state 182

   60 unticked_statement: "return (T_RETURN)" variable . ';'
  241 expr_without_variable: variable . '=' expr
  242                      | variable . '=' '&' variable
  244                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  248                      | variable . "+= (T_PLUS_EQUAL)" expr
  249                      | variable . "-= (T_MINUS_EQUAL)" expr
  250                      | variable . "*= (T_MUL_EQUAL)" expr
  251                      | variable . "/= (T_DIV_EQUAL)" expr
  252                      | variable . ".= (T_CONCAT_EQUAL)" expr
  253                      | variable . "%= (T_MOD_EQUAL)" expr
  254                      | variable . "&= (T_AND_EQUAL)" expr
  255                      | variable . "|= (T_OR_EQUAL)" expr
  256                      | variable . "^= (T_XOR_EQUAL)" expr
  257                      | variable . "<<= (T_SL_EQUAL)" expr
  258                      | variable . ">>= (T_SR_EQUAL)" expr
  410 r_variable: variable .
  412 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273
    ';'                    shift, and go to state 321

    "-- (T_DEC)"  reduce using rule 412 (rw_variable)
    "++ (T_INC)"  reduce using rule 412 (rw_variable)
    $default      reduce using rule 410 (r_variable)


state 183

   81 unticked_statement: "try (T_TRY)" @22 . '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '{'  shift, and go to state 322


state 184

   82 unticked_statement: "throw (T_THROW)" expr . ';'
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 323


state 185

   22 use_declaration: "\\ (T_NS_SEPARATOR)" . namespace_name
   23                | "\\ (T_NS_SEPARATOR)" . namespace_name "as (T_AS)" "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 324


state 186

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   20 use_declaration: namespace_name .
   21                | namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 325
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 20 (use_declaration)


state 187

   16 top_statement: "use (T_USE)" use_declarations . ';'
   18 use_declarations: use_declarations . ',' use_declaration

    ','  shift, and go to state 326
    ';'  shift, and go to state 327


state 188

   19 use_declarations: use_declaration .

    $default  reduce using rule 19 (use_declarations)


state 189

  176 global_var: "variable (T_VARIABLE)" .

    $default  reduce using rule 176 (global_var)


state 190

  177 global_var: '$' . r_variable
  178           | '$' . '{' expr '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '{'                        shift, and go to state 328
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    r_variable                         go to state 329
    variable                           go to state 330
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 191

   61 unticked_statement: "global (T_GLOBAL)" global_var_list . ';'
  174 global_var_list: global_var_list . ',' global_var

    ','  shift, and go to state 331
    ';'  shift, and go to state 332


state 192

  175 global_var_list: global_var .

    $default  reduce using rule 175 (global_var_list)


state 193

  107 class_entry_type: "final (T_FINAL)" "class (T_CLASS)" .

    $default  reduce using rule 107 (class_entry_type)


state 194

  105 class_entry_type: "abstract (T_ABSTRACT)" "class (T_CLASS)" .

    $default  reduce using rule 105 (class_entry_type)


state 195

  181 static_var_list: "variable (T_VARIABLE)" .
  182                | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 333

    $default  reduce using rule 181 (static_var_list)


state 196

   62 unticked_statement: "static (T_STATIC)" static_var_list . ';'
  179 static_var_list: static_var_list . ',' "variable (T_VARIABLE)"
  180                | static_var_list . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 334
    ';'  shift, and go to state 335


state 197

  321 expr_without_variable: "static (T_STATIC)" function . is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 336


state 198

   66 unticked_statement: "unset (T_UNSET)" '(' . unset_variables ')' ';'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    unset_variables                    go to state 337
    unset_variable                     go to state 338
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 339
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 199

  489 internal_functions_in_yacc: "isset (T_ISSET)" '(' . isset_variables ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 340
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    isset_variables                    go to state 341


state 200

  490 internal_functions_in_yacc: "empty (T_EMPTY)" '(' . variable ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 342
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 201

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 343


state 202

  240 expr_without_variable: "list (T_LIST)" '(' . @39 assignment_list ')' '=' expr

    $default  reduce using rule 239 (@39)

    @39  go to state 344


state 203

  314 expr_without_variable: "array (T_ARRAY)" '(' . array_pair_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 146
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 465 (array_pair_list)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 147
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    array_pair_list                    go to state 345
    non_empty_array_pair_list          go to state 149
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 204

  479 encaps_var: "variable (T_VARIABLE)" .
  481           | "variable (T_VARIABLE)" . '[' @69 encaps_var_offset ']'
  482           | "variable (T_VARIABLE)" . "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)"

    '['                       shift, and go to state 346
    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 347

    $default  reduce using rule 479 (encaps_var)


state 205

  380 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"
  478 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "heredoc end (T_END_HEREDOC)"      shift, and go to state 348
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 349


state 206

  381 common_scalar: "heredoc start (T_START_HEREDOC)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 381 (common_scalar)


state 207

  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . expr '}'
  484           | "${ (T_DOLLAR_OPEN_CURLY_BRACES)" . "variable name (T_STRING_VARNAME)" '[' expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 350
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 351
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 208

  485 encaps_var: "{$ (T_CURLY_OPEN)" . variable '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 352
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 209

  399 scalar: "heredoc start (T_START_HEREDOC)" encaps_list . "heredoc end (T_END_HEREDOC)"
  475 encaps_list: encaps_list . encaps_var
  476            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 353
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 354
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    encaps_var  go to state 355


state 210

  477 encaps_list: encaps_var .

    $default  reduce using rule 477 (encaps_list)


state 211

  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' @53 function_call_parameter_list ')'
  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  395 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 356


state 212

   15 top_statement: "namespace (T_NAMESPACE)" '{' . @3 top_statement_list '}'

    $default  reduce using rule 14 (@3)

    @3  go to state 357


state 213

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   11 top_statement: "namespace (T_NAMESPACE)" namespace_name . ';'
   13              | "namespace (T_NAMESPACE)" namespace_name . '{' @2 top_statement_list '}'

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    ';'                    shift, and go to state 358
    '{'                    shift, and go to state 359


state 214

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  334 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' @54 function_call_parameter_list ')'
  348 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  396 scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 360

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 348 (class_name)
    $default                       reduce using rule 396 (scalar)


state 215

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  296                      | '(' expr . ')'
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 361


state 216

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   35 unticked_statement: '{' inner_statement_list . '}'

    '}'  shift, and go to state 362

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 217

  446 compound_variable: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 364
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 218

  365 backticks_expr: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .
  478 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    $default  reduce using rule 365 (backticks_expr)

    encaps_var  go to state 349


state 219

  316 expr_without_variable: '`' backticks_expr . '`'

    '`'  shift, and go to state 365


state 220

  366 backticks_expr: encaps_list .
  475 encaps_list: encaps_list . encaps_var
  476            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 353
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208

    $default  reduce using rule 366 (backticks_expr)

    encaps_var  go to state 355


state 221

  478 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . encaps_var

    "variable (T_VARIABLE)"            shift, and go to state 204
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"  shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                shift, and go to state 208

    encaps_var  go to state 349


state 222

  398 scalar: '"' encaps_list . '"'
  475 encaps_list: encaps_list . encaps_var
  476            | encaps_list . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"

    "variable (T_VARIABLE)"                                     shift, and go to state 204
    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 353
    "${ (T_DOLLAR_OPEN_CURLY_BRACES)"                           shift, and go to state 207
    "{$ (T_CURLY_OPEN)"                                         shift, and go to state 208
    '"'                                                         shift, and go to state 366

    encaps_var  go to state 355


state 223

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 367


state 224

  330 function_call: namespace_name '(' . @52 function_call_parameter_list ')'

    $default  reduce using rule 329 (@52)

    @52  go to state 368


state 225

   24 constant_declaration: constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 369


state 226

   17 top_statement: constant_declaration ';' .

    $default  reduce using rule 17 (top_statement)


state 227

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" . extends_from @30 implements_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 370

    $default  reduce using rule 108 (extends_from)

    extends_from  go to state 371


state 228

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" . @31 interface_extends_list '{' class_statement_list '}'

    $default  reduce using rule 102 (@31)

    @31  go to state 372


state 229

   97 is_reference: '&' .

    $default  reduce using rule 97 (is_reference)


state 230

   99 unticked_function_declaration_statement: function is_reference . "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}'
  319 expr_without_variable: function is_reference . '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"  shift, and go to state 373
    '('                      shift, and go to state 374


state 231

  435 array_function_dereference: function_call @66 . '[' dim_offset ']'

    '['  shift, and go to state 375


state 232

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @55 function_call_parameter_list ')'
  338              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @56 function_call_parameter_list ')'
  430 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  499 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 376
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 378
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 380
    simple_indirect_reference  go to state 381


state 233

  268 expr_without_variable: expr "or (T_LOGICAL_OR)" . @44 expr

    $default  reduce using rule 267 (@44)

    @44  go to state 382


state 234

  271 expr_without_variable: expr "xor (T_LOGICAL_XOR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 383
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 235

  270 expr_without_variable: expr "and (T_LOGICAL_AND)" . @45 expr

    $default  reduce using rule 269 (@45)

    @45  go to state 384


state 236

  299 expr_without_variable: expr '?' . @46 expr ':' @47 expr
  301                      | expr '?' . ':' @48 expr

    ':'  shift, and go to state 385

    $default  reduce using rule 297 (@46)

    @46  go to state 386


state 237

  264 expr_without_variable: expr "|| (T_BOOLEAN_OR)" . @42 expr

    $default  reduce using rule 263 (@42)

    @42  go to state 387


state 238

  266 expr_without_variable: expr "&& (T_BOOLEAN_AND)" . @43 expr

    $default  reduce using rule 265 (@43)

    @43  go to state 388


state 239

  272 expr_without_variable: expr '|' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 389
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 240

  274 expr_without_variable: expr '^' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 390
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 241

  273 expr_without_variable: expr '&' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 391
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 242

  288 expr_without_variable: expr "!== (T_IS_NOT_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 392
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 243

  287 expr_without_variable: expr "=== (T_IS_IDENTICAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 393
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 244

  290 expr_without_variable: expr "!= (T_IS_NOT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 394
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 245

  289 expr_without_variable: expr "== (T_IS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 395
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 246

  291 expr_without_variable: expr '<' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 396
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 247

  293 expr_without_variable: expr '>' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 397
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 248

  294 expr_without_variable: expr ">= (T_IS_GREATER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 398
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 249

  292 expr_without_variable: expr "<= (T_IS_SMALLER_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 399
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 250

  282 expr_without_variable: expr ">> (T_SR)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 400
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 251

  281 expr_without_variable: expr "<< (T_SL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 401
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 252

  276 expr_without_variable: expr '+' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 402
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 253

  277 expr_without_variable: expr '-' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 403
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 254

  275 expr_without_variable: expr '.' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 404
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 255

  278 expr_without_variable: expr '*' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 405
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 256

  279 expr_without_variable: expr '/' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 406
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 257

  280 expr_without_variable: expr '%' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 407
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 258

  295 expr_without_variable: expr "instanceof (T_INSTANCEOF)" . class_name_reference

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 80

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 408
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 259

   65 unticked_statement: expr ';' .

    $default  reduce using rule 65 (unticked_statement)


state 260

  261 expr_without_variable: rw_variable "-- (T_DEC)" .

    $default  reduce using rule 261 (expr_without_variable)


state 261

  259 expr_without_variable: rw_variable "++ (T_INC)" .

    $default  reduce using rule 259 (expr_without_variable)


state 262

  241 expr_without_variable: variable '=' . expr
  242                      | variable '=' . '&' variable
  244                      | variable '=' . '&' "new (T_NEW)" class_name_reference @40 ctor_arguments

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 409
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 410
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 263

  258 expr_without_variable: variable ">>= (T_SR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 411
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 264

  257 expr_without_variable: variable "<<= (T_SL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 412
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 265

  256 expr_without_variable: variable "^= (T_XOR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 413
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 266

  255 expr_without_variable: variable "|= (T_OR_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 414
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 267

  254 expr_without_variable: variable "&= (T_AND_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 415
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 268

  253 expr_without_variable: variable "%= (T_MOD_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 416
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 269

  252 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 417
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 270

  251 expr_without_variable: variable "/= (T_DIV_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 418
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 271

  250 expr_without_variable: variable "*= (T_MUL_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 419
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 272

  249 expr_without_variable: variable "-= (T_MINUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 420
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 273

  248 expr_without_variable: variable "+= (T_PLUS_EQUAL)" . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 421
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 274

  344 function_call: variable_without_objects '(' . @59 function_call_parameter_list ')'

    $default  reduce using rule 343 (@59)

    @59  go to state 422


state 275

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @57 function_call_parameter_list ')'
  342              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @58 function_call_parameter_list ')'
  431 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects
  500 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 423
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 424
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 425
    simple_indirect_reference  go to state 381


state 276

  433 array_function_dereference: array_function_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 447 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 427
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 277

  415 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" . @62 object_property @63 method_or_not variable_properties

    $default  reduce using rule 413 (@62)

    @62  go to state 428


state 278

  442 reference_variable: reference_variable '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 447 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 429
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 279

  443 reference_variable: reference_variable '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 430
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 280

  446 compound_variable: '$' . '{' expr '}'
  458 simple_indirect_reference: simple_indirect_reference '$' .

    '{'  shift, and go to state 217

    $default  reduce using rule 458 (simple_indirect_reference)


state 281

  429 variable_without_objects: simple_indirect_reference reference_variable .
  440 base_variable: simple_indirect_reference reference_variable .
  442 reference_variable: reference_variable . '[' dim_offset ']'
  443                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    '('       reduce using rule 429 (variable_without_objects)
    $default  reduce using rule 440 (base_variable)


state 282

  319 expr_without_variable: function is_reference . '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 374


state 283

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  493 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 431


state 284

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  312                      | '@' @49 expr .

    $default  reduce using rule 312 (expr_without_variable)


state 285

  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name '(' @53 function_call_parameter_list ')'
  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 432


state 286

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  334 function_call: "\\ (T_NS_SEPARATOR)" namespace_name . '(' @54 function_call_parameter_list ')'
  348 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 360

    $default  reduce using rule 348 (class_name)


state 287

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @55 function_call_parameter_list ')'
  338              | class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @56 function_call_parameter_list ')'
  430 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 378
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 380
    simple_indirect_reference  go to state 381


state 288

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_name '(' @57 function_call_parameter_list ')'
  342              | variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects '(' @58 function_call_parameter_list ')'
  431 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 424
    reference_variable         go to state 379
    compound_variable          go to state 111
    variable_name              go to state 425
    simple_indirect_reference  go to state 381


state 289

  474 non_empty_array_pair_list: '&' w_variable .

    $default  reduce using rule 474 (non_empty_array_pair_list)


state 290

  411 w_variable: variable .

    $default  reduce using rule 411 (w_variable)


state 291

  469 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" . expr
  473                          | expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 434
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 435
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 292

  315 expr_without_variable: '[' array_pair_list ']' .

    $default  reduce using rule 315 (expr_without_variable)


state 293

  403 possible_comma: ',' .
  467 non_empty_array_pair_list: non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" expr
  468                          | non_empty_array_pair_list ',' . expr
  471                          | non_empty_array_pair_list ',' . expr "=> (T_DOUBLE_ARROW)" '&' w_variable
  472                          | non_empty_array_pair_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 436
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 403 (possible_comma)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 437
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 294

  466 array_pair_list: non_empty_array_pair_list possible_comma .

    $default  reduce using rule 466 (array_pair_list)


state 295

  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 438


state 296

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  348 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 348 (class_name)


state 297

  430 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 439
    reference_variable         go to state 379
    compound_variable          go to state 111
    simple_indirect_reference  go to state 381


state 298

  246 expr_without_variable: "new (T_NEW)" class_name_reference @41 . ctor_arguments

    '('  shift, and go to state 440

    $default  reduce using rule 367 (ctor_arguments)

    ctor_arguments  go to state 441


state 299

  431 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . variable_without_objects

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 442
    reference_variable         go to state 379
    compound_variable          go to state 111
    simple_indirect_reference  go to state 381


state 300

  356 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" . @60 object_property @61 dynamic_class_name_variable_properties

    $default  reduce using rule 354 (@60)

    @60  go to state 443


state 301

  440 base_variable: simple_indirect_reference reference_variable .
  442 reference_variable: reference_variable . '[' dim_offset ']'
  443                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    $default  reduce using rule 440 (base_variable)


state 302

  362 exit_expr: '(' ')' .

    $default  reduce using rule 362 (exit_expr)


state 303

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  363 exit_expr: '(' expr . ')'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 444


state 304

   38 unticked_statement: "if (T_IF)" '(' expr . ')' @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' expr . ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 445


state 305

  232 echo_expr_list: echo_expr_list ',' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 446
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 306

   63 unticked_statement: "echo (T_ECHO)" echo_expr_list ';' .

    $default  reduce using rule 63 (unticked_statement)


state 307

   47 unticked_statement: "do (T_DO)" @11 statement . "while (T_WHILE)" '(' @12 expr ')' ';'

    "while (T_WHILE)"  shift, and go to state 447


state 308

   44 unticked_statement: "while (T_WHILE)" '(' @9 . expr ')' @10 while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 448
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 309

   51 unticked_statement: "for (T_FOR)" '(' for_expr . ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement

    ';'  shift, and go to state 449


state 310

  235 for_expr: non_empty_for_expr .
  237 non_empty_for_expr: non_empty_for_expr . ',' @38 expr

    ','  shift, and go to state 450

    $default  reduce using rule 235 (for_expr)


state 311

  238 non_empty_for_expr: expr .
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 238 (non_empty_for_expr)


state 312

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable . "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement
  409 expr: expr_without_variable .

    "as (T_AS)"  shift, and go to state 451

    $default  reduce using rule 409 (expr)


state 313

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable . "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement
  241 expr_without_variable: variable . '=' expr
  242                      | variable . '=' '&' variable
  244                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  248                      | variable . "+= (T_PLUS_EQUAL)" expr
  249                      | variable . "-= (T_MINUS_EQUAL)" expr
  250                      | variable . "*= (T_MUL_EQUAL)" expr
  251                      | variable . "/= (T_DIV_EQUAL)" expr
  252                      | variable . ".= (T_CONCAT_EQUAL)" expr
  253                      | variable . "%= (T_MOD_EQUAL)" expr
  254                      | variable . "&= (T_AND_EQUAL)" expr
  255                      | variable . "|= (T_OR_EQUAL)" expr
  256                      | variable . "^= (T_XOR_EQUAL)" expr
  257                      | variable . "<<= (T_SL_EQUAL)" expr
  258                      | variable . ">>= (T_SR_EQUAL)" expr
  410 r_variable: variable .
  412 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273
    "as (T_AS)"            shift, and go to state 452

    "-- (T_DEC)"  reduce using rule 412 (rw_variable)
    "++ (T_INC)"  reduce using rule 412 (rw_variable)
    $default      reduce using rule 410 (r_variable)


state 314

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' . declare_list ')' declare_statement

    "identifier (T_STRING)"  shift, and go to state 453

    declare_list  go to state 454


state 315

   53 unticked_statement: "switch (T_SWITCH)" '(' expr . ')' @16 switch_case_list
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 455


state 316

   55 unticked_statement: "break (T_BREAK)" expr ';' .

    $default  reduce using rule 55 (unticked_statement)


state 317

   57 unticked_statement: "continue (T_CONTINUE)" expr ';' .

    $default  reduce using rule 57 (unticked_statement)


state 318

   83 unticked_statement: "goto (T_GOTO)" "identifier (T_STRING)" ';' .

    $default  reduce using rule 83 (unticked_statement)


state 319

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 466
    static_class_constant  go to state 467


state 320

   59 unticked_statement: "return (T_RETURN)" expr_without_variable ';' .

    $default  reduce using rule 59 (unticked_statement)


state 321

   60 unticked_statement: "return (T_RETURN)" variable ';' .

    $default  reduce using rule 60 (unticked_statement)


state 322

   81 unticked_statement: "try (T_TRY)" @22 '{' . inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 468


state 323

   82 unticked_statement: "throw (T_THROW)" expr ';' .

    $default  reduce using rule 82 (unticked_statement)


state 324

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
   22 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name .
   23                | "\\ (T_NS_SEPARATOR)" namespace_name . "as (T_AS)" "identifier (T_STRING)"

    "as (T_AS)"            shift, and go to state 469
    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 22 (use_declaration)


state 325

   21 use_declaration: namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 470


state 326

   18 use_declarations: use_declarations ',' . use_declaration

    "identifier (T_STRING)"  shift, and go to state 115
    "\\ (T_NS_SEPARATOR)"    shift, and go to state 185

    namespace_name   go to state 186
    use_declaration  go to state 471


state 327

   16 top_statement: "use (T_USE)" use_declarations ';' .

    $default  reduce using rule 16 (top_statement)


state 328

  178 global_var: '$' '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 472
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 329

  177 global_var: '$' r_variable .

    $default  reduce using rule 177 (global_var)


state 330

  410 r_variable: variable .

    $default  reduce using rule 410 (r_variable)


state 331

  174 global_var_list: global_var_list ',' . global_var

    "variable (T_VARIABLE)"  shift, and go to state 189
    '$'                      shift, and go to state 190

    global_var  go to state 473


state 332

   61 unticked_statement: "global (T_GLOBAL)" global_var_list ';' .

    $default  reduce using rule 61 (unticked_statement)


state 333

  182 static_var_list: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 474
    static_class_constant  go to state 467


state 334

  179 static_var_list: static_var_list ',' . "variable (T_VARIABLE)"
  180                | static_var_list ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 475


state 335

   62 unticked_statement: "static (T_STATIC)" static_var_list ';' .

    $default  reduce using rule 62 (unticked_statement)


state 336

  321 expr_without_variable: "static (T_STATIC)" function is_reference . '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    '('  shift, and go to state 476


state 337

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables . ')' ';'
   92 unset_variables: unset_variables . ',' unset_variable

    ','  shift, and go to state 477
    ')'  shift, and go to state 478


state 338

   91 unset_variables: unset_variable .

    $default  reduce using rule 91 (unset_variables)


state 339

   93 unset_variable: variable .

    $default  reduce using rule 93 (unset_variable)


state 340

  496 isset_variables: variable .

    $default  reduce using rule 496 (isset_variables)


state 341

  489 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables . ')'
  498 isset_variables: isset_variables . ',' @70 variable

    ','  shift, and go to state 479
    ')'  shift, and go to state 480


state 342

  490 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable . ')'

    ')'  shift, and go to state 481


state 343

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 482


state 344

  240 expr_without_variable: "list (T_LIST)" '(' @39 . assignment_list ')' '=' expr

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 483
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    $default  reduce using rule 464 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 484
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list                    go to state 485
    assignment_list_element            go to state 486


state 345

  314 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list . ')'

    ')'  shift, and go to state 487


state 346

  481 encaps_var: "variable (T_VARIABLE)" '[' . @69 encaps_var_offset ']'

    $default  reduce using rule 480 (@69)

    @69  go to state 488


state 347

  482 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 489


state 348

  380 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 380 (common_scalar)


state 349

  478 encaps_list: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" encaps_var .

    $default  reduce using rule 478 (encaps_list)


state 350

  392 scalar: "variable name (T_STRING_VARNAME)" .
  484 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" . '[' expr ']' '}'

    '['  shift, and go to state 490

    $default  reduce using rule 392 (scalar)


state 351

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 491


state 352

  485 encaps_var: "{$ (T_CURLY_OPEN)" variable . '}'

    '}'  shift, and go to state 492


state 353

  476 encaps_list: encaps_list "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" .

    $default  reduce using rule 476 (encaps_list)


state 354

  399 scalar: "heredoc start (T_START_HEREDOC)" encaps_list "heredoc end (T_END_HEREDOC)" .

    $default  reduce using rule 399 (scalar)


state 355

  475 encaps_list: encaps_list encaps_var .

    $default  reduce using rule 475 (encaps_list)


state 356

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' @53 function_call_parameter_list ')'
  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  395 scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 493

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 347 (class_name)
    $default                       reduce using rule 395 (scalar)


state 357

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 494


state 358

   11 top_statement: "namespace (T_NAMESPACE)" namespace_name ';' .

    $default  reduce using rule 11 (top_statement)


state 359

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' . @2 top_statement_list '}'

    $default  reduce using rule 12 (@2)

    @2  go to state 495


state 360

  334 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' . @54 function_call_parameter_list ')'

    $default  reduce using rule 333 (@54)

    @54  go to state 496


state 361

  296 expr_without_variable: '(' expr ')' .

    $default  reduce using rule 296 (expr_without_variable)


state 362

   35 unticked_statement: '{' inner_statement_list '}' .

    $default  reduce using rule 35 (unticked_statement)


state 363

   27 inner_statement_list: inner_statement_list @4 . inner_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "final (T_FINAL)"                             shift, and go to state 54
    "abstract (T_ABSTRACT)"                       shift, and go to state 55
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "__halt_compiler (T_HALT_COMPILER)"           shift, and go to state 497
    "class (T_CLASS)"                             shift, and go to state 61
    "trait (T_TRAIT)"                             shift, and go to state 62
    "interface (T_INTERFACE)"                     shift, and go to state 63
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                           go to state 83
    inner_statement                          go to state 498
    statement                                go to state 499
    unticked_statement                       go to state 87
    function_declaration_statement           go to state 500
    class_declaration_statement              go to state 501
    unticked_function_declaration_statement  go to state 90
    unticked_class_declaration_statement     go to state 91
    class_entry_type                         go to state 92
    interface_entry                          go to state 93
    expr_without_variable                    go to state 94
    function                                 go to state 95
    function_call                            go to state 96
    class_name                               go to state 97
    common_scalar                            go to state 98
    scalar                                   go to state 99
    expr                                     go to state 100
    r_variable                               go to state 101
    rw_variable                              go to state 102
    variable                                 go to state 103
    variable_without_objects                 go to state 104
    static_member                            go to state 105
    variable_class_name                      go to state 106
    array_function_dereference               go to state 107
    base_variable_with_function_calls        go to state 108
    base_variable                            go to state 109
    reference_variable                       go to state 110
    compound_variable                        go to state 111
    simple_indirect_reference                go to state 112
    internal_functions_in_yacc               go to state 113
    class_constant                           go to state 114


state 364

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  446 compound_variable: '$' '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 502


state 365

  316 expr_without_variable: '`' backticks_expr '`' .

    $default  reduce using rule 316 (expr_without_variable)


state 366

  398 scalar: '"' encaps_list '"' .

    $default  reduce using rule 398 (scalar)


state 367

    6 namespace_name: namespace_name "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 6 (namespace_name)


state 368

  330 function_call: namespace_name '(' @52 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 504
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 369

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 508


state 370

  109 extends_from: "extends (T_EXTENDS)" . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 512


state 371

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from . @30 implements_list '{' class_statement_list '}'

    $default  reduce using rule 100 (@30)

    @30  go to state 513


state 372

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 . interface_extends_list '{' class_statement_list '}'

    "extends (T_EXTENDS)"  shift, and go to state 514

    $default  reduce using rule 111 (interface_extends_list)

    interface_extends_list  go to state 515


state 373

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" . @29 '(' parameter_list ')' '{' inner_statement_list '}'

    $default  reduce using rule 98 (@29)

    @29  go to state 516


state 374

  319 expr_without_variable: function is_reference '(' . @50 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 318 (@50)

    @50  go to state 517


state 375

  435 array_function_dereference: function_call @66 '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 447 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 518
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 376

  455 variable_name: "identifier (T_STRING)" .
  499 class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 455 (variable_name)
    $default  reduce using rule 499 (class_constant)


state 377

  456 variable_name: '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 519
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 378

  338 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' @56 function_call_parameter_list ')'
  430 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 520

    $default  reduce using rule 430 (static_member)


state 379

  428 variable_without_objects: reference_variable .
  442 reference_variable: reference_variable . '[' dim_offset ']'
  443                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    $default  reduce using rule 428 (variable_without_objects)


state 380

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' @55 function_call_parameter_list ')'

    '('  shift, and go to state 521


state 381

  429 variable_without_objects: simple_indirect_reference . reference_variable
  458 simple_indirect_reference: simple_indirect_reference . '$'

    "variable (T_VARIABLE)"  shift, and go to state 34
    '$'                      shift, and go to state 280

    reference_variable  go to state 522
    compound_variable   go to state 111


state 382

  268 expr_without_variable: expr "or (T_LOGICAL_OR)" @44 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 523
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 383

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  271                      | expr "xor (T_LOGICAL_XOR)" expr .
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 271 (expr_without_variable)


state 384

  270 expr_without_variable: expr "and (T_LOGICAL_AND)" @45 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 524
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 385

  301 expr_without_variable: expr '?' ':' . @48 expr

    $default  reduce using rule 300 (@48)

    @48  go to state 525


state 386

  299 expr_without_variable: expr '?' @46 . expr ':' @47 expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 526
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 387

  264 expr_without_variable: expr "|| (T_BOOLEAN_OR)" @42 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 527
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 388

  266 expr_without_variable: expr "&& (T_BOOLEAN_AND)" @43 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 528
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 389

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  272                      | expr '|' expr .
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 272 (expr_without_variable)


state 390

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  274                      | expr '^' expr .
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 274 (expr_without_variable)


state 391

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  273                      | expr '&' expr .
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 273 (expr_without_variable)


state 392

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  288                      | expr "!== (T_IS_NOT_IDENTICAL)" expr .
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 288 (expr_without_variable)


state 393

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  287                      | expr "=== (T_IS_IDENTICAL)" expr .
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 287 (expr_without_variable)


state 394

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  290                      | expr "!= (T_IS_NOT_EQUAL)" expr .
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 290 (expr_without_variable)


state 395

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  289                      | expr "== (T_IS_EQUAL)" expr .
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    "!== (T_IS_NOT_IDENTICAL)"  error (nonassociative)
    "=== (T_IS_IDENTICAL)"      error (nonassociative)
    "!= (T_IS_NOT_EQUAL)"       error (nonassociative)
    "== (T_IS_EQUAL)"           error (nonassociative)

    $default  reduce using rule 289 (expr_without_variable)


state 396

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  291                      | expr '<' expr .
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 291 (expr_without_variable)


state 397

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  293                      | expr '>' expr .
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 293 (expr_without_variable)


state 398

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  294                      | expr ">= (T_IS_GREATER_OR_EQUAL)" expr .
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 294 (expr_without_variable)


state 399

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  292                      | expr "<= (T_IS_SMALLER_OR_EQUAL)" expr .
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    ">> (T_SR)"                  shift, and go to state 250
    "<< (T_SL)"                  shift, and go to state 251
    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    '<'                           error (nonassociative)
    '>'                           error (nonassociative)
    ">= (T_IS_GREATER_OR_EQUAL)"  error (nonassociative)
    "<= (T_IS_SMALLER_OR_EQUAL)"  error (nonassociative)

    $default  reduce using rule 292 (expr_without_variable)


state 400

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  282                      | expr ">> (T_SR)" expr .
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 282 (expr_without_variable)


state 401

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  281                      | expr "<< (T_SL)" expr .
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '+'                          shift, and go to state 252
    '-'                          shift, and go to state 253
    '.'                          shift, and go to state 254
    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 281 (expr_without_variable)


state 402

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  276                      | expr '+' expr .
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 276 (expr_without_variable)


state 403

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  277                      | expr '-' expr .
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 277 (expr_without_variable)


state 404

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  275                      | expr '.' expr .
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '*'                          shift, and go to state 255
    '/'                          shift, and go to state 256
    '%'                          shift, and go to state 257
    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 275 (expr_without_variable)


state 405

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  278                      | expr '*' expr .
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 278 (expr_without_variable)


state 406

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  279                      | expr '/' expr .
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 279 (expr_without_variable)


state 407

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  280                      | expr '%' expr .
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "instanceof (T_INSTANCEOF)"  shift, and go to state 258

    $default  reduce using rule 280 (expr_without_variable)


state 408

  295 expr_without_variable: expr "instanceof (T_INSTANCEOF)" class_name_reference .

    $default  reduce using rule 295 (expr_without_variable)


state 409

  242 expr_without_variable: variable '=' '&' . variable
  244                      | variable '=' '&' . "new (T_NEW)" class_name_reference @40 ctor_arguments

    "new (T_NEW)"              shift, and go to state 529
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 530
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 410

  241 expr_without_variable: variable '=' expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 241 (expr_without_variable)


state 411

  258 expr_without_variable: variable ">>= (T_SR_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 258 (expr_without_variable)


state 412

  257 expr_without_variable: variable "<<= (T_SL_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 257 (expr_without_variable)


state 413

  256 expr_without_variable: variable "^= (T_XOR_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 256 (expr_without_variable)


state 414

  255 expr_without_variable: variable "|= (T_OR_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 255 (expr_without_variable)


state 415

  254 expr_without_variable: variable "&= (T_AND_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 254 (expr_without_variable)


state 416

  253 expr_without_variable: variable "%= (T_MOD_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 253 (expr_without_variable)


state 417

  252 expr_without_variable: variable ".= (T_CONCAT_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 252 (expr_without_variable)


state 418

  251 expr_without_variable: variable "/= (T_DIV_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 251 (expr_without_variable)


state 419

  250 expr_without_variable: variable "*= (T_MUL_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 250 (expr_without_variable)


state 420

  249 expr_without_variable: variable "-= (T_MINUS_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 249 (expr_without_variable)


state 421

  248 expr_without_variable: variable "+= (T_PLUS_EQUAL)" expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 248 (expr_without_variable)


state 422

  344 function_call: variable_without_objects '(' @59 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 531
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 423

  455 variable_name: "identifier (T_STRING)" .
  500 class_constant: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    '('       reduce using rule 455 (variable_name)
    $default  reduce using rule 500 (class_constant)


state 424

  342 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects . '(' @58 function_call_parameter_list ')'
  431 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    '('  shift, and go to state 532

    $default  reduce using rule 431 (static_member)


state 425

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name . '(' @57 function_call_parameter_list ')'

    '('  shift, and go to state 533


state 426

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  448 dim_offset: expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 448 (dim_offset)


state 427

  433 array_function_dereference: array_function_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 534


state 428

  415 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 . object_property @63 method_or_not variable_properties

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 536
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 429

  442 reference_variable: reference_variable '[' dim_offset . ']'

    ']'  shift, and go to state 539


state 430

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  443 reference_variable: reference_variable '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 540


state 431

  493 internal_functions_in_yacc: "eval (T_EVAL)" '(' expr ')' .

    $default  reduce using rule 493 (internal_functions_in_yacc)


state 432

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name . '(' @53 function_call_parameter_list ')'
  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223
    '('                    shift, and go to state 493

    $default  reduce using rule 347 (class_name)


state 433

  455 variable_name: "identifier (T_STRING)" .

    $default  reduce using rule 455 (variable_name)


state 434

  473 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 541
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 435

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  469 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 469 (non_empty_array_pair_list)


state 436

  472 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 542
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 437

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  467 non_empty_array_pair_list: non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" expr
  468                          | non_empty_array_pair_list ',' expr .
  471                          | non_empty_array_pair_list ',' expr . "=> (T_DOUBLE_ARROW)" '&' w_variable

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    "=> (T_DOUBLE_ARROW)"         shift, and go to state 543

    $default  reduce using rule 468 (non_empty_array_pair_list)


state 438

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 347 (class_name)


state 439

  430 static_member: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 430 (static_member)


state 440

  368 ctor_arguments: '(' . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 544
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 441

  246 expr_without_variable: "new (T_NEW)" class_name_reference @41 ctor_arguments .

    $default  reduce using rule 246 (expr_without_variable)


state 442

  431 static_member: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects .

    $default  reduce using rule 431 (static_member)


state 443

  356 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 . object_property @61 dynamic_class_name_variable_properties

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 545
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 444

  363 exit_expr: '(' expr ')' .

    $default  reduce using rule 363 (exit_expr)


state 445

   38 unticked_statement: "if (T_IF)" '(' expr ')' . @5 statement @6 elseif_list else_single
   41                   | "if (T_IF)" '(' expr ')' . ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    ':'  shift, and go to state 546

    $default  reduce using rule 36 (@5)

    @5  go to state 547


state 446

  232 echo_expr_list: echo_expr_list ',' expr .
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 232 (echo_expr_list)


state 447

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" . '(' @12 expr ')' ';'

    '('  shift, and go to state 548


state 448

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr . ')' @10 while_statement
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 549


state 449

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' . @13 for_expr ';' @14 for_expr ')' @15 for_statement

    $default  reduce using rule 48 (@13)

    @13  go to state 550


state 450

  237 non_empty_for_expr: non_empty_for_expr ',' . @38 expr

    $default  reduce using rule 236 (@38)

    @38  go to state 551


state 451

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" . @19 variable foreach_optional_arg ')' @20 foreach_statement

    $default  reduce using rule 70 (@19)

    @19  go to state 552


state 452

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" . @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement

    $default  reduce using rule 67 (@17)

    @17  go to state 553


state 453

  127 declare_list: "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 554


state 454

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list . ')' declare_statement
  128 declare_list: declare_list . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 555
    ')'  shift, and go to state 556


state 455

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' . @16 switch_case_list

    $default  reduce using rule 52 (@16)

    @16  go to state 557


state 456

  386 static_scalar: '+' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 558
    static_class_constant  go to state 467


state 457

  387 static_scalar: '-' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 559
    static_class_constant  go to state 467


state 458

  389 static_scalar: '[' . static_array_pair_list ']'

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    $default  reduce using rule 400 (static_array_pair_list)

    namespace_name                    go to state 463
    class_name                        go to state 464
    common_scalar                     go to state 465
    static_scalar                     go to state 560
    static_class_constant             go to state 467
    static_array_pair_list            go to state 561
    non_empty_static_array_pair_list  go to state 562


state 459

  388 static_scalar: "array (T_ARRAY)" . '(' static_array_pair_list ')'

    '('  shift, and go to state 563


state 460

  380 common_scalar: "heredoc start (T_START_HEREDOC)" . "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" "heredoc end (T_END_HEREDOC)"
  381              | "heredoc start (T_START_HEREDOC)" . "heredoc end (T_END_HEREDOC)"

    "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"  shift, and go to state 564
    "heredoc end (T_END_HEREDOC)"                               shift, and go to state 206


state 461

  347 class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name
  384 static_scalar: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 565


state 462

  348 class_name: "\\ (T_NS_SEPARATOR)" . namespace_name
  385 static_scalar: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 566


state 463

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  346 class_name: namespace_name .
  383 static_scalar: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 346 (class_name)
    $default                       reduce using rule 383 (static_scalar)


state 464

  391 static_class_constant: class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 567


state 465

  382 static_scalar: common_scalar .

    $default  reduce using rule 382 (static_scalar)


state 466

   25 constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 25 (constant_declaration)


state 467

  390 static_scalar: static_class_constant .

    $default  reduce using rule 390 (static_scalar)


state 468

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list . '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '}'  shift, and go to state 568

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 469

   23 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 569


state 470

   21 use_declaration: namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 21 (use_declaration)


state 471

   18 use_declarations: use_declarations ',' use_declaration .

    $default  reduce using rule 18 (use_declarations)


state 472

  178 global_var: '$' '{' expr . '}'
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 570


state 473

  174 global_var_list: global_var_list ',' global_var .

    $default  reduce using rule 174 (global_var_list)


state 474

  182 static_var_list: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 182 (static_var_list)


state 475

  179 static_var_list: static_var_list ',' "variable (T_VARIABLE)" .
  180                | static_var_list ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 571

    $default  reduce using rule 179 (static_var_list)


state 476

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' . @51 parameter_list ')' lexical_vars '{' inner_statement_list '}'

    $default  reduce using rule 320 (@51)

    @51  go to state 572


state 477

   92 unset_variables: unset_variables ',' . unset_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    unset_variable                     go to state 573
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 339
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 478

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' . ';'

    ';'  shift, and go to state 574


state 479

  498 isset_variables: isset_variables ',' . @70 variable

    $default  reduce using rule 497 (@70)

    @70  go to state 575


state 480

  489 internal_functions_in_yacc: "isset (T_ISSET)" '(' isset_variables ')' .

    $default  reduce using rule 489 (internal_functions_in_yacc)


state 481

  490 internal_functions_in_yacc: "empty (T_EMPTY)" '(' variable ')' .

    $default  reduce using rule 490 (internal_functions_in_yacc)


state 482

   10 top_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 10 (top_statement)


state 483

  463 assignment_list_element: "list (T_LIST)" . '(' @68 assignment_list ')'

    '('  shift, and go to state 576


state 484

  461 assignment_list_element: variable .

    $default  reduce using rule 461 (assignment_list_element)


state 485

  240 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list . ')' '=' expr
  459 assignment_list: assignment_list . ',' assignment_list_element

    ','  shift, and go to state 577
    ')'  shift, and go to state 578


state 486

  460 assignment_list: assignment_list_element .

    $default  reduce using rule 460 (assignment_list)


state 487

  314 expr_without_variable: "array (T_ARRAY)" '(' array_pair_list ')' .

    $default  reduce using rule 314 (expr_without_variable)


state 488

  481 encaps_var: "variable (T_VARIABLE)" '[' @69 . encaps_var_offset ']'

    "identifier (T_STRING)"  shift, and go to state 579
    "variable (T_VARIABLE)"  shift, and go to state 580
    "number (T_NUM_STRING)"  shift, and go to state 581

    encaps_var_offset  go to state 582


state 489

  482 encaps_var: "variable (T_VARIABLE)" "-> (T_OBJECT_OPERATOR)" "identifier (T_STRING)" .

    $default  reduce using rule 482 (encaps_var)


state 490

  484 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' . expr ']' '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 583
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 491

  483 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" expr '}' .

    $default  reduce using rule 483 (encaps_var)


state 492

  485 encaps_var: "{$ (T_CURLY_OPEN)" variable '}' .

    $default  reduce using rule 485 (encaps_var)


state 493

  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' . @53 function_call_parameter_list ')'

    $default  reduce using rule 331 (@53)

    @53  go to state 584


state 494

    3 top_statement_list: top_statement_list . @1 top_statement
   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list . '}'

    '}'  shift, and go to state 585

    $default  reduce using rule 2 (@1)

    @1  go to state 4


state 495

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 . top_statement_list '}'

    $default  reduce using rule 4 (top_statement_list)

    top_statement_list  go to state 586


state 496

  334 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 587
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 497

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" . '(' ')' ';'

    '('  shift, and go to state 588


state 498

   27 inner_statement_list: inner_statement_list @4 inner_statement .

    $default  reduce using rule 27 (inner_statement_list)


state 499

   29 inner_statement: statement .

    $default  reduce using rule 29 (inner_statement)


state 500

   30 inner_statement: function_declaration_statement .

    $default  reduce using rule 30 (inner_statement)


state 501

   31 inner_statement: class_declaration_statement .

    $default  reduce using rule 31 (inner_statement)


state 502

  446 compound_variable: '$' '{' expr '}' .

    $default  reduce using rule 446 (compound_variable)


state 503

  170 non_empty_function_call_parameter_list: '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 589
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 504

  330 function_call: namespace_name '(' @52 function_call_parameter_list . ')'

    ')'  shift, and go to state 590


state 505

  166 function_call_parameter_list: non_empty_function_call_parameter_list .
  171 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list . ',' expr_without_variable
  172                                       | non_empty_function_call_parameter_list . ',' variable
  173                                       | non_empty_function_call_parameter_list . ',' '&' w_variable

    ','  shift, and go to state 591

    $default  reduce using rule 166 (function_call_parameter_list)


state 506

  168 non_empty_function_call_parameter_list: expr_without_variable .
  409 expr: expr_without_variable .

    ','       reduce using rule 168 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 168 (non_empty_function_call_parameter_list)
    $default  reduce using rule 409 (expr)


state 507

  169 non_empty_function_call_parameter_list: variable .
  241 expr_without_variable: variable . '=' expr
  242                      | variable . '=' '&' variable
  244                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  248                      | variable . "+= (T_PLUS_EQUAL)" expr
  249                      | variable . "-= (T_MINUS_EQUAL)" expr
  250                      | variable . "*= (T_MUL_EQUAL)" expr
  251                      | variable . "/= (T_DIV_EQUAL)" expr
  252                      | variable . ".= (T_CONCAT_EQUAL)" expr
  253                      | variable . "%= (T_MOD_EQUAL)" expr
  254                      | variable . "&= (T_AND_EQUAL)" expr
  255                      | variable . "|= (T_OR_EQUAL)" expr
  256                      | variable . "^= (T_XOR_EQUAL)" expr
  257                      | variable . "<<= (T_SL_EQUAL)" expr
  258                      | variable . ">>= (T_SR_EQUAL)" expr
  410 r_variable: variable .
  412 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273

    ','           reduce using rule 169 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 412 (rw_variable)
    "++ (T_INC)"  reduce using rule 412 (rw_variable)
    ')'           reduce using rule 169 (non_empty_function_call_parameter_list)
    $default      reduce using rule 410 (r_variable)


state 508

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 592
    static_class_constant  go to state 467


state 509

  350 fully_qualified_class_name: "namespace (T_NAMESPACE)" . "\\ (T_NS_SEPARATOR)" namespace_name

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 593


state 510

  351 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 594


state 511

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  349 fully_qualified_class_name: namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 349 (fully_qualified_class_name)


state 512

  109 extends_from: "extends (T_EXTENDS)" fully_qualified_class_name .

    $default  reduce using rule 109 (extends_from)


state 513

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 . implements_list '{' class_statement_list '}'

    "implements (T_IMPLEMENTS)"  shift, and go to state 595

    $default  reduce using rule 113 (implements_list)

    implements_list  go to state 596


state 514

  112 interface_extends_list: "extends (T_EXTENDS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    interface_list              go to state 597
    fully_qualified_class_name  go to state 598


state 515

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list . '{' class_statement_list '}'

    '{'  shift, and go to state 599


state 516

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 . '(' parameter_list ')' '{' inner_statement_list '}'

    '('  shift, and go to state 600


state 517

  319 expr_without_variable: function is_reference '(' @50 . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "callable (T_CALLABLE)"    shift, and go to state 602
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 603
    non_empty_parameter_list    go to state 604
    optional_class_type         go to state 605
    fully_qualified_class_name  go to state 606


state 518

  435 array_function_dereference: function_call @66 '[' dim_offset . ']'

    ']'  shift, and go to state 607


state 519

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  456 variable_name: '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 608


state 520

  338 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . @56 function_call_parameter_list ')'

    $default  reduce using rule 337 (@56)

    @56  go to state 609


state 521

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . @55 function_call_parameter_list ')'

    $default  reduce using rule 335 (@55)

    @55  go to state 610


state 522

  429 variable_without_objects: simple_indirect_reference reference_variable .
  442 reference_variable: reference_variable . '[' dim_offset ']'
  443                   | reference_variable . '{' expr '}'

    '['  shift, and go to state 278
    '{'  shift, and go to state 279

    $default  reduce using rule 429 (variable_without_objects)


state 523

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  268                      | expr "or (T_LOGICAL_OR)" @44 expr .
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 268 (expr_without_variable)


state 524

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  270                      | expr "and (T_LOGICAL_AND)" @45 expr .
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 270 (expr_without_variable)


state 525

  301 expr_without_variable: expr '?' ':' @48 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 611
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 526

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  299                      | expr '?' @46 expr . ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    ':'                           shift, and go to state 612
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258


state 527

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  264                      | expr "|| (T_BOOLEAN_OR)" @42 expr .
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 264 (expr_without_variable)


state 528

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  266                      | expr "&& (T_BOOLEAN_AND)" @43 expr .
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 266 (expr_without_variable)


state 529

  244 expr_without_variable: variable '=' '&' "new (T_NEW)" . class_name_reference @40 ctor_arguments

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 151
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 152
    '$'                        shift, and go to state 80

    namespace_name                go to state 153
    class_name                    go to state 154
    class_name_reference          go to state 613
    dynamic_class_name_reference  go to state 156
    static_member                 go to state 105
    variable_class_name           go to state 157
    base_variable                 go to state 158
    reference_variable            go to state 159
    compound_variable             go to state 111
    simple_indirect_reference     go to state 160


state 530

  242 expr_without_variable: variable '=' '&' variable .

    $default  reduce using rule 242 (expr_without_variable)


state 531

  344 function_call: variable_without_objects '(' @59 function_call_parameter_list . ')'

    ')'  shift, and go to state 614


state 532

  342 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' . @58 function_call_parameter_list ')'

    $default  reduce using rule 341 (@58)

    @58  go to state 615


state 533

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' . @57 function_call_parameter_list ')'

    $default  reduce using rule 339 (@57)

    @57  go to state 616


state 534

  433 array_function_dereference: array_function_dereference '[' dim_offset ']' .

    $default  reduce using rule 433 (array_function_dereference)


state 535

  451 object_property: variable_without_objects . @67

    $default  reduce using rule 450 (@67)

    @67  go to state 617


state 536

  415 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property . @63 method_or_not variable_properties

    $default  reduce using rule 414 (@63)

    @63  go to state 618


state 537

  449 object_property: object_dim_list .
  452 object_dim_list: object_dim_list . '[' dim_offset ']'
  453                | object_dim_list . '{' expr '}'

    '['  shift, and go to state 619
    '{'  shift, and go to state 620

    $default  reduce using rule 449 (object_property)


state 538

  454 object_dim_list: variable_name .

    $default  reduce using rule 454 (object_dim_list)


state 539

  442 reference_variable: reference_variable '[' dim_offset ']' .

    $default  reduce using rule 442 (reference_variable)


state 540

  443 reference_variable: reference_variable '{' expr '}' .

    $default  reduce using rule 443 (reference_variable)


state 541

  473 non_empty_array_pair_list: expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 473 (non_empty_array_pair_list)


state 542

  472 non_empty_array_pair_list: non_empty_array_pair_list ',' '&' w_variable .

    $default  reduce using rule 472 (non_empty_array_pair_list)


state 543

  467 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . expr
  471                          | non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 621
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 622
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 544

  368 ctor_arguments: '(' function_call_parameter_list . ')'

    ')'  shift, and go to state 623


state 545

  356 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property . @61 dynamic_class_name_variable_properties

    $default  reduce using rule 355 (@61)

    @61  go to state 624


state 546

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' . @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 39 (@7)

    @7  go to state 625


state 547

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 . statement @6 elseif_list else_single

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 626
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 548

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' . @12 expr ')' ';'

    $default  reduce using rule 46 (@12)

    @12  go to state 627


state 549

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' . @10 while_statement

    $default  reduce using rule 43 (@10)

    @10  go to state 628


state 550

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 . for_expr ';' @14 for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 234 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 629
    non_empty_for_expr                 go to state 310
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 311
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 551

  237 non_empty_for_expr: non_empty_for_expr ',' @38 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 630
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 552

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 . variable foreach_optional_arg ')' @20 foreach_statement

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 631
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 553

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 . foreach_variable foreach_optional_arg ')' @18 foreach_statement

    '&'                        shift, and go to state 632
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    foreach_variable                   go to state 633
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 634
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 554

  127 declare_list: "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 635
    static_class_constant  go to state 467


state 555

  128 declare_list: declare_list ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 636


state 556

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' . declare_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 637
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 638
    unticked_statement                 go to state 87
    declare_statement                  go to state 639
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 557

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 . switch_case_list

    ':'  shift, and go to state 640
    '{'  shift, and go to state 641

    switch_case_list  go to state 642


state 558

  386 static_scalar: '+' static_scalar .

    $default  reduce using rule 386 (static_scalar)


state 559

  387 static_scalar: '-' static_scalar .

    $default  reduce using rule 387 (static_scalar)


state 560

  406 non_empty_static_array_pair_list: static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  407                                 | static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 643

    $default  reduce using rule 407 (non_empty_static_array_pair_list)


state 561

  389 static_scalar: '[' static_array_pair_list . ']'

    ']'  shift, and go to state 644


state 562

  401 static_array_pair_list: non_empty_static_array_pair_list . possible_comma
  404 non_empty_static_array_pair_list: non_empty_static_array_pair_list . ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  405                                 | non_empty_static_array_pair_list . ',' static_scalar

    ','  shift, and go to state 645

    $default  reduce using rule 402 (possible_comma)

    possible_comma  go to state 646


state 563

  388 static_scalar: "array (T_ARRAY)" '(' . static_array_pair_list ')'

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    $default  reduce using rule 400 (static_array_pair_list)

    namespace_name                    go to state 463
    class_name                        go to state 464
    common_scalar                     go to state 465
    static_scalar                     go to state 560
    static_class_constant             go to state 467
    static_array_pair_list            go to state 647
    non_empty_static_array_pair_list  go to state 562


state 564

  380 common_scalar: "heredoc start (T_START_HEREDOC)" "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)" . "heredoc end (T_END_HEREDOC)"

    "heredoc end (T_END_HEREDOC)"  shift, and go to state 348


state 565

  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name
  384 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 648


state 566

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  348 class_name: "\\ (T_NS_SEPARATOR)" namespace_name .
  385 static_scalar: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 348 (class_name)
    $default                       reduce using rule 385 (static_scalar)


state 567

  391 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 649


state 568

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' . "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "catch (T_CATCH)"  shift, and go to state 650


state 569

   23 use_declaration: "\\ (T_NS_SEPARATOR)" namespace_name "as (T_AS)" "identifier (T_STRING)" .

    $default  reduce using rule 23 (use_declaration)


state 570

  178 global_var: '$' '{' expr '}' .

    $default  reduce using rule 178 (global_var)


state 571

  180 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 651
    static_class_constant  go to state 467


state 572

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 . parameter_list ')' lexical_vars '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "callable (T_CALLABLE)"    shift, and go to state 602
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 652
    non_empty_parameter_list    go to state 604
    optional_class_type         go to state 605
    fully_qualified_class_name  go to state 606


state 573

   92 unset_variables: unset_variables ',' unset_variable .

    $default  reduce using rule 92 (unset_variables)


state 574

   66 unticked_statement: "unset (T_UNSET)" '(' unset_variables ')' ';' .

    $default  reduce using rule 66 (unticked_statement)


state 575

  498 isset_variables: isset_variables ',' @70 . variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 653
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 576

  463 assignment_list_element: "list (T_LIST)" '(' . @68 assignment_list ')'

    $default  reduce using rule 462 (@68)

    @68  go to state 654


state 577

  459 assignment_list: assignment_list ',' . assignment_list_element

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 483
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    $default  reduce using rule 464 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 484
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list_element            go to state 655


state 578

  240 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' . '=' expr

    '='  shift, and go to state 656


state 579

  486 encaps_var_offset: "identifier (T_STRING)" .

    $default  reduce using rule 486 (encaps_var_offset)


state 580

  488 encaps_var_offset: "variable (T_VARIABLE)" .

    $default  reduce using rule 488 (encaps_var_offset)


state 581

  487 encaps_var_offset: "number (T_NUM_STRING)" .

    $default  reduce using rule 487 (encaps_var_offset)


state 582

  481 encaps_var: "variable (T_VARIABLE)" '[' @69 encaps_var_offset . ']'

    ']'  shift, and go to state 657


state 583

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  484 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr . ']' '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ']'                           shift, and go to state 658


state 584

  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 659
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 585

   15 top_statement: "namespace (T_NAMESPACE)" '{' @3 top_statement_list '}' .

    $default  reduce using rule 15 (top_statement)


state 586

    3 top_statement_list: top_statement_list . @1 top_statement
   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list . '}'

    '}'  shift, and go to state 660

    $default  reduce using rule 2 (@1)

    @1  go to state 4


state 587

  334 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 function_call_parameter_list . ')'

    ')'  shift, and go to state 661


state 588

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' . ')' ';'

    ')'  shift, and go to state 662


state 589

  170 non_empty_function_call_parameter_list: '&' w_variable .

    $default  reduce using rule 170 (non_empty_function_call_parameter_list)


state 590

  330 function_call: namespace_name '(' @52 function_call_parameter_list ')' .

    $default  reduce using rule 330 (function_call)


state 591

  171 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' . expr_without_variable
  172                                       | non_empty_function_call_parameter_list ',' . variable
  173                                       | non_empty_function_call_parameter_list ',' . '&' w_variable

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 663
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 664
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 181
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 665
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 592

   24 constant_declaration: constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 24 (constant_declaration)


state 593

  350 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" . namespace_name

    "identifier (T_STRING)"  shift, and go to state 115

    namespace_name  go to state 666


state 594

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  351 fully_qualified_class_name: "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 351 (fully_qualified_class_name)


state 595

  114 implements_list: "implements (T_IMPLEMENTS)" . interface_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    interface_list              go to state 667
    fully_qualified_class_name  go to state 598


state 596

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list . '{' class_statement_list '}'

    '{'  shift, and go to state 668


state 597

  112 interface_extends_list: "extends (T_EXTENDS)" interface_list .
  116 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 669

    $default  reduce using rule 112 (interface_extends_list)


state 598

  115 interface_list: fully_qualified_class_name .

    $default  reduce using rule 115 (interface_list)


state 599

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' . class_statement_list '}'

    $default  reduce using rule 184 (class_statement_list)

    class_statement_list  go to state 670


state 600

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' . parameter_list ')' '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "callable (T_CALLABLE)"    shift, and go to state 602
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 671
    non_empty_parameter_list    go to state 604
    optional_class_type         go to state 605
    fully_qualified_class_name  go to state 606


state 601

  163 optional_class_type: "array (T_ARRAY)" .

    $default  reduce using rule 163 (optional_class_type)


state 602

  164 optional_class_type: "callable (T_CALLABLE)" .

    $default  reduce using rule 164 (optional_class_type)


state 603

  319 expr_without_variable: function is_reference '(' @50 parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 672


state 604

  152 parameter_list: non_empty_parameter_list .
  158 non_empty_parameter_list: non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list . ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list . ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 673

    $default  reduce using rule 152 (parameter_list)


state 605

  154 non_empty_parameter_list: optional_class_type . "variable (T_VARIABLE)"
  155                         | optional_class_type . '&' "variable (T_VARIABLE)"
  156                         | optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  157                         | optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 674
    "variable (T_VARIABLE)"  shift, and go to state 675


state 606

  165 optional_class_type: fully_qualified_class_name .

    $default  reduce using rule 165 (optional_class_type)


state 607

  435 array_function_dereference: function_call @66 '[' dim_offset ']' .

    $default  reduce using rule 435 (array_function_dereference)


state 608

  456 variable_name: '{' expr '}' .

    $default  reduce using rule 456 (variable_name)


state 609

  338 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 676
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 610

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 677
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 611

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  301                      | expr '?' ':' @48 expr .

    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 301 (expr_without_variable)


state 612

  299 expr_without_variable: expr '?' @46 expr ':' . @47 expr

    $default  reduce using rule 298 (@47)

    @47  go to state 678


state 613

  244 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference . @40 ctor_arguments

    $default  reduce using rule 243 (@40)

    @40  go to state 679


state 614

  344 function_call: variable_without_objects '(' @59 function_call_parameter_list ')' .

    $default  reduce using rule 344 (function_call)


state 615

  342 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 680
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 616

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 681
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 617

  451 object_property: variable_without_objects @67 .

    $default  reduce using rule 451 (object_property)


state 618

  415 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 . method_or_not variable_properties

    '('  shift, and go to state 682

    $default  reduce using rule 427 (method_or_not)

    array_method_dereference  go to state 683
    method                    go to state 684
    method_or_not             go to state 685


state 619

  452 object_dim_list: object_dim_list '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 447 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 686
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 620

  453 object_dim_list: object_dim_list '{' . expr '}'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 687
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 621

  471 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 688
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 622

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  467 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" expr .

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 467 (non_empty_array_pair_list)


state 623

  368 ctor_arguments: '(' function_call_parameter_list ')' .

    $default  reduce using rule 368 (ctor_arguments)


state 624

  356 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property @61 . dynamic_class_name_variable_properties

    $default  reduce using rule 359 (dynamic_class_name_variable_properties)

    dynamic_class_name_variable_properties  go to state 689


state 625

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 . inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 690


state 626

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement . @6 elseif_list else_single

    $default  reduce using rule 37 (@6)

    @6  go to state 691


state 627

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 . expr ')' ';'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 692
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 628

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 . while_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 693
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 694
    unticked_statement                 go to state 87
    while_statement                    go to state 695
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 629

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr . ';' @14 for_expr ')' @15 for_statement

    ';'  shift, and go to state 696


state 630

  237 non_empty_for_expr: non_empty_for_expr ',' @38 expr .
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 237 (non_empty_for_expr)


state 631

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable . foreach_optional_arg ')' @20 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 697

    $default  reduce using rule 117 (foreach_optional_arg)

    foreach_optional_arg  go to state 698


state 632

  120 foreach_variable: '&' . variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 699
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 633

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable . foreach_optional_arg ')' @18 foreach_statement

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 697

    $default  reduce using rule 117 (foreach_optional_arg)

    foreach_optional_arg  go to state 700


state 634

  119 foreach_variable: variable .

    $default  reduce using rule 119 (foreach_variable)


state 635

  127 declare_list: "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 127 (declare_list)


state 636

  128 declare_list: declare_list ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 701


state 637

  126 declare_statement: ':' . inner_statement_list "enddeclare (T_ENDDECLARE)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 702


state 638

  125 declare_statement: statement .

    $default  reduce using rule 125 (declare_statement)


state 639

   74 unticked_statement: "declare (T_DECLARE)" @21 '(' declare_list ')' declare_statement .

    $default  reduce using rule 74 (unticked_statement)


state 640

  131 switch_case_list: ':' . case_list "endswitch (T_ENDSWITCH)" ';'
  132                 | ':' . ';' case_list "endswitch (T_ENDSWITCH)" ';'

    ';'  shift, and go to state 703

    $default  reduce using rule 133 (case_list)

    case_list  go to state 704


state 641

  129 switch_case_list: '{' . case_list '}'
  130                 | '{' . ';' case_list '}'

    ';'  shift, and go to state 705

    $default  reduce using rule 133 (case_list)

    case_list  go to state 706


state 642

   53 unticked_statement: "switch (T_SWITCH)" '(' expr ')' @16 switch_case_list .

    $default  reduce using rule 53 (unticked_statement)


state 643

  406 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 707
    static_class_constant  go to state 467


state 644

  389 static_scalar: '[' static_array_pair_list ']' .

    $default  reduce using rule 389 (static_scalar)


state 645

  403 possible_comma: ',' .
  404 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' . static_scalar "=> (T_DOUBLE_ARROW)" static_scalar
  405                                 | non_empty_static_array_pair_list ',' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    $default  reduce using rule 403 (possible_comma)

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 708
    static_class_constant  go to state 467


state 646

  401 static_array_pair_list: non_empty_static_array_pair_list possible_comma .

    $default  reduce using rule 401 (static_array_pair_list)


state 647

  388 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list . ')'

    ')'  shift, and go to state 709


state 648

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  347 class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .
  384 static_scalar: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  reduce using rule 347 (class_name)
    $default                       reduce using rule 384 (static_scalar)


state 649

  391 static_class_constant: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 391 (static_class_constant)


state 650

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" . '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    '('  shift, and go to state 710


state 651

  180 static_var_list: static_var_list ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 180 (static_var_list)


state 652

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list . ')' lexical_vars '{' inner_statement_list '}'

    ')'  shift, and go to state 711


state 653

  498 isset_variables: isset_variables ',' @70 variable .

    $default  reduce using rule 498 (isset_variables)


state 654

  463 assignment_list_element: "list (T_LIST)" '(' @68 . assignment_list ')'

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "list (T_LIST)"            shift, and go to state 483
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    $default  reduce using rule 464 (assignment_list_element)

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 484
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    assignment_list                    go to state 712
    assignment_list_element            go to state 486


state 655

  459 assignment_list: assignment_list ',' assignment_list_element .

    $default  reduce using rule 459 (assignment_list)


state 656

  240 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' '=' . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 713
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 657

  481 encaps_var: "variable (T_VARIABLE)" '[' @69 encaps_var_offset ']' .

    $default  reduce using rule 481 (encaps_var)


state 658

  484 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' . '}'

    '}'  shift, and go to state 714


state 659

  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list . ')'

    ')'  shift, and go to state 715


state 660

   13 top_statement: "namespace (T_NAMESPACE)" namespace_name '{' @2 top_statement_list '}' .

    $default  reduce using rule 13 (top_statement)


state 661

  334 function_call: "\\ (T_NS_SEPARATOR)" namespace_name '(' @54 function_call_parameter_list ')' .

    $default  reduce using rule 334 (function_call)


state 662

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' . ';'

    ';'  shift, and go to state 716


state 663

  173 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' . w_variable

    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    function_call                      go to state 96
    class_name                         go to state 141
    w_variable                         go to state 717
    variable                           go to state 290
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 664

  171 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' expr_without_variable .
  409 expr: expr_without_variable .

    ','       reduce using rule 171 (non_empty_function_call_parameter_list)
    ')'       reduce using rule 171 (non_empty_function_call_parameter_list)
    $default  reduce using rule 409 (expr)


state 665

  172 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' variable .
  241 expr_without_variable: variable . '=' expr
  242                      | variable . '=' '&' variable
  244                      | variable . '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments
  248                      | variable . "+= (T_PLUS_EQUAL)" expr
  249                      | variable . "-= (T_MINUS_EQUAL)" expr
  250                      | variable . "*= (T_MUL_EQUAL)" expr
  251                      | variable . "/= (T_DIV_EQUAL)" expr
  252                      | variable . ".= (T_CONCAT_EQUAL)" expr
  253                      | variable . "%= (T_MOD_EQUAL)" expr
  254                      | variable . "&= (T_AND_EQUAL)" expr
  255                      | variable . "|= (T_OR_EQUAL)" expr
  256                      | variable . "^= (T_XOR_EQUAL)" expr
  257                      | variable . "<<= (T_SL_EQUAL)" expr
  258                      | variable . ">>= (T_SR_EQUAL)" expr
  410 r_variable: variable .
  412 rw_variable: variable .

    '='                    shift, and go to state 262
    ">>= (T_SR_EQUAL)"     shift, and go to state 263
    "<<= (T_SL_EQUAL)"     shift, and go to state 264
    "^= (T_XOR_EQUAL)"     shift, and go to state 265
    "|= (T_OR_EQUAL)"      shift, and go to state 266
    "&= (T_AND_EQUAL)"     shift, and go to state 267
    "%= (T_MOD_EQUAL)"     shift, and go to state 268
    ".= (T_CONCAT_EQUAL)"  shift, and go to state 269
    "/= (T_DIV_EQUAL)"     shift, and go to state 270
    "*= (T_MUL_EQUAL)"     shift, and go to state 271
    "-= (T_MINUS_EQUAL)"   shift, and go to state 272
    "+= (T_PLUS_EQUAL)"    shift, and go to state 273

    ','           reduce using rule 172 (non_empty_function_call_parameter_list)
    "-- (T_DEC)"  reduce using rule 412 (rw_variable)
    "++ (T_INC)"  reduce using rule 412 (rw_variable)
    ')'           reduce using rule 172 (non_empty_function_call_parameter_list)
    $default      reduce using rule 410 (r_variable)


state 666

    6 namespace_name: namespace_name . "\\ (T_NS_SEPARATOR)" "identifier (T_STRING)"
  350 fully_qualified_class_name: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name .

    "\\ (T_NS_SEPARATOR)"  shift, and go to state 223

    $default  reduce using rule 350 (fully_qualified_class_name)


state 667

  114 implements_list: "implements (T_IMPLEMENTS)" interface_list .
  116 interface_list: interface_list . ',' fully_qualified_class_name

    ','  shift, and go to state 669

    $default  reduce using rule 114 (implements_list)


state 668

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' . class_statement_list '}'

    $default  reduce using rule 184 (class_statement_list)

    class_statement_list  go to state 718


state 669

  116 interface_list: interface_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 719


state 670

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list . '}'
  183 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 720
    "use (T_USE)"              shift, and go to state 721
    "public (T_PUBLIC)"        shift, and go to state 722
    "protected (T_PROTECTED)"  shift, and go to state 723
    "private (T_PRIVATE)"      shift, and go to state 724
    "final (T_FINAL)"          shift, and go to state 725
    "abstract (T_ABSTRACT)"    shift, and go to state 726
    "static (T_STATIC)"        shift, and go to state 727
    "var (T_VAR)"              shift, and go to state 728
    '}'                        shift, and go to state 729

    $default  reduce using rule 216 (method_modifiers)

    class_statement             go to state 730
    trait_use_statement         go to state 731
    variable_modifiers          go to state 732
    method_modifiers            go to state 733
    non_empty_member_modifiers  go to state 734
    member_modifier             go to state 735
    class_constant_declaration  go to state 736


state 671

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list . ')' '{' inner_statement_list '}'

    ')'  shift, and go to state 737


state 672

  319 expr_without_variable: function is_reference '(' @50 parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 738

    $default  reduce using rule 323 (lexical_vars)

    lexical_vars  go to state 739


state 673

  158 non_empty_parameter_list: non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' . optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' . optional_class_type "variable (T_VARIABLE)" '=' static_scalar

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "callable (T_CALLABLE)"    shift, and go to state 602
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    optional_class_type         go to state 740
    fully_qualified_class_name  go to state 606


state 674

  155 non_empty_parameter_list: optional_class_type '&' . "variable (T_VARIABLE)"
  156                         | optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 741


state 675

  154 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" .
  157                         | optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 742

    $default  reduce using rule 154 (non_empty_parameter_list)


state 676

  338 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list . ')'

    ')'  shift, and go to state 743


state 677

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list . ')'

    ')'  shift, and go to state 744


state 678

  299 expr_without_variable: expr '?' @46 expr ':' @47 . expr

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 745
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 679

  244 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @40 . ctor_arguments

    '('  shift, and go to state 440

    $default  reduce using rule 367 (ctor_arguments)

    ctor_arguments  go to state 746


state 680

  342 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list . ')'

    ')'  shift, and go to state 747


state 681

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list . ')'

    ')'  shift, and go to state 748


state 682

  424 method: '(' . @65 function_call_parameter_list ')'

    $default  reduce using rule 423 (@65)

    @65  go to state 749


state 683

  421 array_method_dereference: array_method_dereference . '[' dim_offset ']'
  426 method_or_not: array_method_dereference .

    '['  shift, and go to state 750

    $default  reduce using rule 426 (method_or_not)


state 684

  422 array_method_dereference: method . '[' dim_offset ']'
  425 method_or_not: method .

    '['  shift, and go to state 751

    $default  reduce using rule 425 (method_or_not)


state 685

  415 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not . variable_properties

    $default  reduce using rule 418 (variable_properties)

    variable_properties  go to state 752


state 686

  452 object_dim_list: object_dim_list '[' dim_offset . ']'

    ']'  shift, and go to state 753


state 687

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr
  453 object_dim_list: object_dim_list '{' expr . '}'

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    '}'                           shift, and go to state 754


state 688

  471 non_empty_array_pair_list: non_empty_array_pair_list ',' expr "=> (T_DOUBLE_ARROW)" '&' w_variable .

    $default  reduce using rule 471 (non_empty_array_pair_list)


state 689

  356 dynamic_class_name_reference: base_variable "-> (T_OBJECT_OPERATOR)" @60 object_property @61 dynamic_class_name_variable_properties .
  358 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties . dynamic_class_name_variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 755

    $default  reduce using rule 356 (dynamic_class_name_reference)

    dynamic_class_name_variable_property  go to state 756


state 690

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list . @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    "elseif (T_ELSEIF)"  reduce using rule 40 (@8)
    "else (T_ELSE)"      reduce using rule 40 (@8)
    "endif (T_ENDIF)"    reduce using rule 40 (@8)
    $default             reduce using rule 26 (@4)

    @4  go to state 363
    @8  go to state 757


state 691

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 . elseif_list else_single

    $default  reduce using rule 142 (elseif_list)

    elseif_list  go to state 758


state 692

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr . ')' ';'
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 759


state 693

  141 while_statement: ':' . inner_statement_list "endwhile (T_ENDWHILE)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 760


state 694

  140 while_statement: statement .

    $default  reduce using rule 140 (while_statement)


state 695

   44 unticked_statement: "while (T_WHILE)" '(' @9 expr ')' @10 while_statement .

    $default  reduce using rule 44 (unticked_statement)


state 696

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' . @14 for_expr ')' @15 for_statement

    $default  reduce using rule 49 (@14)

    @14  go to state 761


state 697

  118 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" . foreach_variable

    '&'                        shift, and go to state 632
    "identifier (T_STRING)"    shift, and go to state 115
    "variable (T_VARIABLE)"    shift, and go to state 34
    "static (T_STATIC)"        shift, and go to state 137
    "namespace (T_NAMESPACE)"  shift, and go to state 138
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 139
    '$'                        shift, and go to state 80

    namespace_name                     go to state 140
    foreach_variable                   go to state 762
    function_call                      go to state 96
    class_name                         go to state 141
    variable                           go to state 634
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 144
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112


state 698

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg . ')' @20 foreach_statement

    ')'  shift, and go to state 763


state 699

  120 foreach_variable: '&' variable .

    $default  reduce using rule 120 (foreach_variable)


state 700

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg . ')' @18 foreach_statement

    ')'  shift, and go to state 764


state 701

  128 declare_list: declare_list ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 765
    static_class_constant  go to state 467


state 702

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  126 declare_statement: ':' inner_statement_list . "enddeclare (T_ENDDECLARE)" ';'

    "enddeclare (T_ENDDECLARE)"  shift, and go to state 766

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 703

  132 switch_case_list: ':' ';' . case_list "endswitch (T_ENDSWITCH)" ';'

    $default  reduce using rule 133 (case_list)

    case_list  go to state 767


state 704

  131 switch_case_list: ':' case_list . "endswitch (T_ENDSWITCH)" ';'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 768
    "case (T_CASE)"            shift, and go to state 769
    "default (T_DEFAULT)"      shift, and go to state 770


state 705

  130 switch_case_list: '{' ';' . case_list '}'

    $default  reduce using rule 133 (case_list)

    case_list  go to state 771


state 706

  129 switch_case_list: '{' case_list . '}'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "case (T_CASE)"        shift, and go to state 769
    "default (T_DEFAULT)"  shift, and go to state 770
    '}'                    shift, and go to state 772


state 707

  406 non_empty_static_array_pair_list: static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 406 (non_empty_static_array_pair_list)


state 708

  404 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar . "=> (T_DOUBLE_ARROW)" static_scalar
  405                                 | non_empty_static_array_pair_list ',' static_scalar .

    "=> (T_DOUBLE_ARROW)"  shift, and go to state 773

    $default  reduce using rule 405 (non_empty_static_array_pair_list)


state 709

  388 static_scalar: "array (T_ARRAY)" '(' static_array_pair_list ')' .

    $default  reduce using rule 388 (static_scalar)


state 710

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' . @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 77 (@23)

    @23  go to state 774


state 711

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' . lexical_vars '{' inner_statement_list '}'

    "use (T_USE)"  shift, and go to state 738

    $default  reduce using rule 323 (lexical_vars)

    lexical_vars  go to state 775


state 712

  459 assignment_list: assignment_list . ',' assignment_list_element
  463 assignment_list_element: "list (T_LIST)" '(' @68 assignment_list . ')'

    ','  shift, and go to state 577
    ')'  shift, and go to state 776


state 713

  240 expr_without_variable: "list (T_LIST)" '(' @39 assignment_list ')' '=' expr .
  264                      | expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 240 (expr_without_variable)


state 714

  484 encaps_var: "${ (T_DOLLAR_OPEN_CURLY_BRACES)" "variable name (T_STRING_VARNAME)" '[' expr ']' '}' .

    $default  reduce using rule 484 (encaps_var)


state 715

  332 function_call: "namespace (T_NAMESPACE)" "\\ (T_NS_SEPARATOR)" namespace_name '(' @53 function_call_parameter_list ')' .

    $default  reduce using rule 332 (function_call)


state 716

   32 inner_statement: "__halt_compiler (T_HALT_COMPILER)" '(' ')' ';' .

    $default  reduce using rule 32 (inner_statement)


state 717

  173 non_empty_function_call_parameter_list: non_empty_function_call_parameter_list ',' '&' w_variable .

    $default  reduce using rule 173 (non_empty_function_call_parameter_list)


state 718

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list . '}'
  183 class_statement_list: class_statement_list . class_statement

    "const (T_CONST)"          shift, and go to state 720
    "use (T_USE)"              shift, and go to state 721
    "public (T_PUBLIC)"        shift, and go to state 722
    "protected (T_PROTECTED)"  shift, and go to state 723
    "private (T_PRIVATE)"      shift, and go to state 724
    "final (T_FINAL)"          shift, and go to state 725
    "abstract (T_ABSTRACT)"    shift, and go to state 726
    "static (T_STATIC)"        shift, and go to state 727
    "var (T_VAR)"              shift, and go to state 728
    '}'                        shift, and go to state 777

    $default  reduce using rule 216 (method_modifiers)

    class_statement             go to state 730
    trait_use_statement         go to state 731
    variable_modifiers          go to state 732
    method_modifiers            go to state 733
    non_empty_member_modifiers  go to state 734
    member_modifier             go to state 735
    class_constant_declaration  go to state 736


state 719

  116 interface_list: interface_list ',' fully_qualified_class_name .

    $default  reduce using rule 116 (interface_list)


state 720

  231 class_constant_declaration: "const (T_CONST)" . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 778


state 721

  191 trait_use_statement: "use (T_USE)" . trait_list trait_adaptations

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    trait_list                  go to state 779
    fully_qualified_class_name  go to state 780


state 722

  220 member_modifier: "public (T_PUBLIC)" .

    $default  reduce using rule 220 (member_modifier)


state 723

  221 member_modifier: "protected (T_PROTECTED)" .

    $default  reduce using rule 221 (member_modifier)


state 724

  222 member_modifier: "private (T_PRIVATE)" .

    $default  reduce using rule 222 (member_modifier)


state 725

  225 member_modifier: "final (T_FINAL)" .

    $default  reduce using rule 225 (member_modifier)


state 726

  224 member_modifier: "abstract (T_ABSTRACT)" .

    $default  reduce using rule 224 (member_modifier)


state 727

  223 member_modifier: "static (T_STATIC)" .

    $default  reduce using rule 223 (member_modifier)


state 728

  215 variable_modifiers: "var (T_VAR)" .

    $default  reduce using rule 215 (variable_modifiers)


state 729

  103 unticked_class_declaration_statement: interface_entry "identifier (T_STRING)" @31 interface_extends_list '{' class_statement_list '}' .

    $default  reduce using rule 103 (unticked_class_declaration_statement)


state 730

  183 class_statement_list: class_statement_list class_statement .

    $default  reduce using rule 183 (class_statement_list)


state 731

  188 class_statement: trait_use_statement .

    $default  reduce using rule 188 (class_statement)


state 732

  186 class_statement: variable_modifiers . @36 class_variable_declaration ';'

    $default  reduce using rule 185 (@36)

    @36  go to state 781


state 733

  190 class_statement: method_modifiers . function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    "function (T_FUNCTION)"  shift, and go to state 47

    function  go to state 782


state 734

  214 variable_modifiers: non_empty_member_modifiers .
  217 method_modifiers: non_empty_member_modifiers .
  219 non_empty_member_modifiers: non_empty_member_modifiers . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 722
    "protected (T_PROTECTED)"  shift, and go to state 723
    "private (T_PRIVATE)"      shift, and go to state 724
    "final (T_FINAL)"          shift, and go to state 725
    "abstract (T_ABSTRACT)"    shift, and go to state 726
    "static (T_STATIC)"        shift, and go to state 727

    "function (T_FUNCTION)"  reduce using rule 217 (method_modifiers)
    $default                 reduce using rule 214 (variable_modifiers)

    member_modifier  go to state 783


state 735

  218 non_empty_member_modifiers: member_modifier .

    $default  reduce using rule 218 (non_empty_member_modifiers)


state 736

  187 class_statement: class_constant_declaration . ';'
  230 class_constant_declaration: class_constant_declaration . ',' "identifier (T_STRING)" '=' static_scalar

    ','  shift, and go to state 784
    ';'  shift, and go to state 785


state 737

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' . '{' inner_statement_list '}'

    '{'  shift, and go to state 786


state 738

  324 lexical_vars: "use (T_USE)" . '(' lexical_var_list ')'

    '('  shift, and go to state 787


state 739

  319 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 788


state 740

  158 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)"
  159                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type . '&' "variable (T_VARIABLE)" '=' static_scalar
  161                         | non_empty_parameter_list ',' optional_class_type . "variable (T_VARIABLE)" '=' static_scalar

    '&'                      shift, and go to state 789
    "variable (T_VARIABLE)"  shift, and go to state 790


state 741

  155 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" .
  156                         | optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 791

    $default  reduce using rule 155 (non_empty_parameter_list)


state 742

  157 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 792
    static_class_constant  go to state 467


state 743

  338 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @56 function_call_parameter_list ')' .

    $default  reduce using rule 338 (function_call)


state 744

  336 function_call: class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @55 function_call_parameter_list ')' .

    $default  reduce using rule 336 (function_call)


state 745

  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  299                      | expr '?' @46 expr ':' @47 expr .
  301                      | expr . '?' ':' @48 expr

    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258

    $default  reduce using rule 299 (expr_without_variable)


state 746

  244 expr_without_variable: variable '=' '&' "new (T_NEW)" class_name_reference @40 ctor_arguments .

    $default  reduce using rule 244 (expr_without_variable)


state 747

  342 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_without_objects '(' @58 function_call_parameter_list ')' .

    $default  reduce using rule 342 (function_call)


state 748

  340 function_call: variable_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" variable_name '(' @57 function_call_parameter_list ')' .

    $default  reduce using rule 340 (function_call)


state 749

  424 method: '(' @65 . function_call_parameter_list ')'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '&'                                           shift, and go to state 503
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 167 (function_call_parameter_list)

    namespace_name                          go to state 83
    function_call_parameter_list            go to state 793
    non_empty_function_call_parameter_list  go to state 505
    expr_without_variable                   go to state 506
    function                                go to state 118
    function_call                           go to state 96
    class_name                              go to state 97
    common_scalar                           go to state 98
    scalar                                  go to state 99
    expr                                    go to state 181
    r_variable                              go to state 101
    rw_variable                             go to state 102
    variable                                go to state 507
    variable_without_objects                go to state 104
    static_member                           go to state 105
    variable_class_name                     go to state 106
    array_function_dereference              go to state 107
    base_variable_with_function_calls       go to state 108
    base_variable                           go to state 109
    reference_variable                      go to state 110
    compound_variable                       go to state 111
    simple_indirect_reference               go to state 112
    internal_functions_in_yacc              go to state 113
    class_constant                          go to state 114


state 750

  421 array_method_dereference: array_method_dereference '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 447 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 794
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 751

  422 array_method_dereference: method '[' . dim_offset ']'

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 447 (dim_offset)

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 426
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    dim_offset                         go to state 795
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 752

  415 variable: base_variable_with_function_calls "-> (T_OBJECT_OPERATOR)" @62 object_property @63 method_or_not variable_properties .
  417 variable_properties: variable_properties . variable_property

    "-> (T_OBJECT_OPERATOR)"  shift, and go to state 796

    $default  reduce using rule 415 (variable)

    variable_property  go to state 797


state 753

  452 object_dim_list: object_dim_list '[' dim_offset ']' .

    $default  reduce using rule 452 (object_dim_list)


state 754

  453 object_dim_list: object_dim_list '{' expr '}' .

    $default  reduce using rule 453 (object_dim_list)


state 755

  360 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" . object_property

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 798
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 756

  358 dynamic_class_name_variable_properties: dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    $default  reduce using rule 358 (dynamic_class_name_variable_properties)


state 757

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 . new_elseif_list new_else_single "endif (T_ENDIF)" ';'

    $default  reduce using rule 145 (new_elseif_list)

    new_elseif_list  go to state 799


state 758

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list . else_single
  144 elseif_list: elseif_list . "elseif (T_ELSEIF)" '(' expr ')' @34 statement

    "elseif (T_ELSEIF)"  shift, and go to state 800
    "else (T_ELSE)"      shift, and go to state 801

    "elseif (T_ELSEIF)"  [reduce using rule 148 (else_single)]
    "else (T_ELSE)"      [reduce using rule 148 (else_single)]
    $default             reduce using rule 148 (else_single)

    else_single  go to state 802


state 759

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' . ';'

    ';'  shift, and go to state 803


state 760

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  141 while_statement: ':' inner_statement_list . "endwhile (T_ENDWHILE)" ';'

    "endwhile (T_ENDWHILE)"  shift, and go to state 804

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 761

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 . for_expr ')' @15 for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    $default  reduce using rule 234 (for_expr)

    namespace_name                     go to state 83
    for_expr                           go to state 805
    non_empty_for_expr                 go to state 310
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 311
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 762

  118 foreach_optional_arg: "=> (T_DOUBLE_ARROW)" foreach_variable .

    $default  reduce using rule 118 (foreach_optional_arg)


state 763

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' . @20 foreach_statement

    $default  reduce using rule 71 (@20)

    @20  go to state 806


state 764

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' . @18 foreach_statement

    $default  reduce using rule 68 (@18)

    @18  go to state 807


state 765

  128 declare_list: declare_list ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 128 (declare_list)


state 766

  126 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" . ';'

    ';'  shift, and go to state 808


state 767

  132 switch_case_list: ':' ';' case_list . "endswitch (T_ENDSWITCH)" ';'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "endswitch (T_ENDSWITCH)"  shift, and go to state 809
    "case (T_CASE)"            shift, and go to state 769
    "default (T_DEFAULT)"      shift, and go to state 770


state 768

  131 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 810


state 769

  135 case_list: case_list "case (T_CASE)" . expr case_separator @32 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 811
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 770

  137 case_list: case_list "default (T_DEFAULT)" . case_separator @33 inner_statement_list

    ':'  shift, and go to state 812
    ';'  shift, and go to state 813

    case_separator  go to state 814


state 771

  130 switch_case_list: '{' ';' case_list . '}'
  135 case_list: case_list . "case (T_CASE)" expr case_separator @32 inner_statement_list
  137          | case_list . "default (T_DEFAULT)" case_separator @33 inner_statement_list

    "case (T_CASE)"        shift, and go to state 769
    "default (T_DEFAULT)"  shift, and go to state 770
    '}'                    shift, and go to state 815


state 772

  129 switch_case_list: '{' case_list '}' .

    $default  reduce using rule 129 (switch_case_list)


state 773

  404 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 816
    static_class_constant  go to state 467


state 774

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 . fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 817


state 775

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars . '{' inner_statement_list '}'

    '{'  shift, and go to state 818


state 776

  463 assignment_list_element: "list (T_LIST)" '(' @68 assignment_list ')' .

    $default  reduce using rule 463 (assignment_list_element)


state 777

  101 unticked_class_declaration_statement: class_entry_type "identifier (T_STRING)" extends_from @30 implements_list '{' class_statement_list '}' .

    $default  reduce using rule 101 (unticked_class_declaration_statement)


state 778

  231 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 819


state 779

  191 trait_use_statement: "use (T_USE)" trait_list . trait_adaptations
  193 trait_list: trait_list . ',' fully_qualified_class_name

    ','  shift, and go to state 820
    ';'  shift, and go to state 821
    '{'  shift, and go to state 822

    trait_adaptations  go to state 823


state 780

  192 trait_list: fully_qualified_class_name .

    $default  reduce using rule 192 (trait_list)


state 781

  186 class_statement: variable_modifiers @36 . class_variable_declaration ';'

    "variable (T_VARIABLE)"  shift, and go to state 824

    class_variable_declaration  go to state 825


state 782

  190 class_statement: method_modifiers function . is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    '&'  shift, and go to state 229

    $default  reduce using rule 96 (is_reference)

    is_reference  go to state 826


state 783

  219 non_empty_member_modifiers: non_empty_member_modifiers member_modifier .

    $default  reduce using rule 219 (non_empty_member_modifiers)


state 784

  230 class_constant_declaration: class_constant_declaration ',' . "identifier (T_STRING)" '=' static_scalar

    "identifier (T_STRING)"  shift, and go to state 827


state 785

  187 class_statement: class_constant_declaration ';' .

    $default  reduce using rule 187 (class_statement)


state 786

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 828


state 787

  324 lexical_vars: "use (T_USE)" '(' . lexical_var_list ')'

    '&'                      shift, and go to state 829
    "variable (T_VARIABLE)"  shift, and go to state 830

    lexical_var_list  go to state 831


state 788

  319 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 832


state 789

  159 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)"
  160                         | non_empty_parameter_list ',' optional_class_type '&' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 833


state 790

  158 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" .
  161                         | non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 834

    $default  reduce using rule 158 (non_empty_parameter_list)


state 791

  156 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 835
    static_class_constant  go to state 467


state 792

  157 non_empty_parameter_list: optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 157 (non_empty_parameter_list)


state 793

  424 method: '(' @65 function_call_parameter_list . ')'

    ')'  shift, and go to state 836


state 794

  421 array_method_dereference: array_method_dereference '[' dim_offset . ']'

    ']'  shift, and go to state 837


state 795

  422 array_method_dereference: method '[' dim_offset . ']'

    ']'  shift, and go to state 838


state 796

  420 variable_property: "-> (T_OBJECT_OPERATOR)" . object_property @64 method_or_not

    "identifier (T_STRING)"  shift, and go to state 433
    "variable (T_VARIABLE)"  shift, and go to state 34
    '{'                      shift, and go to state 377
    '$'                      shift, and go to state 80

    variable_without_objects   go to state 535
    reference_variable         go to state 379
    compound_variable          go to state 111
    object_property            go to state 839
    object_dim_list            go to state 537
    variable_name              go to state 538
    simple_indirect_reference  go to state 381


state 797

  417 variable_properties: variable_properties variable_property .

    $default  reduce using rule 417 (variable_properties)


state 798

  360 dynamic_class_name_variable_property: "-> (T_OBJECT_OPERATOR)" object_property .

    $default  reduce using rule 360 (dynamic_class_name_variable_property)


state 799

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list . new_else_single "endif (T_ENDIF)" ';'
  147 new_elseif_list: new_elseif_list . "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list

    "elseif (T_ELSEIF)"  shift, and go to state 840
    "else (T_ELSE)"      shift, and go to state 841

    $default  reduce using rule 150 (new_else_single)

    new_else_single  go to state 842


state 800

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" . '(' expr ')' @34 statement

    '('  shift, and go to state 843


state 801

  149 else_single: "else (T_ELSE)" . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 844
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 802

   38 unticked_statement: "if (T_IF)" '(' expr ')' @5 statement @6 elseif_list else_single .

    $default  reduce using rule 38 (unticked_statement)


state 803

   47 unticked_statement: "do (T_DO)" @11 statement "while (T_WHILE)" '(' @12 expr ')' ';' .

    $default  reduce using rule 47 (unticked_statement)


state 804

  141 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" . ';'

    ';'  shift, and go to state 845


state 805

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr . ')' @15 for_statement

    ')'  shift, and go to state 846


state 806

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 847
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 848
    unticked_statement                 go to state 87
    foreach_statement                  go to state 849
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 807

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 . foreach_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 847
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 848
    unticked_statement                 go to state 87
    foreach_statement                  go to state 850
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 808

  126 declare_statement: ':' inner_statement_list "enddeclare (T_ENDDECLARE)" ';' .

    $default  reduce using rule 126 (declare_statement)


state 809

  132 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" . ';'

    ';'  shift, and go to state 851


state 810

  131 switch_case_list: ':' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 131 (switch_case_list)


state 811

  135 case_list: case_list "case (T_CASE)" expr . case_separator @32 inner_statement_list
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    ':'                           shift, and go to state 812
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ';'                           shift, and go to state 813

    case_separator  go to state 852


state 812

  138 case_separator: ':' .

    $default  reduce using rule 138 (case_separator)


state 813

  139 case_separator: ';' .

    $default  reduce using rule 139 (case_separator)


state 814

  137 case_list: case_list "default (T_DEFAULT)" case_separator . @33 inner_statement_list

    $default  reduce using rule 136 (@33)

    @33  go to state 853


state 815

  130 switch_case_list: '{' ';' case_list '}' .

    $default  reduce using rule 130 (switch_case_list)


state 816

  404 non_empty_static_array_pair_list: non_empty_static_array_pair_list ',' static_scalar "=> (T_DOUBLE_ARROW)" static_scalar .

    $default  reduce using rule 404 (non_empty_static_array_pair_list)


state 817

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name . @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 78 (@24)

    @24  go to state 854


state 818

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 855


state 819

  231 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 856
    static_class_constant  go to state 467


state 820

  193 trait_list: trait_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 857


state 821

  194 trait_adaptations: ';' .

    $default  reduce using rule 194 (trait_adaptations)


state 822

  195 trait_adaptations: '{' . trait_adaptation_list '}'

    "identifier (T_STRING)"    shift, and go to state 858
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    $default  reduce using rule 196 (trait_adaptation_list)

    namespace_name                          go to state 511
    trait_adaptation_list                   go to state 859
    non_empty_trait_adaptation_list         go to state 860
    trait_adaptation_statement              go to state 861
    trait_precedence                        go to state 862
    trait_method_reference                  go to state 863
    trait_method_reference_fully_qualified  go to state 864
    trait_alias                             go to state 865
    fully_qualified_class_name              go to state 866


state 823

  191 trait_use_statement: "use (T_USE)" trait_list trait_adaptations .

    $default  reduce using rule 191 (trait_use_statement)


state 824

  228 class_variable_declaration: "variable (T_VARIABLE)" .
  229                           | "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 867

    $default  reduce using rule 228 (class_variable_declaration)


state 825

  186 class_statement: variable_modifiers @36 class_variable_declaration . ';'
  226 class_variable_declaration: class_variable_declaration . ',' "variable (T_VARIABLE)"
  227                           | class_variable_declaration . ',' "variable (T_VARIABLE)" '=' static_scalar

    ','  shift, and go to state 868
    ';'  shift, and go to state 869


state 826

  190 class_statement: method_modifiers function is_reference . "identifier (T_STRING)" @37 '(' parameter_list ')' method_body

    "identifier (T_STRING)"  shift, and go to state 870


state 827

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" . '=' static_scalar

    '='  shift, and go to state 871


state 828

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list . '}'

    '}'  shift, and go to state 872

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 829

  328 lexical_var_list: '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 873


state 830

  327 lexical_var_list: "variable (T_VARIABLE)" .

    $default  reduce using rule 327 (lexical_var_list)


state 831

  324 lexical_vars: "use (T_USE)" '(' lexical_var_list . ')'
  325 lexical_var_list: lexical_var_list . ',' "variable (T_VARIABLE)"
  326                 | lexical_var_list . ',' '&' "variable (T_VARIABLE)"

    ','  shift, and go to state 874
    ')'  shift, and go to state 875


state 832

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  319 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 876

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 833

  159 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" .
  160                         | non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 877

    $default  reduce using rule 159 (non_empty_parameter_list)


state 834

  161 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 878
    static_class_constant  go to state 467


state 835

  156 non_empty_parameter_list: optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 156 (non_empty_parameter_list)


state 836

  424 method: '(' @65 function_call_parameter_list ')' .

    $default  reduce using rule 424 (method)


state 837

  421 array_method_dereference: array_method_dereference '[' dim_offset ']' .

    $default  reduce using rule 421 (array_method_dereference)


state 838

  422 array_method_dereference: method '[' dim_offset ']' .

    $default  reduce using rule 422 (array_method_dereference)


state 839

  420 variable_property: "-> (T_OBJECT_OPERATOR)" object_property . @64 method_or_not

    $default  reduce using rule 419 (@64)

    @64  go to state 879


state 840

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" . '(' expr ')' ':' @35 inner_statement_list

    '('  shift, and go to state 880


state 841

  151 new_else_single: "else (T_ELSE)" . ':' inner_statement_list

    ':'  shift, and go to state 881


state 842

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single . "endif (T_ENDIF)" ';'

    "endif (T_ENDIF)"  shift, and go to state 882


state 843

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' . expr ')' @34 statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 883
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 844

  149 else_single: "else (T_ELSE)" statement .

    $default  reduce using rule 149 (else_single)


state 845

  141 while_statement: ':' inner_statement_list "endwhile (T_ENDWHILE)" ';' .

    $default  reduce using rule 141 (while_statement)


state 846

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' . @15 for_statement

    $default  reduce using rule 50 (@15)

    @15  go to state 884


state 847

  124 foreach_statement: ':' . inner_statement_list "endforeach (T_ENDFOREACH)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 885


state 848

  123 foreach_statement: statement .

    $default  reduce using rule 123 (foreach_statement)


state 849

   72 unticked_statement: "foreach (T_FOREACH)" '(' expr_without_variable "as (T_AS)" @19 variable foreach_optional_arg ')' @20 foreach_statement .

    $default  reduce using rule 72 (unticked_statement)


state 850

   69 unticked_statement: "foreach (T_FOREACH)" '(' variable "as (T_AS)" @17 foreach_variable foreach_optional_arg ')' @18 foreach_statement .

    $default  reduce using rule 69 (unticked_statement)


state 851

  132 switch_case_list: ':' ';' case_list "endswitch (T_ENDSWITCH)" ';' .

    $default  reduce using rule 132 (switch_case_list)


state 852

  135 case_list: case_list "case (T_CASE)" expr case_separator . @32 inner_statement_list

    $default  reduce using rule 134 (@32)

    @32  go to state 886


state 853

  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 887


state 854

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 . "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches

    "variable (T_VARIABLE)"  shift, and go to state 888


state 855

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list . '}'

    '}'  shift, and go to state 889

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 856

  231 class_constant_declaration: "const (T_CONST)" "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 231 (class_constant_declaration)


state 857

  193 trait_list: trait_list ',' fully_qualified_class_name .

    $default  reduce using rule 193 (trait_list)


state 858

    5 namespace_name: "identifier (T_STRING)" .
  205 trait_method_reference: "identifier (T_STRING)" .

    "as (T_AS)"  reduce using rule 205 (trait_method_reference)
    $default     reduce using rule 5 (namespace_name)


state 859

  195 trait_adaptations: '{' trait_adaptation_list . '}'

    '}'  shift, and go to state 890


state 860

  197 trait_adaptation_list: non_empty_trait_adaptation_list .
  199 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list . trait_adaptation_statement

    "identifier (T_STRING)"    shift, and go to state 858
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    $default  reduce using rule 197 (trait_adaptation_list)

    namespace_name                          go to state 511
    trait_adaptation_statement              go to state 891
    trait_precedence                        go to state 862
    trait_method_reference                  go to state 863
    trait_method_reference_fully_qualified  go to state 864
    trait_alias                             go to state 865
    fully_qualified_class_name              go to state 866


state 861

  198 non_empty_trait_adaptation_list: trait_adaptation_statement .

    $default  reduce using rule 198 (non_empty_trait_adaptation_list)


state 862

  200 trait_adaptation_statement: trait_precedence . ';'

    ';'  shift, and go to state 892


state 863

  208 trait_alias: trait_method_reference . "as (T_AS)" trait_modifiers "identifier (T_STRING)"
  209            | trait_method_reference . "as (T_AS)" member_modifier

    "as (T_AS)"  shift, and go to state 893


state 864

  202 trait_precedence: trait_method_reference_fully_qualified . "insteadof (T_INSTEADOF)" trait_reference_list
  206 trait_method_reference: trait_method_reference_fully_qualified .

    "insteadof (T_INSTEADOF)"  shift, and go to state 894

    $default  reduce using rule 206 (trait_method_reference)


state 865

  201 trait_adaptation_statement: trait_alias . ';'

    ';'  shift, and go to state 895


state 866

  207 trait_method_reference_fully_qualified: fully_qualified_class_name . ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)"

    ":: (T_PAAMAYIM_NEKUDOTAYIM)"  shift, and go to state 896


state 867

  229 class_variable_declaration: "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 897
    static_class_constant  go to state 467


state 868

  226 class_variable_declaration: class_variable_declaration ',' . "variable (T_VARIABLE)"
  227                           | class_variable_declaration ',' . "variable (T_VARIABLE)" '=' static_scalar

    "variable (T_VARIABLE)"  shift, and go to state 898


state 869

  186 class_statement: variable_modifiers @36 class_variable_declaration ';' .

    $default  reduce using rule 186 (class_statement)


state 870

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" . @37 '(' parameter_list ')' method_body

    $default  reduce using rule 189 (@37)

    @37  go to state 899


state 871

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 900
    static_class_constant  go to state 467


state 872

   99 unticked_function_declaration_statement: function is_reference "identifier (T_STRING)" @29 '(' parameter_list ')' '{' inner_statement_list '}' .

    $default  reduce using rule 99 (unticked_function_declaration_statement)


state 873

  328 lexical_var_list: '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 328 (lexical_var_list)


state 874

  325 lexical_var_list: lexical_var_list ',' . "variable (T_VARIABLE)"
  326                 | lexical_var_list ',' . '&' "variable (T_VARIABLE)"

    '&'                      shift, and go to state 901
    "variable (T_VARIABLE)"  shift, and go to state 902


state 875

  324 lexical_vars: "use (T_USE)" '(' lexical_var_list ')' .

    $default  reduce using rule 324 (lexical_vars)


state 876

  319 expr_without_variable: function is_reference '(' @50 parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 319 (expr_without_variable)


state 877

  160 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 903
    static_class_constant  go to state 467


state 878

  161 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 161 (non_empty_parameter_list)


state 879

  420 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @64 . method_or_not

    '('  shift, and go to state 682

    $default  reduce using rule 427 (method_or_not)

    array_method_dereference  go to state 683
    method                    go to state 684
    method_or_not             go to state 904


state 880

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' . expr ')' ':' @35 inner_statement_list

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "function (T_FUNCTION)"                       shift, and go to state 47
    "static (T_STATIC)"                           shift, and go to state 116
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 905
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 881

  151 new_else_single: "else (T_ELSE)" ':' . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 906


state 882

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" . ';'

    ';'  shift, and go to state 907


state 883

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr . ')' @34 statement
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 908


state 884

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 . for_statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    ':'                                           shift, and go to state 909
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 910
    unticked_statement                 go to state 87
    for_statement                      go to state 911
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 885

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  124 foreach_statement: ':' inner_statement_list . "endforeach (T_ENDFOREACH)" ';'

    "endforeach (T_ENDFOREACH)"  shift, and go to state 912

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 886

  135 case_list: case_list "case (T_CASE)" expr case_separator @32 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 913


state 887

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  137 case_list: case_list "default (T_DEFAULT)" case_separator @33 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 137 (case_list)
    "case (T_CASE)"            reduce using rule 137 (case_list)
    "default (T_DEFAULT)"      reduce using rule 137 (case_list)
    '}'                        reduce using rule 137 (case_list)
    $default                   reduce using rule 26 (@4)

    @4  go to state 363


state 888

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" . ')' @25 '{' inner_statement_list '}' @26 additional_catches

    ')'  shift, and go to state 914


state 889

  321 expr_without_variable: "static (T_STATIC)" function is_reference '(' @51 parameter_list ')' lexical_vars '{' inner_statement_list '}' .

    $default  reduce using rule 321 (expr_without_variable)


state 890

  195 trait_adaptations: '{' trait_adaptation_list '}' .

    $default  reduce using rule 195 (trait_adaptations)


state 891

  199 non_empty_trait_adaptation_list: non_empty_trait_adaptation_list trait_adaptation_statement .

    $default  reduce using rule 199 (non_empty_trait_adaptation_list)


state 892

  200 trait_adaptation_statement: trait_precedence ';' .

    $default  reduce using rule 200 (trait_adaptation_statement)


state 893

  208 trait_alias: trait_method_reference "as (T_AS)" . trait_modifiers "identifier (T_STRING)"
  209            | trait_method_reference "as (T_AS)" . member_modifier

    "public (T_PUBLIC)"        shift, and go to state 722
    "protected (T_PROTECTED)"  shift, and go to state 723
    "private (T_PRIVATE)"      shift, and go to state 724
    "final (T_FINAL)"          shift, and go to state 725
    "abstract (T_ABSTRACT)"    shift, and go to state 726
    "static (T_STATIC)"        shift, and go to state 727

    $default  reduce using rule 210 (trait_modifiers)

    trait_modifiers  go to state 915
    member_modifier  go to state 916


state 894

  202 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" . trait_reference_list

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    trait_reference_list        go to state 917
    fully_qualified_class_name  go to state 918


state 895

  201 trait_adaptation_statement: trait_alias ';' .

    $default  reduce using rule 201 (trait_adaptation_statement)


state 896

  207 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 919


state 897

  229 class_variable_declaration: "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 229 (class_variable_declaration)


state 898

  226 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" .
  227                           | class_variable_declaration ',' "variable (T_VARIABLE)" . '=' static_scalar

    '='  shift, and go to state 920

    $default  reduce using rule 226 (class_variable_declaration)


state 899

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 . '(' parameter_list ')' method_body

    '('  shift, and go to state 921


state 900

  230 class_constant_declaration: class_constant_declaration ',' "identifier (T_STRING)" '=' static_scalar .

    $default  reduce using rule 230 (class_constant_declaration)


state 901

  326 lexical_var_list: lexical_var_list ',' '&' . "variable (T_VARIABLE)"

    "variable (T_VARIABLE)"  shift, and go to state 922


state 902

  325 lexical_var_list: lexical_var_list ',' "variable (T_VARIABLE)" .

    $default  reduce using rule 325 (lexical_var_list)


state 903

  160 non_empty_parameter_list: non_empty_parameter_list ',' optional_class_type '&' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 160 (non_empty_parameter_list)


state 904

  420 variable_property: "-> (T_OBJECT_OPERATOR)" object_property @64 method_or_not .

    $default  reduce using rule 420 (variable_property)


state 905

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr . ')' ':' @35 inner_statement_list
  264 expr_without_variable: expr . "|| (T_BOOLEAN_OR)" @42 expr
  266                      | expr . "&& (T_BOOLEAN_AND)" @43 expr
  268                      | expr . "or (T_LOGICAL_OR)" @44 expr
  270                      | expr . "and (T_LOGICAL_AND)" @45 expr
  271                      | expr . "xor (T_LOGICAL_XOR)" expr
  272                      | expr . '|' expr
  273                      | expr . '&' expr
  274                      | expr . '^' expr
  275                      | expr . '.' expr
  276                      | expr . '+' expr
  277                      | expr . '-' expr
  278                      | expr . '*' expr
  279                      | expr . '/' expr
  280                      | expr . '%' expr
  281                      | expr . "<< (T_SL)" expr
  282                      | expr . ">> (T_SR)" expr
  287                      | expr . "=== (T_IS_IDENTICAL)" expr
  288                      | expr . "!== (T_IS_NOT_IDENTICAL)" expr
  289                      | expr . "== (T_IS_EQUAL)" expr
  290                      | expr . "!= (T_IS_NOT_EQUAL)" expr
  291                      | expr . '<' expr
  292                      | expr . "<= (T_IS_SMALLER_OR_EQUAL)" expr
  293                      | expr . '>' expr
  294                      | expr . ">= (T_IS_GREATER_OR_EQUAL)" expr
  295                      | expr . "instanceof (T_INSTANCEOF)" class_name_reference
  299                      | expr . '?' @46 expr ':' @47 expr
  301                      | expr . '?' ':' @48 expr

    "or (T_LOGICAL_OR)"           shift, and go to state 233
    "xor (T_LOGICAL_XOR)"         shift, and go to state 234
    "and (T_LOGICAL_AND)"         shift, and go to state 235
    '?'                           shift, and go to state 236
    "|| (T_BOOLEAN_OR)"           shift, and go to state 237
    "&& (T_BOOLEAN_AND)"          shift, and go to state 238
    '|'                           shift, and go to state 239
    '^'                           shift, and go to state 240
    '&'                           shift, and go to state 241
    "!== (T_IS_NOT_IDENTICAL)"    shift, and go to state 242
    "=== (T_IS_IDENTICAL)"        shift, and go to state 243
    "!= (T_IS_NOT_EQUAL)"         shift, and go to state 244
    "== (T_IS_EQUAL)"             shift, and go to state 245
    '<'                           shift, and go to state 246
    '>'                           shift, and go to state 247
    ">= (T_IS_GREATER_OR_EQUAL)"  shift, and go to state 248
    "<= (T_IS_SMALLER_OR_EQUAL)"  shift, and go to state 249
    ">> (T_SR)"                   shift, and go to state 250
    "<< (T_SL)"                   shift, and go to state 251
    '+'                           shift, and go to state 252
    '-'                           shift, and go to state 253
    '.'                           shift, and go to state 254
    '*'                           shift, and go to state 255
    '/'                           shift, and go to state 256
    '%'                           shift, and go to state 257
    "instanceof (T_INSTANCEOF)"   shift, and go to state 258
    ')'                           shift, and go to state 923


state 906

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  151 new_else_single: "else (T_ELSE)" ':' inner_statement_list .

    "endif (T_ENDIF)"  reduce using rule 151 (new_else_single)
    $default           reduce using rule 26 (@4)

    @4  go to state 363


state 907

   41 unticked_statement: "if (T_IF)" '(' expr ')' ':' @7 inner_statement_list @8 new_elseif_list new_else_single "endif (T_ENDIF)" ';' .

    $default  reduce using rule 41 (unticked_statement)


state 908

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' . @34 statement

    $default  reduce using rule 143 (@34)

    @34  go to state 924


state 909

  122 for_statement: ':' . inner_statement_list "endfor (T_ENDFOR)" ';'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 925


state 910

  121 for_statement: statement .

    $default  reduce using rule 121 (for_statement)


state 911

   51 unticked_statement: "for (T_FOR)" '(' for_expr ';' @13 for_expr ';' @14 for_expr ')' @15 for_statement .

    $default  reduce using rule 51 (unticked_statement)


state 912

  124 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" . ';'

    ';'  shift, and go to state 926


state 913

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  135 case_list: case_list "case (T_CASE)" expr case_separator @32 inner_statement_list .

    "endswitch (T_ENDSWITCH)"  reduce using rule 135 (case_list)
    "case (T_CASE)"            reduce using rule 135 (case_list)
    "default (T_DEFAULT)"      reduce using rule 135 (case_list)
    '}'                        reduce using rule 135 (case_list)
    $default                   reduce using rule 26 (@4)

    @4  go to state 363


state 914

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' . @25 '{' inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 79 (@25)

    @25  go to state 927


state 915

  208 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers . "identifier (T_STRING)"

    "identifier (T_STRING)"  shift, and go to state 928


state 916

  209 trait_alias: trait_method_reference "as (T_AS)" member_modifier .
  211 trait_modifiers: member_modifier .

    "identifier (T_STRING)"  reduce using rule 211 (trait_modifiers)
    $default                 reduce using rule 209 (trait_alias)


state 917

  202 trait_precedence: trait_method_reference_fully_qualified "insteadof (T_INSTEADOF)" trait_reference_list .
  204 trait_reference_list: trait_reference_list . ',' fully_qualified_class_name

    ','  shift, and go to state 929

    $default  reduce using rule 202 (trait_precedence)


state 918

  203 trait_reference_list: fully_qualified_class_name .

    $default  reduce using rule 203 (trait_reference_list)


state 919

  207 trait_method_reference_fully_qualified: fully_qualified_class_name ":: (T_PAAMAYIM_NEKUDOTAYIM)" "identifier (T_STRING)" .

    $default  reduce using rule 207 (trait_method_reference_fully_qualified)


state 920

  227 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' . static_scalar

    '+'                                           shift, and go to state 456
    '-'                                           shift, and go to state 457
    '['                                           shift, and go to state 458
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 115
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "static (T_STATIC)"                           shift, and go to state 137
    "array (T_ARRAY)"                             shift, and go to state 459
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 460
    "namespace (T_NAMESPACE)"                     shift, and go to state 461
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 462

    namespace_name         go to state 463
    class_name             go to state 464
    common_scalar          go to state 465
    static_scalar          go to state 930
    static_class_constant  go to state 467


state 921

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' . parameter_list ')' method_body

    "identifier (T_STRING)"    shift, and go to state 115
    "array (T_ARRAY)"          shift, and go to state 601
    "callable (T_CALLABLE)"    shift, and go to state 602
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    ')'       reduce using rule 153 (parameter_list)
    $default  reduce using rule 162 (optional_class_type)

    namespace_name              go to state 511
    parameter_list              go to state 931
    non_empty_parameter_list    go to state 604
    optional_class_type         go to state 605
    fully_qualified_class_name  go to state 606


state 922

  326 lexical_var_list: lexical_var_list ',' '&' "variable (T_VARIABLE)" .

    $default  reduce using rule 326 (lexical_var_list)


state 923

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' . ':' @35 inner_statement_list

    ':'  shift, and go to state 932


state 924

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 . statement

    "require_once (T_REQUIRE_ONCE)"               shift, and go to state 5
    "require (T_REQUIRE)"                         shift, and go to state 6
    "eval (T_EVAL)"                               shift, and go to state 7
    "include_once (T_INCLUDE_ONCE)"               shift, and go to state 8
    "include (T_INCLUDE)"                         shift, and go to state 9
    "print (T_PRINT)"                             shift, and go to state 10
    '+'                                           shift, and go to state 11
    '-'                                           shift, and go to state 12
    '!'                                           shift, and go to state 13
    '~'                                           shift, and go to state 14
    '@'                                           shift, and go to state 15
    "(unset) (T_UNSET_CAST)"                      shift, and go to state 16
    "(bool) (T_BOOL_CAST)"                        shift, and go to state 17
    "(object) (T_OBJECT_CAST)"                    shift, and go to state 18
    "(array) (T_ARRAY_CAST)"                      shift, and go to state 19
    "(string) (T_STRING_CAST)"                    shift, and go to state 20
    "(double) (T_DOUBLE_CAST)"                    shift, and go to state 21
    "(int) (T_INT_CAST)"                          shift, and go to state 22
    "-- (T_DEC)"                                  shift, and go to state 23
    "++ (T_INC)"                                  shift, and go to state 24
    '['                                           shift, and go to state 25
    "clone (T_CLONE)"                             shift, and go to state 26
    "new (T_NEW)"                                 shift, and go to state 27
    "exit (T_EXIT)"                               shift, and go to state 28
    "if (T_IF)"                                   shift, and go to state 29
    "integer number (T_LNUMBER)"                  shift, and go to state 30
    "floating-point number (T_DNUMBER)"           shift, and go to state 31
    "identifier (T_STRING)"                       shift, and go to state 32
    "variable name (T_STRING_VARNAME)"            shift, and go to state 33
    "variable (T_VARIABLE)"                       shift, and go to state 34
    T_INLINE_HTML                                 shift, and go to state 35
    "quoted-string (T_CONSTANT_ENCAPSED_STRING)"  shift, and go to state 36
    "echo (T_ECHO)"                               shift, and go to state 37
    "do (T_DO)"                                   shift, and go to state 38
    "while (T_WHILE)"                             shift, and go to state 39
    "for (T_FOR)"                                 shift, and go to state 40
    "foreach (T_FOREACH)"                         shift, and go to state 41
    "declare (T_DECLARE)"                         shift, and go to state 42
    "switch (T_SWITCH)"                           shift, and go to state 43
    "break (T_BREAK)"                             shift, and go to state 44
    "continue (T_CONTINUE)"                       shift, and go to state 45
    "goto (T_GOTO)"                               shift, and go to state 46
    "function (T_FUNCTION)"                       shift, and go to state 47
    "return (T_RETURN)"                           shift, and go to state 49
    "try (T_TRY)"                                 shift, and go to state 50
    "throw (T_THROW)"                             shift, and go to state 51
    "global (T_GLOBAL)"                           shift, and go to state 53
    "static (T_STATIC)"                           shift, and go to state 56
    "unset (T_UNSET)"                             shift, and go to state 57
    "isset (T_ISSET)"                             shift, and go to state 58
    "empty (T_EMPTY)"                             shift, and go to state 59
    "list (T_LIST)"                               shift, and go to state 64
    "array (T_ARRAY)"                             shift, and go to state 65
    "__CLASS__ (T_CLASS_C)"                       shift, and go to state 66
    "__TRAIT__ (T_TRAIT_C)"                       shift, and go to state 67
    "__METHOD__ (T_METHOD_C)"                     shift, and go to state 68
    "__FUNCTION__ (T_FUNC_C)"                     shift, and go to state 69
    "__LINE__ (T_LINE)"                           shift, and go to state 70
    "__FILE__ (T_FILE)"                           shift, and go to state 71
    "heredoc start (T_START_HEREDOC)"             shift, and go to state 72
    "namespace (T_NAMESPACE)"                     shift, and go to state 117
    "__NAMESPACE__ (T_NS_C)"                      shift, and go to state 74
    "__DIR__ (T_DIR)"                             shift, and go to state 75
    "\\ (T_NS_SEPARATOR)"                         shift, and go to state 76
    '('                                           shift, and go to state 77
    ';'                                           shift, and go to state 78
    '{'                                           shift, and go to state 79
    '$'                                           shift, and go to state 80
    '`'                                           shift, and go to state 81
    '"'                                           shift, and go to state 82

    namespace_name                     go to state 83
    statement                          go to state 933
    unticked_statement                 go to state 87
    expr_without_variable              go to state 94
    function                           go to state 118
    function_call                      go to state 96
    class_name                         go to state 97
    common_scalar                      go to state 98
    scalar                             go to state 99
    expr                               go to state 100
    r_variable                         go to state 101
    rw_variable                        go to state 102
    variable                           go to state 103
    variable_without_objects           go to state 104
    static_member                      go to state 105
    variable_class_name                go to state 106
    array_function_dereference         go to state 107
    base_variable_with_function_calls  go to state 108
    base_variable                      go to state 109
    reference_variable                 go to state 110
    compound_variable                  go to state 111
    simple_indirect_reference          go to state 112
    internal_functions_in_yacc         go to state 113
    class_constant                     go to state 114


state 925

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  122 for_statement: ':' inner_statement_list . "endfor (T_ENDFOR)" ';'

    "endfor (T_ENDFOR)"  shift, and go to state 934

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 926

  124 foreach_statement: ':' inner_statement_list "endforeach (T_ENDFOREACH)" ';' .

    $default  reduce using rule 124 (foreach_statement)


state 927

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 . '{' inner_statement_list '}' @26 additional_catches

    '{'  shift, and go to state 935


state 928

  208 trait_alias: trait_method_reference "as (T_AS)" trait_modifiers "identifier (T_STRING)" .

    $default  reduce using rule 208 (trait_alias)


state 929

  204 trait_reference_list: trait_reference_list ',' . fully_qualified_class_name

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 936


state 930

  227 class_variable_declaration: class_variable_declaration ',' "variable (T_VARIABLE)" '=' static_scalar .

    $default  reduce using rule 227 (class_variable_declaration)


state 931

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list . ')' method_body

    ')'  shift, and go to state 937


state 932

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' . @35 inner_statement_list

    $default  reduce using rule 146 (@35)

    @35  go to state 938


state 933

  144 elseif_list: elseif_list "elseif (T_ELSEIF)" '(' expr ')' @34 statement .

    $default  reduce using rule 144 (elseif_list)


state 934

  122 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" . ';'

    ';'  shift, and go to state 939


state 935

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' . inner_statement_list '}' @26 additional_catches

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 940


state 936

  204 trait_reference_list: trait_reference_list ',' fully_qualified_class_name .

    $default  reduce using rule 204 (trait_reference_list)


state 937

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' . method_body

    ';'  shift, and go to state 941
    '{'  shift, and go to state 942

    method_body  go to state 943


state 938

  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 . inner_statement_list

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 944


state 939

  122 for_statement: ':' inner_statement_list "endfor (T_ENDFOR)" ';' .

    $default  reduce using rule 122 (for_statement)


state 940

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list . '}' @26 additional_catches

    '}'  shift, and go to state 945

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 941

  212 method_body: ';' .

    $default  reduce using rule 212 (method_body)


state 942

  213 method_body: '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 946


state 943

  190 class_statement: method_modifiers function is_reference "identifier (T_STRING)" @37 '(' parameter_list ')' method_body .

    $default  reduce using rule 190 (class_statement)


state 944

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  147 new_elseif_list: new_elseif_list "elseif (T_ELSEIF)" '(' expr ')' ':' @35 inner_statement_list .

    "elseif (T_ELSEIF)"  reduce using rule 147 (new_elseif_list)
    "else (T_ELSE)"      reduce using rule 147 (new_elseif_list)
    "endif (T_ENDIF)"    reduce using rule 147 (new_elseif_list)
    $default             reduce using rule 26 (@4)

    @4  go to state 363


state 945

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' . @26 additional_catches

    $default  reduce using rule 80 (@26)

    @26  go to state 947


state 946

   27 inner_statement_list: inner_statement_list . @4 inner_statement
  213 method_body: '{' inner_statement_list . '}'

    '}'  shift, and go to state 948

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 947

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 . additional_catches

    "catch (T_CATCH)"  shift, and go to state 949

    $default  reduce using rule 85 (additional_catches)

    additional_catches            go to state 950
    non_empty_additional_catches  go to state 951
    additional_catch              go to state 952


state 948

  213 method_body: '{' inner_statement_list '}' .

    $default  reduce using rule 213 (method_body)


state 949

   90 additional_catch: "catch (T_CATCH)" . '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    '('  shift, and go to state 953


state 950

   81 unticked_statement: "try (T_TRY)" @22 '{' inner_statement_list '}' "catch (T_CATCH)" '(' @23 fully_qualified_class_name @24 "variable (T_VARIABLE)" ')' @25 '{' inner_statement_list '}' @26 additional_catches .

    $default  reduce using rule 81 (unticked_statement)


state 951

   84 additional_catches: non_empty_additional_catches .
   87 non_empty_additional_catches: non_empty_additional_catches . additional_catch

    "catch (T_CATCH)"  shift, and go to state 949

    $default  reduce using rule 84 (additional_catches)

    additional_catch  go to state 954


state 952

   86 non_empty_additional_catches: additional_catch .

    $default  reduce using rule 86 (non_empty_additional_catches)


state 953

   90 additional_catch: "catch (T_CATCH)" '(' . fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    "identifier (T_STRING)"    shift, and go to state 115
    "namespace (T_NAMESPACE)"  shift, and go to state 509
    "\\ (T_NS_SEPARATOR)"      shift, and go to state 510

    namespace_name              go to state 511
    fully_qualified_class_name  go to state 955


state 954

   87 non_empty_additional_catches: non_empty_additional_catches additional_catch .

    $default  reduce using rule 87 (non_empty_additional_catches)


state 955

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name . @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    $default  reduce using rule 88 (@27)

    @27  go to state 956


state 956

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 . "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}'

    "variable (T_VARIABLE)"  shift, and go to state 957


state 957

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" . ')' @28 '{' inner_statement_list '}'

    ')'  shift, and go to state 958


state 958

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' . @28 '{' inner_statement_list '}'

    $default  reduce using rule 89 (@28)

    @28  go to state 959


state 959

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 . '{' inner_statement_list '}'

    '{'  shift, and go to state 960


state 960

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' . inner_statement_list '}'

    $default  reduce using rule 28 (inner_statement_list)

    inner_statement_list  go to state 961


state 961

   27 inner_statement_list: inner_statement_list . @4 inner_statement
   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list . '}'

    '}'  shift, and go to state 962

    $default  reduce using rule 26 (@4)

    @4  go to state 363


state 962

   90 additional_catch: "catch (T_CATCH)" '(' fully_qualified_class_name @27 "variable (T_VARIABLE)" ')' @28 '{' inner_statement_list '}' .

    $default  reduce using rule 90 (additional_catch)
